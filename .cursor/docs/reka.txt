└── docs
    └── content
        ├── docs
            ├── components
            │   ├── accordion.md
            │   ├── alert-dialog.md
            │   ├── aspect-ratio.md
            │   ├── avatar.md
            │   ├── calendar.md
            │   ├── checkbox.md
            │   ├── collapsible.md
            │   ├── combobox.md
            │   ├── context-menu.md
            │   ├── date-field.md
            │   ├── date-picker.md
            │   ├── date-range-field.md
            │   ├── date-range-picker.md
            │   ├── dialog.md
            │   ├── dropdown-menu.md
            │   ├── editable.md
            │   ├── hover-card.md
            │   ├── label.md
            │   ├── listbox.md
            │   ├── menubar.md
            │   ├── navigation-menu.md
            │   ├── number-field.md
            │   ├── pagination.md
            │   ├── pin-input.md
            │   ├── popover.md
            │   ├── progress.md
            │   ├── radio-group.md
            │   ├── range-calendar.md
            │   ├── scroll-area.md
            │   ├── select.md
            │   ├── separator.md
            │   ├── slider.md
            │   ├── splitter.md
            │   ├── stepper.md
            │   ├── switch.md
            │   ├── tabs.md
            │   ├── tags-input.md
            │   ├── time-field.md
            │   ├── toast.md
            │   ├── toggle-group.md
            │   ├── toggle.md
            │   ├── toolbar.md
            │   ├── tooltip.md
            │   └── tree.md
            ├── guides
            │   ├── animation.md
            │   ├── composition.md
            │   ├── controlled-state.md
            │   ├── dates.md
            │   ├── i18n.md
            │   ├── inject-context.md
            │   ├── migration.md
            │   ├── namespaced-components.md
            │   ├── server-side-rendering.md
            │   ├── styling.md
            │   └── virtualization.md
            ├── overview
            │   ├── accessibility.md
            │   ├── getting-started.md
            │   ├── installation.md
            │   ├── introduction.md
            │   └── releases.md
            └── utilities
            │   ├── config-provider.md
            │   ├── focus-scope.md
            │   ├── presence.md
            │   ├── primitive.md
            │   ├── roving-focus.md
            │   ├── slot.md
            │   ├── use-date-formatter.md
            │   ├── use-emit-as-props.md
            │   ├── use-filter.md
            │   ├── use-forward-expose.md
            │   ├── use-forward-props-emits.md
            │   ├── use-forward-props.md
            │   ├── use-id.md
            │   └── visually-hidden.md
        ├── examples.md
        ├── examples
            ├── checkbox-group.md
            ├── combobox-tags-input.md
            ├── combobox-textarea.md
            ├── date-picker-selection.md
            ├── dialog-command-menu.md
            ├── dialog-gesture-driven.md
            ├── listbox-transfer.md
            ├── progress-circular.md
            ├── slider-number-field.md
            ├── slider-tooltip.md
            └── tooltip-cursor.md
        ├── index.md
        ├── meta
            ├── AccordionContent.md
            ├── AccordionHeader.md
            ├── AccordionItem.md
            ├── AccordionRoot.md
            ├── AccordionTrigger.md
            ├── AlertDialogAction.md
            ├── AlertDialogCancel.md
            ├── AlertDialogContent.md
            ├── AlertDialogDescription.md
            ├── AlertDialogOverlay.md
            ├── AlertDialogPortal.md
            ├── AlertDialogRoot.md
            ├── AlertDialogTitle.md
            ├── AlertDialogTrigger.md
            ├── AspectRatio.md
            ├── AvatarFallback.md
            ├── AvatarImage.md
            ├── AvatarRoot.md
            ├── CalendarCell.md
            ├── CalendarCellTrigger.md
            ├── CalendarGrid.md
            ├── CalendarGridBody.md
            ├── CalendarGridHead.md
            ├── CalendarGridRow.md
            ├── CalendarHeadCell.md
            ├── CalendarHeader.md
            ├── CalendarHeading.md
            ├── CalendarNext.md
            ├── CalendarPrev.md
            ├── CalendarRoot.md
            ├── CheckboxGroupRoot.md
            ├── CheckboxIndicator.md
            ├── CheckboxRoot.md
            ├── CollapsibleContent.md
            ├── CollapsibleRoot.md
            ├── CollapsibleTrigger.md
            ├── ComboboxAnchor.md
            ├── ComboboxArrow.md
            ├── ComboboxCancel.md
            ├── ComboboxContent.md
            ├── ComboboxEmpty.md
            ├── ComboboxGroup.md
            ├── ComboboxInput.md
            ├── ComboboxItem.md
            ├── ComboboxItemIndicator.md
            ├── ComboboxLabel.md
            ├── ComboboxPortal.md
            ├── ComboboxRoot.md
            ├── ComboboxSeparator.md
            ├── ComboboxTrigger.md
            ├── ComboboxViewport.md
            ├── ComboboxVirtualizer.md
            ├── ConfigProvider.md
            ├── ContextMenuArrow.md
            ├── ContextMenuCheckboxItem.md
            ├── ContextMenuContent.md
            ├── ContextMenuGroup.md
            ├── ContextMenuItem.md
            ├── ContextMenuItemIndicator.md
            ├── ContextMenuLabel.md
            ├── ContextMenuPortal.md
            ├── ContextMenuRadioGroup.md
            ├── ContextMenuRadioItem.md
            ├── ContextMenuRoot.md
            ├── ContextMenuSeparator.md
            ├── ContextMenuSub.md
            ├── ContextMenuSubContent.md
            ├── ContextMenuSubTrigger.md
            ├── ContextMenuTrigger.md
            ├── DateFieldInput.md
            ├── DateFieldRoot.md
            ├── DatePickerAnchor.md
            ├── DatePickerArrow.md
            ├── DatePickerCalendar.md
            ├── DatePickerCell.md
            ├── DatePickerCellTrigger.md
            ├── DatePickerClose.md
            ├── DatePickerContent.md
            ├── DatePickerField.md
            ├── DatePickerGrid.md
            ├── DatePickerGridBody.md
            ├── DatePickerGridHead.md
            ├── DatePickerGridRow.md
            ├── DatePickerHeadCell.md
            ├── DatePickerHeader.md
            ├── DatePickerHeading.md
            ├── DatePickerInput.md
            ├── DatePickerNext.md
            ├── DatePickerPrev.md
            ├── DatePickerRoot.md
            ├── DatePickerTrigger.md
            ├── DateRangeFieldInput.md
            ├── DateRangeFieldRoot.md
            ├── DateRangePickerAnchor.md
            ├── DateRangePickerArrow.md
            ├── DateRangePickerCalendar.md
            ├── DateRangePickerCell.md
            ├── DateRangePickerCellTrigger.md
            ├── DateRangePickerClose.md
            ├── DateRangePickerContent.md
            ├── DateRangePickerField.md
            ├── DateRangePickerGrid.md
            ├── DateRangePickerGridBody.md
            ├── DateRangePickerGridHead.md
            ├── DateRangePickerGridRow.md
            ├── DateRangePickerHeadCell.md
            ├── DateRangePickerHeader.md
            ├── DateRangePickerHeading.md
            ├── DateRangePickerInput.md
            ├── DateRangePickerNext.md
            ├── DateRangePickerPrev.md
            ├── DateRangePickerRoot.md
            ├── DateRangePickerTrigger.md
            ├── DialogClose.md
            ├── DialogContent.md
            ├── DialogDescription.md
            ├── DialogOverlay.md
            ├── DialogPortal.md
            ├── DialogRoot.md
            ├── DialogTitle.md
            ├── DialogTrigger.md
            ├── DropdownMenuArrow.md
            ├── DropdownMenuCheckboxItem.md
            ├── DropdownMenuContent.md
            ├── DropdownMenuGroup.md
            ├── DropdownMenuItem.md
            ├── DropdownMenuItemIndicator.md
            ├── DropdownMenuLabel.md
            ├── DropdownMenuPortal.md
            ├── DropdownMenuRadioGroup.md
            ├── DropdownMenuRadioItem.md
            ├── DropdownMenuRoot.md
            ├── DropdownMenuSeparator.md
            ├── DropdownMenuSub.md
            ├── DropdownMenuSubContent.md
            ├── DropdownMenuSubTrigger.md
            ├── DropdownMenuTrigger.md
            ├── EditableArea.md
            ├── EditableCancelTrigger.md
            ├── EditableEditTrigger.md
            ├── EditableInput.md
            ├── EditablePreview.md
            ├── EditableRoot.md
            ├── EditableSubmitTrigger.md
            ├── FocusScope.md
            ├── HoverCardArrow.md
            ├── HoverCardContent.md
            ├── HoverCardPortal.md
            ├── HoverCardRoot.md
            ├── HoverCardTrigger.md
            ├── Label.md
            ├── ListboxContent.md
            ├── ListboxFilter.md
            ├── ListboxGroup.md
            ├── ListboxGroupLabel.md
            ├── ListboxItem.md
            ├── ListboxItemIndicator.md
            ├── ListboxRoot.md
            ├── ListboxVirtualizer.md
            ├── MenubarArrow.md
            ├── MenubarCheckboxItem.md
            ├── MenubarContent.md
            ├── MenubarGroup.md
            ├── MenubarItem.md
            ├── MenubarItemIndicator.md
            ├── MenubarLabel.md
            ├── MenubarMenu.md
            ├── MenubarPortal.md
            ├── MenubarRadioGroup.md
            ├── MenubarRadioItem.md
            ├── MenubarRoot.md
            ├── MenubarSeparator.md
            ├── MenubarSub.md
            ├── MenubarSubContent.md
            ├── MenubarSubTrigger.md
            ├── MenubarTrigger.md
            ├── NavigationMenuContent.md
            ├── NavigationMenuIndicator.md
            ├── NavigationMenuItem.md
            ├── NavigationMenuLink.md
            ├── NavigationMenuList.md
            ├── NavigationMenuRoot.md
            ├── NavigationMenuSub.md
            ├── NavigationMenuTrigger.md
            ├── NavigationMenuViewport.md
            ├── NumberFieldDecrement.md
            ├── NumberFieldIncrement.md
            ├── NumberFieldInput.md
            ├── NumberFieldRoot.md
            ├── PaginationEllipsis.md
            ├── PaginationFirst.md
            ├── PaginationLast.md
            ├── PaginationList.md
            ├── PaginationListItem.md
            ├── PaginationNext.md
            ├── PaginationPrev.md
            ├── PaginationRoot.md
            ├── PinInputInput.md
            ├── PinInputRoot.md
            ├── PopoverAnchor.md
            ├── PopoverArrow.md
            ├── PopoverClose.md
            ├── PopoverContent.md
            ├── PopoverPortal.md
            ├── PopoverRoot.md
            ├── PopoverTrigger.md
            ├── ProgressIndicator.md
            ├── ProgressRoot.md
            ├── RadioGroupIndicator.md
            ├── RadioGroupItem.md
            ├── RadioGroupRoot.md
            ├── RangeCalendarCell.md
            ├── RangeCalendarCellTrigger.md
            ├── RangeCalendarGrid.md
            ├── RangeCalendarGridBody.md
            ├── RangeCalendarGridHead.md
            ├── RangeCalendarGridRow.md
            ├── RangeCalendarHeadCell.md
            ├── RangeCalendarHeader.md
            ├── RangeCalendarHeading.md
            ├── RangeCalendarNext.md
            ├── RangeCalendarPrev.md
            ├── RangeCalendarRoot.md
            ├── RovingFocusGroup.md
            ├── RovingFocusItem.md
            ├── ScrollAreaCorner.md
            ├── ScrollAreaRoot.md
            ├── ScrollAreaScrollbar.md
            ├── ScrollAreaThumb.md
            ├── ScrollAreaViewport.md
            ├── SelectArrow.md
            ├── SelectContent.md
            ├── SelectGroup.md
            ├── SelectIcon.md
            ├── SelectItem.md
            ├── SelectItemIndicator.md
            ├── SelectItemText.md
            ├── SelectLabel.md
            ├── SelectPortal.md
            ├── SelectRoot.md
            ├── SelectScrollDownButton.md
            ├── SelectScrollUpButton.md
            ├── SelectSeparator.md
            ├── SelectTrigger.md
            ├── SelectValue.md
            ├── SelectViewport.md
            ├── Separator.md
            ├── SliderRange.md
            ├── SliderRoot.md
            ├── SliderThumb.md
            ├── SliderTrack.md
            ├── SplitterGroup.md
            ├── SplitterPanel.md
            ├── SplitterResizeHandle.md
            ├── StepperDescription.md
            ├── StepperIndicator.md
            ├── StepperItem.md
            ├── StepperRoot.md
            ├── StepperSeparator.md
            ├── StepperTitle.md
            ├── StepperTrigger.md
            ├── SwitchRoot.md
            ├── SwitchThumb.md
            ├── TabsContent.md
            ├── TabsIndicator.md
            ├── TabsList.md
            ├── TabsRoot.md
            ├── TabsTrigger.md
            ├── TagsInputClear.md
            ├── TagsInputInput.md
            ├── TagsInputItem.md
            ├── TagsInputItemDelete.md
            ├── TagsInputItemText.md
            ├── TagsInputRoot.md
            ├── TimeFieldInput.md
            ├── TimeFieldRoot.md
            ├── ToastAction.md
            ├── ToastClose.md
            ├── ToastDescription.md
            ├── ToastPortal.md
            ├── ToastProvider.md
            ├── ToastRoot.md
            ├── ToastTitle.md
            ├── ToastViewport.md
            ├── Toggle.md
            ├── ToggleGroupItem.md
            ├── ToggleGroupRoot.md
            ├── ToolbarButton.md
            ├── ToolbarLink.md
            ├── ToolbarRoot.md
            ├── ToolbarSeparator.md
            ├── ToolbarToggleGroup.md
            ├── ToolbarToggleItem.md
            ├── TooltipArrow.md
            ├── TooltipContent.md
            ├── TooltipPortal.md
            ├── TooltipProvider.md
            ├── TooltipRoot.md
            ├── TooltipTrigger.md
            ├── TreeItem.md
            ├── TreeRoot.md
            ├── TreeVirtualizer.md
            ├── Viewport.md
            └── VisuallyHidden.md
        └── showcase.md


/docs/content/docs/components/accordion.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Accordion
  3 | description: A vertically stacked set of interactive headings that each reveal an associated section of content.
  4 | name: accordion
  5 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/accordion
  6 | ---
  7 | 
  8 | # Accordion
  9 | 
 10 | <Description>
 11 | A vertically stacked set of interactive headings that each reveal an
 12 | associated section of content.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Accordion" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation.',
 22 |     'Supports horizontal/vertical orientation.',
 23 |     'Supports Right to Left direction.',
 24 |     'Can expand one or multiple items.',
 25 |     'Can be controlled or uncontrolled.'
 26 |   ]"
 27 | />
 28 | 
 29 | ## Installation
 30 | 
 31 | Install the component from your command line.
 32 | 
 33 | <InstallationTabs value="reka-ui" />
 34 | 
 35 | ## Anatomy
 36 | 
 37 | Import all parts and piece them together.
 38 | 
 39 | ```vue
 40 | <script setup>
 41 | import { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'reka-ui'
 42 | </script>
 43 | 
 44 | <template>
 45 |   <AccordionRoot>
 46 |     <AccordionItem>
 47 |       <AccordionHeader>
 48 |         <AccordionTrigger />
 49 |       </AccordionHeader>
 50 |       <AccordionContent />
 51 |     </AccordionItem>
 52 |   </AccordionRoot>
 53 | </template>
 54 | ```
 55 | 
 56 | ## API Reference
 57 | 
 58 | ### Root
 59 | 
 60 | Contains all the parts of an Accordion
 61 | 
 62 | <!-- @include: @/meta/AccordionRoot.md -->
 63 | 
 64 | <DataAttributesTable
 65 |   :data="[
 66 |     {
 67 |       attribute: '[data-orientation]',
 68 |       values: ['vertical', 'horizontal'],
 69 |   }]"
 70 | />
 71 | 
 72 | ### Item
 73 | 
 74 | Contains all the parts of a collapsible section.
 75 | 
 76 | <!-- @include: @/meta/AccordionItem.md -->
 77 | 
 78 | <DataAttributesTable :data="[
 79 |     {
 80 |       attribute: '[data-state]',
 81 |       values: ['open', 'closed'],
 82 |     },
 83 |     {
 84 |       attribute: '[data-disabled]',
 85 |       values: 'Present when disabled',
 86 |     },
 87 |     {
 88 |       attribute: '[data-orientation]',
 89 |       values: ['vertical', 'horizontal'],
 90 |     }]" />
 91 | 
 92 | ### Header
 93 | 
 94 | Wraps an `AccordionTrigger`. Use the `asChild` prop to update it to the appropriate heading level for your page.
 95 | 
 96 | <!-- @include: @/meta/AccordionHeader.md -->
 97 | 
 98 | <DataAttributesTable :data="[
 99 |     {
100 |       attribute: '[data-state]',
101 |       values: ['open', 'closed'],
102 |     },
103 |     {
104 |       attribute: '[data-disabled]',
105 |       values: 'Present when disabled',
106 |     },
107 |     {
108 |       attribute: '[data-orientation]',
109 |       values: ['vertical', 'horizontal'],
110 |     }]" />
111 | 
112 | ### Trigger
113 | 
114 | Toggles the collapsed state of its associated item. It should be nested inside of an `AccordionHeader`.
115 | 
116 | <!-- @include: @/meta/AccordionTrigger.md -->
117 | 
118 | <DataAttributesTable :data="[
119 |     {
120 |       attribute: '[data-state]',
121 |       values: ['open', 'closed'],
122 |     },
123 |     {
124 |       attribute: '[data-disabled]',
125 |       values: 'Present when disabled',
126 |     },
127 |     {
128 |       attribute: '[data-orientation]',
129 |       values: ['vertical', 'horizontal'],
130 |     }]" />
131 | 
132 | ### Content
133 | 
134 | Contains the collapsible content for an item.
135 | 
136 | <!-- @include: @/meta/AccordionContent.md -->
137 | 
138 | <DataAttributesTable :data="[
139 |     {
140 |       attribute: '[data-state]',
141 |       values: ['open', 'closed'],
142 |     },
143 |     {
144 |       attribute: '[data-disabled]',
145 |       values: 'Present when disabled',
146 |     },
147 |     {
148 |       attribute: '[data-orientation]',
149 |       values: ['vertical', 'horizontal'],
150 |     }]" />
151 | 
152 | <CssVariablesTable :data="[
153 |     {
154 |       cssVariable: '--reka-accordion-content-width',
155 |       description: 'The width of the content when it opens/closes',
156 |     },
157 |     {
158 |       cssVariable: '--reka-accordion-content-height',
159 |       description: 'The height of the content when it opens/closes',
160 |     }]"
161 | />
162 | 
163 | ## Examples
164 | 
165 | ### Expanded by default
166 | 
167 | Use the `defaultValue` prop to define the open item by default.
168 | 
169 | ```vue line=4
170 | <template>
171 |   <AccordionRoot
172 |     type="single"
173 |     default-value="item-2"
174 |   >
175 |     <AccordionItem value="item-1">
176 |       …
177 |     </AccordionItem>
178 |     <AccordionItem value="item-2">
179 |       …
180 |     </AccordionItem>
181 |   </AccordionRoot>
182 | </template>
183 | ```
184 | 
185 | ### Allow collapsing all items
186 | 
187 | Use the `collapsible` prop to allow all items to close.
188 | 
189 | ```vue line=4
190 | <template>
191 |   <AccordionRoot
192 |     type="single"
193 |     collapsible
194 |   >
195 |     <AccordionItem value="item-1">
196 |       …
197 |     </AccordionItem>
198 |     <AccordionItem value="item-2">
199 |       …
200 |     </AccordionItem>
201 |   </AccordionRoot>
202 | </template>
203 | ```
204 | 
205 | ### Multiple items open at the same time
206 | 
207 | Set the `type` prop to `multiple` to enable opening multiple items at once.
208 | 
209 | ```vue line=2
210 | <template>
211 |   <AccordionRoot type="multiple">
212 |     <AccordionItem value="item-1">
213 |       …
214 |     </AccordionItem>
215 |     <AccordionItem value="item-2">
216 |       …
217 |     </AccordionItem>
218 |   </AccordionRoot>
219 | </template>
220 | ```
221 | 
222 | ### Rotated icon when open
223 | 
224 | You can add extra decorative elements, such as chevrons, and rotate it when the item is open.
225 | 
226 | ```vue line=16
227 | // index.vue
228 | <script setup>
229 | import { Icon } from '@iconify/vue'
230 | import { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'reka-ui'
231 | import './styles.css'
232 | </script>
233 | 
234 | <template>
235 |   <AccordionRoot type="single">
236 |     <AccordionItem value="item-1">
237 |       <AccordionHeader>
238 |         <AccordionTrigger class="AccordionTrigger">
239 |           <span>Trigger text</span>
240 |           <Icon
241 |             icon="radix-icons:chevron-down"
242 |             class="AccordionChevron"
243 |           />
244 |         </AccordionTrigger>
245 |       </AccordionHeader>
246 |       <AccordionContent>…</AccordionContent>
247 |     </AccordionItem>
248 |   </AccordionRoot>
249 | </template>
250 | ```
251 | 
252 | ```css line=5-7
253 | /* styles.css */
254 | .AccordionChevron {
255 |   transition: transform 300ms;
256 | }
257 | .AccordionTrigger[data-state="open"] > .AccordionChevron {
258 |   transform: rotate(180deg);
259 | }
260 | ```
261 | 
262 | ### Horizontal orientation
263 | 
264 | Use the `orientation` prop to create a horizontal Accordion
265 | 
266 | ```vue line=2
267 | <template>
268 |   <AccordionRoot orientation="horizontal">
269 |     <AccordionItem value="item-1">
270 |       …
271 |     </AccordionItem>
272 |     <AccordionItem value="item-2">
273 |       …
274 |     </AccordionItem>
275 |   </AccordionRoot>
276 | </template>
277 | ```
278 | 
279 | ### Animating content size
280 | 
281 | Use the `--reka-accordion-content-width` and/or `--reka-accordion-content-height` CSS variables to animate the size of the content when it opens/closes:
282 | 
283 | ```vue line=11
284 | // index.vue
285 | <script setup>
286 | import { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'reka-ui'
287 | import './styles.css'
288 | </script>
289 | 
290 | <template>
291 |   <AccordionRoot type="single">
292 |     <AccordionItem value="item-1">
293 |       <AccordionHeader>…</AccordionHeader>
294 |       <AccordionContent class="AccordionContent">
295 |         …
296 |       </AccordionContent>
297 |     </AccordionItem>
298 |   </AccordionRoot>
299 | </template>
300 | ```
301 | 
302 | ```css line=17,23
303 | /* styles.css */
304 | .AccordionContent {
305 |   overflow: hidden;
306 | }
307 | .AccordionContent[data-state="open"] {
308 |   animation: slideDown 300ms ease-out;
309 | }
310 | .AccordionContent[data-state="closed"] {
311 |   animation: slideUp 300ms ease-out;
312 | }
313 | 
314 | @keyframes slideDown {
315 |   from {
316 |     height: 0;
317 |   }
318 |   to {
319 |     height: var(--reka-accordion-content-height);
320 |   }
321 | }
322 | 
323 | @keyframes slideUp {
324 |   from {
325 |     height: var(--reka-accordion-content-height);
326 |   }
327 |   to {
328 |     height: 0;
329 |   }
330 | }
331 | ```
332 | 
333 | ### Render content even when closed
334 | 
335 | By default hidden content will be removed, use `:unmountOnHide="false"` to keep the content always available.
336 | 
337 | This will also allow browser to search the hidden text, and open the accordion.
338 | 
339 | ```vue line=2
340 | <template>
341 |   <AccordionRoot :unmount-on-hide="false">
342 |     <AccordionItem value="item-1">
343 |       …
344 |     </AccordionItem>
345 |     <AccordionItem value="item-2">
346 |       …
347 |     </AccordionItem>
348 |   </AccordionRoot>
349 | </template>
350 | ```
351 | 
352 | ## Accessibility
353 | 
354 | Adheres to the [Accordion WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/accordion).
355 | 
356 | ### Keyboard Interactions
357 | 
358 | <KeyboardTable :data="[
359 |     {
360 |       keys: ['Space'],
361 |       description: 'When focus is on an <code>AccordionTrigger</code> of a collapsed section, expands the section.',
362 |     },
363 |     {
364 |       keys: ['Enter'],
365 |       description: 'When focus is on an <code>AccordionTrigger</code> of a collapsed section, expands the section.',
366 |     },
367 |     {
368 |       keys: ['Tab'],
369 |       description: 'Moves focus to the next focusable element.',
370 |     },
371 |     {
372 |       keys: ['Shift + Tab'],
373 |       description: 'Moves focus to the previous focusable element.',
374 |     },
375 |     {
376 |       keys: ['ArrowDown'],
377 |       description: 'Moves focus to the next <code>AccordionTrigger</code> when <code>orientation</code> is <code>vertical</code>.',
378 |     },
379 |     {
380 |       keys: ['ArrowUp'],
381 |       description: 'Moves focus to the previous <code>AccordionTrigger</code> when <code>orientation</code> is <code>vertical</code>.',
382 |     },
383 |     {
384 |       keys: ['ArrowRight'],
385 |       description: 'Moves focus to the next <code>AccordionTrigger</code> when <code>orientation</code> is <code>horizontal</code>.',
386 |     },
387 |     {
388 |       keys: ['ArrowLeft'],
389 |       description: 'Moves focus to the previous <code>AccordionTrigger</code> when <code>orientation</code> is <code>horizontal</code>.',
390 |     },
391 |     {
392 |       keys: ['Home'],
393 |       description: 'When focus is on an <code>AccordionTrigger</code>, moves focus to the start <code>AccordionTrigger</code>.',
394 |     },
395 |     {
396 |       keys: ['End'],
397 |       description: 'When focus is on an <code>AccordionTrigger</code>, moves focus to the last <code>AccordionTrigger</code>.',
398 |     }]" />
399 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/alert-dialog.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Alert Dialog
  3 | description: A modal dialog that interrupts the user with important content and expects a response.
  4 | name: alert-dialog
  5 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog
  6 | ---
  7 | 
  8 | # Alert Dialog
  9 | 
 10 | <Description>
 11 | A modal dialog that interrupts the user with important content and expects a
 12 | response.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="AlertDialog" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Focus is automatically trapped.',
 22 |     'Can be controlled or uncontrolled.',
 23 |     'Manages screen reader announcements with <code>Title</code> and <code>Description</code> components.',
 24 |     'Esc closes the component automatically.'
 25 |   ]"
 26 | />
 27 | 
 28 | ## Installation
 29 | 
 30 | Install the component from your command line.
 31 | 
 32 | <InstallationTabs value="reka-ui" />
 33 | 
 34 | ## Anatomy
 35 | 
 36 | Import all parts and piece them together.
 37 | 
 38 | ```vue
 39 | <script setup lang="ts">
 40 | import {
 41 |   AlertDialogAction,
 42 |   AlertDialogCancel,
 43 |   AlertDialogContent,
 44 |   AlertDialogDescription,
 45 |   AlertDialogOverlay,
 46 |   AlertDialogPortal,
 47 |   AlertDialogRoot,
 48 |   AlertDialogTitle,
 49 |   AlertDialogTrigger,
 50 | } from 'reka-ui'
 51 | </script>
 52 | 
 53 | <template>
 54 |   <AlertDialogRoot>
 55 |     <AlertDialogTrigger />
 56 |     <AlertDialogPortal>
 57 |       <AlertDialogOverlay />
 58 |       <AlertDialogContent>
 59 |         <AlertDialogTitle />
 60 |         <AlertDialogDescription />
 61 |         <AlertDialogCancel />
 62 |         <AlertDialogAction />
 63 |       </AlertDialogContent>
 64 |     </AlertDialogPortal>
 65 |   </AlertDialogRoot>
 66 | </template>
 67 | ```
 68 | 
 69 | ## API Reference
 70 | 
 71 | ### Root
 72 | 
 73 | Contains all the parts of an alert dialog.
 74 | 
 75 | <!-- @include: @/meta/AlertDialogRoot.md -->
 76 | 
 77 | ### Trigger
 78 | 
 79 | A button that opens the dialog.
 80 | 
 81 | <!-- @include: @/meta/AlertDialogTrigger.md -->
 82 | 
 83 | <DataAttributesTable
 84 |   :data="[
 85 |     {
 86 |       attribute: '[data-state]',
 87 |       values: ['open', 'closed'],
 88 |     }
 89 |   ]"
 90 | />
 91 | 
 92 | ### Portal
 93 | 
 94 | When used, portals your overlay and content parts into the <code>body</code>.
 95 | 
 96 | <!-- @include: @/meta/AlertDialogPortal.md -->
 97 | 
 98 | ### Overlay
 99 | 
100 | A layer that covers the inert portion of the view when the dialog is open.
101 | 
102 | <!-- @include: @/meta/AlertDialogOverlay.md -->
103 | 
104 | <DataAttributesTable
105 |   :data="[
106 |     {
107 |       attribute: '[data-state]',
108 |       values: ['open', 'closed'],
109 |       }
110 |     ]"
111 | />
112 | 
113 | ### Content
114 | 
115 | Contains content to be rendered when the dialog is open.
116 | 
117 | <!-- @include: @/meta/AlertDialogContent.md -->
118 | 
119 | <DataAttributesTable
120 |   :data="[
121 |     {
122 |       attribute: '[data-state]',
123 |       values: ['open', 'closed'],
124 |     }
125 |   ]"
126 | />
127 | 
128 | ### Cancel
129 | 
130 | A button that closes the dialog. This button should be distinguished visually from `AlertDialogAction` buttons.
131 | 
132 | <!-- @include: @/meta/AlertDialogCancel.md -->
133 | 
134 | ### Action
135 | 
136 | A button that closes the dialog. These buttons should be distinguished visually from the `AlertDialogCancel` button.
137 | 
138 | <!-- @include: @/meta/AlertDialogAction.md -->
139 | 
140 | ### Title
141 | 
142 | An accessible name to be announced when the dialog is opened. Alternatively, you can provide `aria-label` or `aria-labelledby` to `AlertDialogContent` and exclude this component.
143 | 
144 | <!-- @include: @/meta/AlertDialogTitle.md -->
145 | 
146 | ### Description
147 | 
148 | An accessible description to be announced when the dialog is opened. Alternatively, you can provide `aria-describedby` to `AlertDialogContent` and exclude this component.
149 | 
150 | <!-- @include: @/meta/AlertDialogDescription.md -->
151 | 
152 | ## Examples
153 | 
154 | ### Close after asynchronous form submission
155 | 
156 | Use the controlled props to programmatically close the Alert Dialog after an async operation has completed.
157 | 
158 | ```vue line=14,15,19,25-29
159 | <script setup>
160 | import {
161 |   AlertDialogAction,
162 |   AlertDialogCancel,
163 |   AlertDialogContent,
164 |   AlertDialogDescription,
165 |   AlertDialogOverlay,
166 |   AlertDialogPortal,
167 |   AlertDialogRoot,
168 |   AlertDialogTitle,
169 |   AlertDialogTrigger,
170 | } from 'reka-ui'
171 | 
172 | const wait = () => new Promise(resolve => setTimeout(resolve, 1000))
173 | const open = ref(false)
174 | </script>
175 | 
176 | <template>
177 |   <AlertDialogRoot v-model:open="open">
178 |     <AlertDialogTrigger>Open</AlertDialogTrigger>
179 |     <AlertDialogPortal>
180 |       <AlertDialogOverlay />
181 |       <AlertDialogContent>
182 |         <form
183 |           @submit.prevent="
184 |             (event) => {
185 |               wait().then(() => open = false);
186 |             }
187 |           "
188 |         >
189 |           <!-- some inputs -->
190 |           <button type="submit">
191 |             Submit
192 |           </button>
193 |         </form>
194 |       </AlertDialogContent>
195 |     </AlertDialogPortal>
196 |   </AlertDialogRoot>
197 | </template>
198 | ```
199 | 
200 | <br />
201 | 
202 | ### Custom portal container
203 | 
204 | Customise the element that your alert dialog portals into.
205 | 
206 | ```vue line=4,17
207 | <script setup>
208 | import { ref } from 'vue'
209 | 
210 | const container = ref(null)
211 | </script>
212 | 
213 | <template>
214 |   <div>
215 |     <AlertDialogRoot>
216 |       <AlertDialogTrigger />
217 |       <AlertDialogPortal :to="container">
218 |         <AlertDialogOverlay />
219 |         <AlertDialogContent>...</AlertDialogContent>
220 |       </AlertDialogPortal>
221 |     </AlertDialogRoot>
222 | 
223 |     <div ref="container" />
224 |   </div>
225 | </template>
226 | ```
227 | 
228 | ## Accessibility
229 | 
230 | Adheres to the [Alert and Message Dialogs WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog).
231 | 
232 | ### Keyboard Interactions
233 | 
234 | <KeyboardTable :data="[{
235 | keys: ['Space'],
236 | description: 'Opens/closes the dialog.',
237 | },{
238 | keys: ['Enter'],
239 | description: 'Opens/closes the dialog.',
240 | },{
241 | keys: ['Tab'],
242 | description: 'Moves focus to the next focusable element.',
243 | },{
244 | keys: ['Shift + Tab'],
245 | description: 'Moves focus to the previous focusable element.',
246 | },{
247 | keys: ['Esc'],
248 | description: 'Closes the dialog and moves focus to <Code>AlertDialogTrigger</code>.',
249 | }]" />
250 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/aspect-ratio.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Aspect Ratio
 4 | description: Displays content within a desired ratio.
 5 | name: aspect-ratio
 6 | ---
 7 | 
 8 | # Aspect Ratio
 9 | 
10 | <Description>
11 | Displays content within a desired ratio.
12 | </Description>
13 | 
14 | <ComponentPreview type="demo" name="AspectRatio" />
15 | 
16 | ## Features
17 | 
18 | <Highlights
19 |   :features="[
20 |     'Accepts any custom ratio.'
21 |   ]"
22 | />
23 | 
24 | ## Installation
25 | 
26 | Install the component from your command line.
27 | 
28 | <InstallationTabs value="reka-ui" />
29 | 
30 | ## Anatomy
31 | 
32 | Import the component.
33 | 
34 | ```vue
35 | <script setup>
36 | import { AspectRatio } from 'reka-ui'
37 | </script>
38 | 
39 | <template>
40 |   <AspectRatio />
41 | </template>
42 | ```
43 | 
44 | ## API Reference
45 | 
46 | ### Root
47 | 
48 | Contains the content you want to constrain to a given ratio.
49 | 
50 | <!-- @include: @/meta/AspectRatio.md -->
51 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/avatar.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Avatar
 4 | description: An image element with a fallback for representing the user.
 5 | name: avatar
 6 | ---
 7 | 
 8 | # Avatar
 9 | 
10 | <Description>
11 | An image element with a fallback for representing the user.
12 | </Description>
13 | 
14 | <ComponentPreview name="Avatar" />
15 | 
16 | ## Features
17 | 
18 | <Highlights
19 |   :features="[
20 |     'Automatic and manual control over when the image renders.',
21 |     'Fallback part accepts any children.',
22 |     'Optionally delay fallback rendering to avoid content flashing.',
23 |   ]"
24 | />
25 | 
26 | ## Installation
27 | 
28 | Install the component from your command line.
29 | 
30 | <InstallationTabs value="reka-ui" />
31 | 
32 | ## Anatomy
33 | 
34 | Import all parts and piece them together.
35 | 
36 | ```vue
37 | <script setup>
38 | import { AvatarImage, AvatarRoot } from 'reka-ui'
39 | </script>
40 | 
41 | <template>
42 |   <AvatarRoot>
43 |     <AvatarImage />
44 |     <AvatarFallback />
45 |   </AvatarRoot>
46 | </template>
47 | ```
48 | 
49 | ## API Reference
50 | 
51 | ### Root
52 | 
53 | Contains all the parts of an avatar
54 | 
55 | <!-- @include: @/meta/AvatarRoot.md -->
56 | 
57 | ### Image
58 | 
59 | The image to render. By default it will only render when it has loaded. You can use the `@loadingStatusChange` handler if you need more control.
60 | 
61 | <!-- @include: @/meta/AvatarImage.md -->
62 | 
63 | ### Fallback
64 | 
65 | An element that renders when the image hasn't loaded. This means whilst it's loading, or if there was an error. If you notice a flash during loading, you can provide a `delayMs` prop to delay its rendering so it only renders for those with slower connections. For more control, use the `@loadingStatusChange` emit on `AvatarImage`.
66 | 
67 | <!-- @include: @/meta/AvatarFallback.md -->
68 | 
69 | ## Examples
70 | 
71 | ### Clickable Avatar with tooltip
72 | 
73 | You can compose the Avatar with a [Tooltip](/docs/components/tooltip) to display extra information.
74 | 
75 | ```vue line=6-7,9,11-15
76 | <script setup>
77 | import { AvatarImage, AvatarRoot, TooltipArrow, TooltipRoot, TooltipTrigger } from 'reka-ui'
78 | </script>
79 | 
80 | <template>
81 |   <TooltipRoot>
82 |     <TooltipTrigger>
83 |       <AvatarRoot>…</AvatarRoot>
84 |     </TooltipTrigger>
85 | 
86 |     <TooltipContent side="top">
87 |       Tooltip content
88 |       <TooltipArrow />
89 |     </TooltipContent>
90 |   </TooltipRoot>
91 | </template>
92 | ```
93 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/calendar.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Calendar
  4 | description: Displays dates and days of the week, facilitating date-related interactions.
  5 | name: calendar
  6 | ---
  7 | 
  8 | # Calendar
  9 | 
 10 | <Badge>Alpha</Badge>
 11 | 
 12 | <Description>
 13 | Displays dates and days of the week, facilitating date-related interactions.
 14 | </Description>
 15 | 
 16 | <ComponentPreview name="Calendar" />
 17 | 
 18 | ## Features
 19 | 
 20 | <Highlights
 21 |   :features="[
 22 |     'Full keyboard navigation',
 23 |     'Can be controlled or uncontrolled',
 24 |     'Focus is fully managed',
 25 |     'Localization support',
 26 |     'Highly composable'
 27 |   ]"
 28 | />
 29 | 
 30 | ## Preface
 31 | 
 32 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
 33 | 
 34 | We highly recommend reading through the documentation for the package to get a solid feel for how it works, and you'll need to install it in your project to use the date-related components.
 35 | 
 36 | ## Installation
 37 | 
 38 | Install the date package.
 39 | 
 40 | <InstallationTabs value="@internationalized/date" />
 41 | 
 42 | Install the component from your command line.
 43 | 
 44 | <InstallationTabs value="reka-ui" />
 45 | 
 46 | ## Anatomy
 47 | 
 48 | Import all parts and piece them together.
 49 | 
 50 | ```vue
 51 | <script setup>
 52 | import {
 53 |   CalendarCell,
 54 |   CalendarCellTrigger,
 55 |   CalendarGrid,
 56 |   CalendarGridBody,
 57 |   CalendarGridHead,
 58 |   CalendarGridRow,
 59 |   CalendarHeadCell,
 60 |   CalendarHeader,
 61 |   CalendarHeading,
 62 |   CalendarNext,
 63 |   CalendarPrev,
 64 |   CalendarRoot
 65 | } from 'reka-ui'
 66 | </script>
 67 | 
 68 | <template>
 69 |   <CalendarRoot>
 70 |     <CalendarHeader>
 71 |       <CalendarPrev />
 72 |       <CalendarHeading />
 73 |       <CalendarNext />
 74 |     </CalendarHeader>
 75 |     <CalendarGrid>
 76 |       <CalendarGridHead>
 77 |         <CalendarGridRow>
 78 |           <CalendarHeadCell />
 79 |         </CalendarGridRow>
 80 |       </CalendarGridHead>
 81 |       <CalendarGridBody>
 82 |         <CalendarGridRow>
 83 |           <CalendarCell>
 84 |             <CalendarCellTrigger />
 85 |           </CalendarCell>
 86 |         </CalendarGridRow>
 87 |       </CalendarGridBody>
 88 |     </CalendarGrid>
 89 |   </CalendarRoot>
 90 | </template>
 91 | ```
 92 | 
 93 | ## API Reference
 94 | 
 95 | ### Root
 96 | 
 97 | Contains all the parts of a calendar
 98 | 
 99 | <!-- @include: @/meta/CalendarRoot.md -->
100 | 
101 | <DataAttributesTable
102 |   :data="[
103 |     {
104 |       attribute: '[data-readonly]',
105 |       values: 'Present when readonly',
106 |     },
107 |     {
108 |       attribute: '[data-disabled]',
109 |       values: 'Present when disabled',
110 |     },
111 |     {
112 |       attribute: '[data-invalid]',
113 |       values: 'Present when invalid',
114 |     }
115 |   ]"
116 | />
117 | 
118 | ### Header
119 | 
120 | Contains the navigation buttons and the heading segments.
121 | 
122 | <!-- @include: @/meta/CalendarHeader.md -->
123 | 
124 | ### Prev Button
125 | 
126 | Calendar navigation button. It navigates the calendar one month/year/decade in the past based on the current calendar view.
127 | 
128 | <!-- @include: @/meta/CalendarPrev.md -->
129 | 
130 | <DataAttributesTable
131 |   :data="[
132 |     {
133 |       attribute: '[data-disabled]',
134 |       values: 'Present when disabled',
135 |     },
136 |   ]"
137 | />
138 | 
139 | ### Next Button
140 | 
141 | Calendar navigation button. It navigates the calendar one month/year/decade in the future based on the current calendar view.
142 | 
143 | <!-- @include: @/meta/CalendarNext.md -->
144 | 
145 | <DataAttributesTable
146 |   :data="[
147 |     {
148 |       attribute: '[data-disabled]',
149 |       values: 'Present when disabled',
150 |     },
151 |   ]"
152 | />
153 | 
154 | ### Heading
155 | 
156 | Heading for displaying the current month and year
157 | 
158 | <!-- @include: @/meta/CalendarHeading.md -->
159 | 
160 | <DataAttributesTable
161 |   :data="[
162 |     {
163 |       attribute: '[data-disabled]',
164 |       values: 'Present when disabled',
165 |     }
166 |   ]"
167 | />
168 | 
169 | ### Grid
170 | 
171 | Container for wrapping the calendar grid.
172 | 
173 | <!-- @include: @/meta/CalendarGrid.md -->
174 | 
175 | <DataAttributesTable
176 |   :data="[
177 |     {
178 |       attribute: '[data-readonly]',
179 |       values: 'Present when readonly',
180 |     },
181 |     {
182 |       attribute: '[data-disabled]',
183 |       values: 'Present when disabled',
184 |     }
185 |   ]"
186 | />
187 | 
188 | ### Grid Head
189 | 
190 | Container for wrapping the grid head.
191 | 
192 | <!-- @include: @/meta/CalendarGridHead.md -->
193 | 
194 | ### Grid Body
195 | 
196 | Container for wrapping the grid body.
197 | 
198 | <!-- @include: @/meta/CalendarGridBody.md -->
199 | 
200 | ### Grid Row
201 | 
202 | Container for wrapping the grid row.
203 | 
204 | <!-- @include: @/meta/CalendarGridRow.md -->
205 | 
206 | ### Head Cell
207 | 
208 | Container for wrapping the head cell. Used for displaying the week days.
209 | 
210 | <!-- @include: @/meta/CalendarHeadCell.md -->
211 | 
212 | ### Cell
213 | 
214 | Container for wrapping the calendar cells.
215 | 
216 | <!-- @include: @/meta/CalendarCell.md -->
217 | 
218 | <DataAttributesTable
219 |   :data="[
220 |     {
221 |       attribute: '[data-disabled]',
222 |       values: 'Present when disabled',
223 |     },
224 |   ]"
225 | />
226 | 
227 | ### Cell Trigger
228 | 
229 | Interactable container for displaying the cell dates. Clicking it selects the date.
230 | 
231 | <!-- @include: @/meta/CalendarCellTrigger.md -->
232 | 
233 | <DataAttributesTable
234 |   :data="[
235 |     {
236 |       attribute: '[data-selected]',
237 |       values: 'Present when selected',
238 |     },
239 |     {
240 |       attribute: '[data-value]',
241 |       values: 'The ISO string value of the date.',
242 |     },
243 |     {
244 |       attribute: '[data-disabled]',
245 |       values: 'Present when disabled',
246 |     },
247 |     {
248 |       attribute: '[data-unavailable]',
249 |       values: 'Present when unavailable',
250 |     },
251 |     {
252 |       attribute: '[data-today]',
253 |       values: 'Present when today',
254 |     },
255 |     {
256 |       attribute: '[data-outside-view]',
257 |       values: 'Present when the date is outside the current month it is displayed in.',
258 |     },
259 |     {
260 |       attribute: '[data-outside-visible-view]',
261 |       values: 'Present when the date is outside the months that are visible on the calendar.',
262 |     },
263 |     {
264 |       attribute: '[data-focused]',
265 |       values: 'Present when focused',
266 |     }
267 |   ]"
268 | />
269 | 
270 | ## Examples
271 | 
272 | ### Calendar with Year Incrementation
273 | 
274 | This example showcases a calendar which allows incrementing the year.
275 | 
276 | <ComponentPreview name="CalendarYearIncrement" />
277 | 
278 | ### Calendar with Locale and Calendar System Selection
279 | 
280 | This example showcases some of the available locales and how the calendar systems are displayed.
281 | 
282 | <ComponentPreview name="CalendarSelect" />
283 | 
284 | ### Calendar swipe gesture navigation
285 | 
286 | This component demonstrates intuitive calendar navigation using touch-based swipe gestures, user-friendly way to browse through months.
287 | 
288 | <ComponentPreview name="CalendarSwipe" />
289 | 
290 | ## Accessibility
291 | 
292 | ### Keyboard Interactions
293 | 
294 | <KeyboardTable
295 |   :data="[
296 |     {
297 |       keys: ['Tab'],
298 |       description: 'When focus moves onto the calendar, focuses the first navigation button.'
299 |     },
300 |     {
301 |       keys: ['Space'],
302 |       description:`
303 |       <span>
304 |           When the focus is on either <Code>CalendarNext</Code> or <Code>CalendarPrev</Code>, it navigates the calendar. Otherwise, it selects the date.
305 |       </span>
306 |     ` ,
307 |     },
308 |     {
309 |       keys: ['Enter'],
310 |       description:`
311 |       <span>
312 |           When the focus is on either <Code>CalendarNext</Code> or <Code>CalendarPrev</Code>, it navigates the calendar. Otherwise, it selects the date.
313 |       </span>
314 |     ` ,
315 |     },
316 |     {
317 |       keys: ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'],
318 |       description:
319 |       `
320 |         When the focus is on <Code>CalendarCellTrigger</Code>, it navigates the dates, changing the month/year/decade if necessary.
321 |       `
322 |     }
323 |   ]"
324 | />
325 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/checkbox.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Checkbox
  4 | description: A control that allows the user to toggle between checked and not checked.
  5 | name: checkbox
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/checkbox
  7 | ---
  8 | 
  9 | # Checkbox
 10 | 
 11 | <Description>
 12 | A control that allows the user to toggle between checked and not checked.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Checkbox" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Supports indeterminate state.',
 22 |     'Full keyboard navigation.',
 23 |     'Can be controlled or uncontrolled.',
 24 |   ]"
 25 | />
 26 | 
 27 | ## Installation
 28 | 
 29 | Install the component from your command line.
 30 | 
 31 | <InstallationTabs value="reka-ui" />
 32 | 
 33 | ## Anatomy
 34 | 
 35 | Import all parts and piece them together.
 36 | 
 37 | ```vue
 38 | <script setup>
 39 | import { CheckboxGroupRoot, CheckboxIndicator, CheckboxRoot } from 'reka-ui'
 40 | </script>
 41 | 
 42 | <template>
 43 |   <CheckboxRoot>
 44 |     <CheckboxIndicator />
 45 |   </CheckboxRoot>
 46 | 
 47 |   <!-- or with array support -->
 48 |   <CheckboxGroupRoot>
 49 |     <CheckboxRoot>
 50 |       <CheckboxIndicator />
 51 |     </CheckboxRoot>
 52 |   </CheckboxGroupRoot>
 53 | </template>
 54 | ```
 55 | 
 56 | ## API Reference
 57 | 
 58 | ### Root
 59 | 
 60 | Contains all the parts of a checkbox. An `input` will also render when used within a `form` to ensure events propagate correctly.
 61 | 
 62 | <!-- @include: @/meta/CheckboxRoot.md -->
 63 | 
 64 | <DataAttributesTable
 65 |   :data="[
 66 |     {
 67 |       attribute: '[data-state]',
 68 |       values: ['checked', 'unchecked', 'indeterminate'],
 69 |     },
 70 |     {
 71 |       attribute: '[data-disabled]',
 72 |       values: 'Present when disabled',
 73 |     },
 74 |   ]"
 75 | />
 76 | 
 77 | ### Indicator
 78 | 
 79 | Renders when the checkbox is in a checked or indeterminate state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
 80 | 
 81 | <PresenceCallout />
 82 | 
 83 | <!-- @include: @/meta/CheckboxIndicator.md -->
 84 | 
 85 | <DataAttributesTable
 86 |   :data="[
 87 |     {
 88 |       attribute: '[data-state]',
 89 |       values: ['checked', 'unchecked', 'indeterminate'],
 90 |     },
 91 |     {
 92 |       attribute: '[data-disabled]',
 93 |       values: 'Present when disabled',
 94 |     },
 95 |   ]"
 96 | />
 97 | 
 98 | ### Group Root
 99 | 
100 | Wrapper around `CheckboxRoot` to support array of `modelValue`
101 | 
102 | <!-- @include: @/meta/CheckboxGroupRoot.md -->
103 | 
104 | ## Examples
105 | 
106 | ### Indeterminate
107 | 
108 | You can set the checkbox to `indeterminate` by taking control of its state.
109 | 
110 | ```vue line=5,9-14,16-18
111 | <script setup>
112 | import { Icon } from '@iconify/vue'
113 | import { CheckboxIndicator, CheckboxRoot } from 'reka-ui'
114 | 
115 | const checked = ref('indeterminate')
116 | </script>
117 | 
118 | <template>
119 |   <CheckboxRoot v-model="checked">
120 |     <CheckboxIndicator>
121 |       <Icon
122 |         v-if="checked === 'indeterminate'"
123 |         icon="radix-icons:divider-horizontal"
124 |       />
125 |       <Icon
126 |         v-if="checked"
127 |         icon="radix-icons:check"
128 |       />
129 |     </CheckboxIndicator>
130 |   </CheckboxRoot>
131 | 
132 |   <button
133 |     type="button"
134 |     @click="() => (checked === 'indeterminate' ? (checked = false) : (checked = 'indeterminate'))"
135 |   >
136 |     Toggle indeterminate
137 |   </button>
138 | </template>
139 | ```
140 | 
141 | ## Accessibility
142 | 
143 | Adheres to the [tri-state Checkbox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/checkbox).
144 | 
145 | ### Keyboard Interactions
146 | 
147 | <KeyboardTable
148 |   :data="[
149 |     {
150 |       keys: ['Space'],
151 |       description: 'Checks/unchecks the checkbox',
152 |     },
153 |   ]"
154 | />
155 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/collapsible.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Collapsible
  4 | description: An interactive component which expands/collapses a panel.
  5 | name: collapsible
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/disclosure
  7 | ---
  8 | 
  9 | # Collapsible
 10 | 
 11 | <Description>
 12 | An interactive component which expands/collapses a panel.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Collapsible" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation.',
 22 |     'Can be controlled or uncontrolled.',
 23 |   ]"
 24 | />
 25 | 
 26 | ## Installation
 27 | 
 28 | Install the component from your command line.
 29 | 
 30 | <InstallationTabs value="reka-ui" />
 31 | 
 32 | ## Anatomy
 33 | 
 34 | Import the components and piece the parts together.
 35 | 
 36 | ```vue
 37 | <script setup>
 38 | import { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'reka-ui'
 39 | </script>
 40 | 
 41 | <template>
 42 |   <CollapsibleRoot>
 43 |     <CollapsibleTrigger />
 44 |     <CollapsibleContent />
 45 |   </CollapsibleRoot>
 46 | </template>
 47 | ```
 48 | 
 49 | ## API Reference
 50 | 
 51 | ### Root
 52 | 
 53 | Contains all the parts of a collapsible
 54 | 
 55 | <!-- @include: @/meta/CollapsibleRoot.md -->
 56 | 
 57 | <DataAttributesTable
 58 |   :data="[
 59 |     {
 60 |       attribute: '[data-state]',
 61 |       values: ['open', 'closed'],
 62 |     },
 63 |     {
 64 |       attribute: '[data-disabled]',
 65 |       values: 'Present when disabled',
 66 |     },
 67 |   ]"
 68 | />
 69 | 
 70 | ### Trigger
 71 | 
 72 | The button that toggles the collapsible
 73 | 
 74 | <!-- @include: @/meta/CollapsibleTrigger.md -->
 75 | 
 76 | <DataAttributesTable
 77 |   :data="[
 78 |     {
 79 |       attribute: '[data-state]',
 80 |       values: ['open', 'closed'],
 81 |     },
 82 |     {
 83 |       attribute: '[data-disabled]',
 84 |       values: 'Present when disabled',
 85 |     },
 86 |   ]"
 87 | />
 88 | 
 89 | ### Content
 90 | 
 91 | The component that contains the collapsible content.
 92 | 
 93 | <PresenceCallout />
 94 | 
 95 | <!-- @include: @/meta/CollapsibleContent.md -->
 96 | 
 97 | <DataAttributesTable
 98 |   :data="[
 99 |     {
100 |       attribute: '[data-state]',
101 |       values: ['open', 'closed'],
102 |     },
103 |     {
104 |       attribute: '[data-disabled]',
105 |       values: 'Present when disabled',
106 |     },
107 |   ]"
108 | />
109 | 
110 | <CssVariablesTable
111 |   :data="[
112 |     {
113 |       cssVariable: '--reka-collapsible-content-width',
114 |       description: 'The width of the content when it opens/closes',
115 |     },
116 |     {
117 |       cssVariable: '--reka-collapsible-content-height',
118 |       description: 'The height of the content when it opens/closes',
119 |     },
120 |   ]"
121 | />
122 | 
123 | ## Examples
124 | 
125 | ### Animating content size
126 | 
127 | Use the `--reka-collapsible-content-width` and/or `--reka-collapsible-content-height` CSS variables to animate the size of the content when it opens/closes. Here's a demo:
128 | 
129 | ```vue line=10
130 | // index.vue
131 | <script setup>
132 | import { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'reka-ui'
133 | import './styles.css'
134 | </script>
135 | 
136 | <template>
137 |   <CollapsibleRoot>
138 |     <CollapsibleTrigger>…</CollapsibleTrigger>
139 |     <CollapsibleContent class="CollapsibleContent">
140 |       …
141 |     </CollapsibleContent>
142 |   </CollapsibleRoot>
143 | </template>
144 | ```
145 | 
146 | ```css line=17,23
147 | /* styles.css */
148 | .CollapsibleContent {
149 |   overflow: hidden;
150 | }
151 | .CollapsibleContent[data-state="open"] {
152 |   animation: slideDown 300ms ease-out;
153 | }
154 | .CollapsibleContent[data-state="closed"] {
155 |   animation: slideUp 300ms ease-out;
156 | }
157 | 
158 | @keyframes slideDown {
159 |   from {
160 |     height: 0;
161 |   }
162 |   to {
163 |     height: var(--reka-collapsible-content-height);
164 |   }
165 | }
166 | 
167 | @keyframes slideUp {
168 |   from {
169 |     height: var(--reka-collapsible-content-height);
170 |   }
171 |   to {
172 |     height: 0;
173 |   }
174 | }
175 | ```
176 | 
177 | ### Render content even when collapsed
178 | 
179 | By default hidden content will be removed, use `:unmountOnHide="false"` to keep the content always available.
180 | 
181 | This will also allow browser to search the hidden text, and open the collapsible.
182 | 
183 | ```vue line=6
184 | <script setup>
185 | import { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'reka-ui'
186 | </script>
187 | 
188 | <template>
189 |   <CollapsibleRoot :unmount-on-hide="false">
190 |     …
191 |   </CollapsibleRoot>
192 | </template>
193 | ```
194 | 
195 | ## Accessibility
196 | 
197 | Adheres to the [Disclosure WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure).
198 | 
199 | ### Keyboard Interactions
200 | 
201 | <KeyboardTable
202 |   :data="[
203 |     {
204 |       keys: ['Space'],
205 |       description: 'Opens/closes the collapsible',
206 |     },
207 |     {
208 |       keys: ['Enter'],
209 |       description: 'Opens/closes the collapsible',
210 |     },
211 |   ]"
212 | />
213 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/combobox.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Combobox
  4 | description: Choose from a list of suggested values with full keyboard support.
  5 | name: combobox
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/listbox
  7 | ---
  8 | 
  9 | # Combobox
 10 | 
 11 | <Description>
 12 | Choose from a list of suggested values with full keyboard support.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Combobox" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Can be controlled or uncontrolled.',
 22 |     'Offers 2 positioning modes.',
 23 |     'Supports items, labels, groups of items.',
 24 |     'Focus is fully managed.',
 25 |     'Full keyboard navigation.',
 26 |     'Supports custom placeholder.',
 27 |     'Supports Right to Left direction.',
 28 |   ]"
 29 | />
 30 | 
 31 | ## Installation
 32 | 
 33 | Install the component from your command line.
 34 | 
 35 | <InstallationTabs value="reka-ui" />
 36 | 
 37 | ## Anatomy
 38 | 
 39 | Import all parts and piece them together.
 40 | 
 41 | ```vue
 42 | <script setup lang="ts">
 43 | import {
 44 |   ComboboxAnchor,
 45 |   ComboboxArrow,
 46 |   ComboboxCancel,
 47 |   ComboboxContent,
 48 |   ComboboxGroup,
 49 |   ComboboxInput,
 50 |   ComboboxItem,
 51 |   ComboboxItemIndicator,
 52 |   ComboboxLabel,
 53 |   ComboboxPortal,
 54 |   ComboboxRoot,
 55 |   ComboboxSeparator,
 56 |   ComboboxTrigger,
 57 |   ComboboxViewport,
 58 | } from 'reka-ui'
 59 | </script>
 60 | 
 61 | <template>
 62 |   <ComboboxRoot>
 63 |     <ComboboxAnchor>
 64 |       <ComboboxInput />
 65 |       <ComboboxTrigger />
 66 |       <ComboboxCancel />
 67 |     </ComboboxAnchor>
 68 | 
 69 |     <ComboboxPortal>
 70 |       <ComboboxContent>
 71 |         <ComboboxViewport>
 72 |           <ComboboxItem>
 73 |             <ComboboxItemIndicator />
 74 |           </ComboboxItem>
 75 | 
 76 |           <ComboboxGroup>
 77 |             <ComboboxLabel />
 78 |             <ComboboxItem>
 79 |               <ComboboxItemIndicator />
 80 |             </ComboboxItem>
 81 |           </ComboboxGroup>
 82 |           <ComboboxSeparator />
 83 |         </ComboboxViewport>
 84 | 
 85 |         <ComboboxArrow />
 86 |       </ComboboxContent>
 87 |     </ComboboxPortal>
 88 |   </ComboboxRoot>
 89 | </template>
 90 | ```
 91 | 
 92 | ## API Reference
 93 | 
 94 | ### Root
 95 | 
 96 | Contains all the parts of a Combobox
 97 | 
 98 | <!-- @include: @/meta/ComboboxRoot.md -->
 99 | 
100 | ### Anchor
101 | 
102 | Used as an anchor if you set `ComboboxContent`'s position to `popper`.
103 | 
104 | <!-- @include: @/meta/ComboboxAnchor.md -->
105 | 
106 | ### Input
107 | 
108 | The input component to search through the combobox items.
109 | 
110 | <!-- @include: @/meta/ComboboxInput.md -->
111 | 
112 | ### Trigger
113 | 
114 | The button that toggles the Combobox Content.
115 | 
116 | <!-- @include: @/meta/ComboboxTrigger.md -->
117 | 
118 | <DataAttributesTable
119 |   :data="[
120 |     {
121 |       attribute: '[data-state]',
122 |       values: ['open', 'closed'],
123 |     },
124 |     {
125 |       attribute: '[data-disabled]',
126 |       values: 'Present when disabled',
127 |     },
128 |   ]"
129 | />
130 | 
131 | ### Cancel
132 | 
133 | The button that clears the search term.
134 | 
135 | <!-- @include: @/meta/ComboboxCancel.md -->
136 | 
137 | ### Empty
138 | 
139 | Shown when none of the items match the query.
140 | 
141 | <!-- @include: @/meta/ComboboxEmpty.md -->
142 | 
143 | ### Portal
144 | 
145 | When used, portals the content part into the `body`.
146 | 
147 | You need to set `position="popper"` for `ComboboxContent` to make sure the position was automatically computed similar to `Popover` or `DropdownMenu`.
148 | 
149 | <!-- @include: @/meta/ComboboxPortal.md -->
150 | 
151 | ### Content
152 | 
153 | The component that pops out when the combobox is open.
154 | 
155 | <PresenceCallout />
156 | 
157 | <!-- @include: @/meta/ComboboxContent.md -->
158 | 
159 | <DataAttributesTable
160 |   :data="[
161 |     {
162 |       attribute: '[data-state]',
163 |       values: ['open', 'closed'],
164 |     },
165 |     {
166 |       attribute: '[data-side]',
167 |       values: ['left', 'right', 'bottom', 'top'],
168 |     },
169 |     {
170 |       attribute: '[data-align]',
171 |       values: ['start', 'end', 'center'],
172 |     },
173 |   ]"
174 | />
175 | 
176 | <CssVariablesTable
177 |   :data="[
178 |     {
179 |       cssVariable: '--reka-combobox-content-transform-origin',
180 |       description: 'The <Code>transform-origin</Code> computed from the content and arrow positions/offsets. Only present when <Code>position=&quot;popper&quot;</Code>.',
181 |     },
182 |     {
183 |       cssVariable: '--reka-combobox-content-available-width',
184 |       description: 'The remaining width between the trigger and the boundary edge. Only present when <Code>position=&quot;popper&quot;</Code>.',
185 |     },
186 |     {
187 |       cssVariable: '--reka-combobox-content-available-height',
188 |       description: 'The remaining height between the trigger and the boundary edge. Only present when <Code>position=&quot;popper&quot;</Code>.',
189 |     },
190 |     {
191 |       cssVariable: '--reka-combobox-trigger-width',
192 |       description: 'The width of the trigger. Only present when <Code>position=&quot;popper&quot;</Code>.',
193 |     },
194 |     {
195 |       cssVariable: '--reka-combobox-trigger-height',
196 |       description: 'The height of the trigger. Only present when <Code>position=&quot;popper&quot;</Code>.',
197 |     },
198 |   ]"
199 | />
200 | 
201 | ### Viewport
202 | 
203 | The scrolling viewport that contains all of the items.
204 | 
205 | <!-- @include: @/meta/ComboboxViewport.md -->
206 | 
207 | ### Item
208 | 
209 | The component that contains the combobox items.
210 | 
211 | <!-- @include: @/meta/ComboboxItem.md -->
212 | 
213 | <DataAttributesTable
214 |   :data="[
215 |     {
216 |       attribute: '[data-state]',
217 |       values: ['checked', 'unchecked'],
218 |     },
219 |     {
220 |       attribute: '[data-highlighted]',
221 |       values: 'Present when highlighted',
222 |     },
223 |     {
224 |       attribute: '[data-disabled]',
225 |       values: 'Present when disabled',
226 |     },
227 |   ]"
228 | />
229 | 
230 | ### ItemIndicator
231 | 
232 | Renders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
233 | 
234 | <!-- @include: @/meta/ComboboxItemIndicator.md -->
235 | 
236 | ### Group
237 | 
238 | Used to group multiple items. use in conjunction with `ComboboxLabel` to ensure good accessibility via automatic labelling.
239 | 
240 | <!-- @include: @/meta/ComboboxGroup.md -->
241 | 
242 | ### Label
243 | 
244 | Used to render the label of a group. It won't be focusable using arrow keys.
245 | 
246 | <!-- @include: @/meta/ComboboxLabel.md -->
247 | 
248 | ### Separator
249 | 
250 | Used to visually separate items in the Combobox
251 | 
252 | <!-- @include: @/meta/ComboboxSeparator.md -->
253 | 
254 | ### Arrow
255 | 
256 | An optional arrow element to render alongside the content. This can be used to help visually link the trigger with the `ComboboxContent`. Must be rendered inside `ComboboxContent`. Only available when `position` is set to `popper`.
257 | 
258 | <!-- @include: @/meta/ComboboxArrow.md -->
259 | 
260 | ### Virtualizer
261 | 
262 | Virtual container to achieve list virtualization.
263 | 
264 | <Callout type="warning">
265 | 
266 | Combobox items **must** be filtered manually before passing them over to the virtualizer. See [example below](#virtualized-combobox-with-working-filtering).
267 | 
268 | </Callout>
269 | 
270 | See the [virtualization guide](../guides/virtualization.md) for more general info on virtualization.
271 | 
272 | <!-- @include: @/meta/ComboboxVirtualizer.md -->
273 | 
274 | ## Examples
275 | 
276 | ### Binding objects as values
277 | 
278 | Unlike native HTML form controls which only allow you to provide strings as values, `reka-ui` supports binding complex objects as well.
279 | 
280 | Make sure to set the `displayValue` prop to set the input value on item selection.
281 | 
282 | ```vue line=12,17,23
283 | <script setup lang="ts">
284 | import { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'reka-ui'
285 | import { ref } from 'vue'
286 | 
287 | const people = [
288 |   { id: 1, name: 'Durward Reynolds' },
289 |   { id: 2, name: 'Kenton Towne' },
290 |   { id: 3, name: 'Therese Wunsch' },
291 |   { id: 4, name: 'Benedict Kessler' },
292 |   { id: 5, name: 'Katelyn Rohan' },
293 | ]
294 | const selectedPeople = ref(people[0])
295 | </script>
296 | 
297 | <template>
298 |   <ComboboxRoot v-model="selectedPeople">
299 |     <ComboboxInput :display-value="(v) => v.name" />
300 |     <ComboboxPortal>
301 |       <ComboboxContent>
302 |         <ComboboxItem
303 |           v-for="person in people"
304 |           :key="person.id"
305 |           :value="person"
306 |           :disabled="person.unavailable"
307 |         >
308 |           {{ person.name }}
309 |         </ComboboxItem>
310 |       </ComboboxContent>
311 |     </ComboboxPortal>
312 |   </ComboboxRoot>
313 | </template>
314 | ```
315 | 
316 | ### Selecting multiple values
317 | 
318 | The `Combobox` component allows you to select multiple values. You can enable this by providing an array of values instead of a single value.
319 | 
320 | ```vue line=12,17-18
321 | <script setup lang="ts">
322 | import { ComboboxRoot } from 'reka-ui'
323 | import { ref } from 'vue'
324 | 
325 | const people = [
326 |   { id: 1, name: 'Durward Reynolds' },
327 |   { id: 2, name: 'Kenton Towne' },
328 |   { id: 3, name: 'Therese Wunsch' },
329 |   { id: 4, name: 'Benedict Kessler' },
330 |   { id: 5, name: 'Katelyn Rohan' },
331 | ]
332 | const selectedPeople = ref([people[0], people[1]])
333 | </script>
334 | 
335 | <template>
336 |   <ComboboxRoot
337 |     v-model="selectedPeople"
338 |     multiple
339 |   >
340 |     …
341 |   </ComboboxRoot>
342 | </template>
343 | ```
344 | 
345 | ### Custom filtering
346 | 
347 | Internally, `ComboboxRoot` will filter the item based on the rendered text.
348 | 
349 | However, you may also provide your own custom filtering logic together with setting `ignoreFilter="true"`.
350 | 
351 | ```vue line=15,16,22,28
352 | <script setup lang="ts">
353 | import { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot, useFilter } from 'reka-ui'
354 | import { ref } from 'vue'
355 | 
356 | const people = [
357 |   { id: 1, name: 'Durward Reynolds' },
358 |   { id: 2, name: 'Kenton Towne' },
359 |   { id: 3, name: 'Therese Wunsch' },
360 |   { id: 4, name: 'Benedict Kessler' },
361 |   { id: 5, name: 'Katelyn Rohan' },
362 | ]
363 | const selectedPeople = ref(people[0])
364 | const searchTerm = ref('')
365 | 
366 | const { startsWith } = useFilter({ sensitivity: 'base' })
367 | const filteredPeople = computed(() => people.filter(p => startsWith(p.name, searchTerm.value)))
368 | </script>
369 | 
370 | <template>
371 |   <ComboboxRoot
372 |     v-model="selectedPeople"
373 |     :ignore-filter="true"
374 |   >
375 |     <ComboboxInput v-model="searchTerm" />
376 |     <ComboboxPortal>
377 |       <ComboboxContent>
378 |         <ComboboxItem
379 |           v-for="person in filteredPeople"
380 |           :key="person.id"
381 |           :value="person"
382 |         >
383 |           {{ person.name }}
384 |         </ComboboxItem>
385 |       </ComboboxContent>
386 |     </ComboboxPortal>
387 |   </ComboboxRoot>
388 | </template>
389 | ```
390 | 
391 | ### Custom label
392 | 
393 | By default the `Combobox` will use the input contents as the label for screenreaders. If you'd like more control over what is announced to assistive technologies, use the [Label](/docs/components/label) component.
394 | 
395 | ```vue line=8,10
396 | <script setup lang="ts">
397 | import { ComboboxInput, ComboboxRoot, Label } from 'reka-ui'
398 | import { ref } from 'vue'
399 | </script>
400 | 
401 | <template>
402 |   <ComboboxRoot v-model="selectedPeople">
403 |     <Label for="person">Person: </Label>
404 |     <ComboboxInput
405 |       id="person"
406 |       placeholder="Select a person"
407 |     />
408 |     …
409 |   </ComboboxRoot>
410 | </template>
411 | ```
412 | 
413 | ### With disabled items
414 | 
415 |  You can add special styles to disabled items via the `data-disabled` attribute.
416 | 
417 | ```vue line=19
418 | <script setup lang="ts">
419 | import {
420 |   ComboboxContent,
421 |   ComboboxInput,
422 |   ComboboxItem,
423 |   ComboboxPortal,
424 |   ComboboxRoot,
425 | } from 'reka-ui'
426 | import { ref } from 'vue'
427 | </script>
428 | 
429 | <template>
430 |   <ComboboxRoot>
431 |     <ComboboxInput />
432 |     <ComboboxPortal>
433 |       <ComboboxContent>
434 |         <ComboboxItem
435 |           class="ComboboxItem"
436 |           disabled
437 |         >
438 |           …
439 |         </ComboboxItem>
440 |       </ComboboxContent>
441 |     </ComboboxPortal>
442 |   </ComboboxRoot>
443 | </template>
444 | ```
445 | 
446 | ```css line=2
447 | /* styles.css */
448 | .ComboboxItem[data-disabled] {
449 |   color: "gainsboro";
450 | }
451 | ```
452 | 
453 | ### With separators
454 | 
455 | Use the `Separator` part to add a separator between items.
456 | 
457 | ```vue line=21
458 | <script setup lang="ts">
459 | import {
460 |   ComboboxContent,
461 |   ComboboxInput,
462 |   ComboboxItem,
463 |   ComboboxPortal,
464 |   ComboboxRoot,
465 |   ComboboxSeparator
466 | } from 'reka-ui'
467 | import { ref } from 'vue'
468 | </script>
469 | 
470 | <template>
471 |   <ComboboxRoot>
472 |     <ComboboxInput />
473 |     <ComboboxPortal>
474 |       <ComboboxContent>
475 |         <ComboboxItem>…</ComboboxItem>
476 |         <ComboboxItem>…</ComboboxItem>
477 |         <ComboboxItem>…</ComboboxItem>
478 |         <ComboboxSeparator />
479 |         <ComboboxItem>…</ComboboxItem>
480 |         <ComboboxItem>…</ComboboxItem>
481 |         <ComboboxItem>…</ComboboxItem>
482 |       </ComboboxContent>
483 |     </ComboboxPortal>
484 |   </ComboboxRoot>
485 | </template>
486 | ```
487 | 
488 | ### With grouped items
489 | 
490 | Use the `Group` and `Label` parts to group items in a section.
491 | 
492 | ```vue line=19,20,24
493 | <script setup lang="ts">
494 | import {
495 |   ComboboxContent,
496 |   ComboboxGroup,
497 |   ComboboxInput,
498 |   ComboboxItem,
499 |   ComboboxLabel,
500 |   ComboboxPortal,
501 |   ComboboxRoot
502 | } from 'reka-ui'
503 | import { ref } from 'vue'
504 | </script>
505 | 
506 | <template>
507 |   <ComboboxRoot>
508 |     <ComboboxInput />
509 |     <ComboboxPortal>
510 |       <ComboboxContent>
511 |         <ComboboxGroup>
512 |           <ComboboxLabel>Label</ComboboxLabel>
513 |           <ComboboxItem>…</ComboboxItem>
514 |           <ComboboxItem>…</ComboboxItem>
515 |           <ComboboxItem>…</ComboboxItem>
516 |         </ComboboxGroup>
517 |       </ComboboxContent>
518 |     </ComboboxPortal>
519 |   </ComboboxRoot>
520 | </template>
521 | ```
522 | 
523 | ### With complex items
524 | 
525 | You can use custom content in your items.
526 | 
527 | ```vue line=21
528 | <script setup lang="ts">
529 | import {
530 |   ComboboxContent,
531 |   ComboboxGroup,
532 |   ComboboxInput,
533 |   ComboboxItem,
534 |   ComboboxItemIndicator,
535 |   ComboboxLabel,
536 |   ComboboxPortal,
537 |   ComboboxRoot
538 | } from 'reka-ui'
539 | import { ref } from 'vue'
540 | </script>
541 | 
542 | <template>
543 |   <ComboboxRoot>
544 |     <ComboboxInput />
545 |     <ComboboxPortal>
546 |       <ComboboxContent>
547 |         <ComboboxItem>
548 |           <img src="…">
549 |           Adolfo Hess
550 |           <ComboboxItemIndicator />
551 |         </ComboboxItem>
552 |         …
553 |       </ComboboxContent>
554 |     </ComboboxPortal>
555 |   </ComboboxRoot>
556 | </template>
557 | ```
558 | 
559 | ### Prevent select behavior
560 | 
561 | By default, selecting `ComboboxItem` would close the content, and update the `modelValue` with the provided value.
562 | You can prevent this behavior by preventing default `@select.prevent`.
563 | 
564 | ```vue line=11
565 | <script setup lang="ts">
566 | import { ComboboxContent, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxPortal, ComboboxRoot } from 'reka-ui'
567 | import { ref } from 'vue'
568 | </script>
569 | 
570 | <template>
571 |   <ComboboxRoot>
572 |     <ComboboxInput />
573 |     <ComboboxPortal>
574 |       <ComboboxContent>
575 |         <ComboboxItem @select.prevent>
576 |           Item A
577 |         </ComboboxItem>
578 |         …
579 |       </ComboboxContent>
580 |     </ComboboxPortal>
581 |   </ComboboxRoot>
582 | </template>
583 | ```
584 | 
585 | ### Virtualized combobox with working filtering
586 | 
587 | Combobox items **must** be filtered manually before passing them over to the virtualizer.
588 | 
589 | See the [virtualization guide](../guides/virtualization.md) for more general info on virtualization.
590 | 
591 | ```vue line=9-10,17,19-28
592 | <script setup lang="ts">
593 | import { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot, ComboboxViewport, ComboboxVirtualizer, useFilter } from 'reka-ui'
594 | import { computed, ref } from 'vue'
595 | 
596 | const people = Array.from({ length: 100000 }).map((_, id) => ({ id, name: `Person #${id}` }))
597 | const selectedPeople = ref(people[0])
598 | const searchTerm = ref('')
599 | 
600 | const { contains } = useFilter({ sensitivity: 'base' })
601 | const filteredPeople = computed(() => people.filter(p => contains(p.name, searchTerm.value)))
602 | </script>
603 | 
604 | <template>
605 |   <ComboboxRoot v-model="selectedPeople">
606 |     <ComboboxInput v-model="searchTerm" />
607 |     <ComboboxPortal>
608 |       <ComboboxContent class="max-h-[40vh] overflow-hidden">
609 |         <ComboboxViewport>
610 |           <ComboboxVirtualizer
611 |             v-slot="{ option }"
612 |             :options="filteredPeople"
613 |             :text-content="(x) => x.name"
614 |             :estimate-size="24"
615 |           >
616 |             <ComboboxItem :value="option">
617 |               {{ option.name }}
618 |             </ComboboxItem>
619 |           </ComboboxVirtualizer>
620 |         </ComboboxViewport>
621 |       </ComboboxContent>
622 |     </ComboboxPortal>
623 |   </ComboboxRoot>
624 | </template>
625 | ```
626 | 
627 | ## Accessibility
628 | 
629 | Adheres to the [Combobox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/).
630 | 
631 | See the W3C [Combobox Autocomplete List](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list/) example for more information.
632 | 
633 | ### Keyboard Interactions
634 | 
635 | <KeyboardTable
636 |   :data="[
637 |     {
638 |       keys: ['Enter'],
639 |       description: '<span>When focus is on <Code>ComboboxItem</Code>, selects the focused item. </span>',
640 |     },
641 |     {
642 |       keys: ['ArrowDown'],
643 |       description: '<span> When focus is on <Code>ComboboxInput</Code>, opens the combobox content. <br /> When focus is on an item, moves focus to the next item. </span>',
644 |     },
645 |     {
646 |       keys: ['ArrowUp'],
647 |       description: '<span> When focus is on <Code>ComboboxInput</Code>, opens the combobox content. <br /> When focus is on an item, moves focus to the previous item. </span>',
648 |     },
649 |     {
650 |       keys: ['Esc'],
651 |       description: '<span> Closes combobox and restores the selected item in the <Code>ComboboxInput</Code> field. </span>',
652 |     },
653 |   ]"
654 | />
655 | 
656 | ## Custom APIs
657 | 
658 | Create your own API by abstracting the primitive parts into your own component.
659 | 
660 | ### Command Menu
661 | 
662 | Combobox can be use to build your own Command Menu.
663 | 
664 | #### Usage
665 | 
666 | ```vue
667 | <script setup lang="ts">
668 | import { Command, CommandItem } from './your-command'
669 | </script>
670 | 
671 | <template>
672 |   <Command>
673 |     <CommandItem value="1">
674 |       Item 1
675 |     </CommandItem>
676 |     <CommandItem value="2">
677 |       Item 2
678 |     </CommandItem>
679 |     <CommandItem value="3">
680 |       Item 3
681 |     </CommandItem>
682 |   </Command>
683 | </template>
684 | ```
685 | 
686 | #### Implementation
687 | 
688 | ```ts
689 | // your-command.ts
690 | export { default as Command } from 'Command.vue'
691 | export { default as CommandItem } from 'CommandItem.vue'
692 | ```
693 | 
694 | ```vue
695 | <!-- Command.vue -->
696 | <script setup lang="ts">
697 | import type { ComboboxRootEmits, ComboboxRootProps } from 'reka-ui'
698 | import { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'
699 | import { ComboboxContent, ComboboxInput, ComboboxPortal, ComboboxRoot, useForwardPropsEmits } from 'reka-ui'
700 | 
701 | const props = defineProps<ComboboxRootProps>()
702 | const emits = defineEmits<ComboboxRootEmits>()
703 | 
704 | const forward = useForwardPropsEmits(props, emits)
705 | </script>
706 | 
707 | <template>
708 |   <ComboboxRoot
709 |     v-bind="forward"
710 |     :open="true"
711 |     model-value=""
712 |   >
713 |     <ComboboxInput placeholder="Type a command or search…" />
714 | 
715 |     <ComboboxPortal>
716 |       <ComboboxContent
717 |         @escape-key-down.prevent
718 |         @focus-outside.prevent
719 |         @interact-outside.prevent
720 |         @pointer-down-outside.prevent
721 |       >
722 |         <ComboboxViewport>
723 |           <slot />
724 |         </ComboboxViewport>
725 |       </ComboboxContent>
726 |     </ComboboxPortal>
727 |   </ComboboxRoot>
728 | </template>
729 | ```
730 | 
731 | ```vue
732 | <!-- ComboboxItem.vue -->
733 | <script setup lang="ts">
734 | import type { ComboboxItemProps } from 'reka-ui'
735 | import { CheckIcon } from '@radix-icons/vue'
736 | import { ComboboxItem } from 'reka-ui'
737 | 
738 | const props = defineProps<ComboboxItemProps>()
739 | </script>
740 | 
741 | <template>
742 |   <ComboboxItem
743 |     v-bind="props"
744 |     @select.prevent
745 |   >
746 |     <slot />
747 |   </ComboboxItem>
748 | </template>
749 | ```
750 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/context-menu.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Context Menu
  4 | description: Displays a menu located at the pointer, triggered by a right-click or a long-press.
  5 | name: context-menu
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/menu
  7 | ---
  8 | 
  9 | # Context Menu
 10 | 
 11 | <Description>
 12 | Displays a menu located at the pointer, triggered by a right-click or a long-press.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="ContextMenu" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Supports submenus with configurable reading direction.',
 22 |     'Supports items, labels, groups of items.',
 23 |     'Supports checkable items (single or multiple) with optional indeterminate state.',
 24 |     'Supports modal and non-modal modes.',
 25 |     'Customize side, alignment, offsets, collision handling.',
 26 |     'Focus is fully managed.',
 27 |     'Full keyboard navigation.',
 28 |     'Typeahead support.',
 29 |     'Dismissing and layering behavior is highly customizable.',
 30 |     'Triggers with a long-press on touch devices',
 31 |   ]"
 32 | />
 33 | 
 34 | ## Installation
 35 | 
 36 | Install the component from your command line.
 37 | 
 38 | <InstallationTabs value="reka-ui" />
 39 | 
 40 | ## Anatomy
 41 | 
 42 | Import all parts and piece them together.
 43 | 
 44 | ```vue
 45 | <script setup lang="ts">
 46 | import {
 47 |   ContextMenuCheckboxItem,
 48 |   ContextMenuContent,
 49 |   ContextMenuGroup,
 50 |   ContextMenuItem,
 51 |   ContextMenuItemIndicator,
 52 |   ContextMenuLabel,
 53 |   ContextMenuPortal,
 54 |   ContextMenuRadioGroup,
 55 |   ContextMenuRadioItem,
 56 |   ContextMenuRoot,
 57 |   ContextMenuSeparator,
 58 |   ContextMenuSub,
 59 |   ContextMenuSubContent,
 60 |   ContextMenuSubTrigger,
 61 |   ContextMenuTrigger,
 62 | } from 'reka-ui'
 63 | </script>
 64 | 
 65 | <template>
 66 |   <ContextMenuRoot>
 67 |     <ContextMenuTrigger />
 68 | 
 69 |     <ContextMenuPortal>
 70 |       <ContextMenuContent>
 71 |         <ContextMenuLabel />
 72 |         <ContextMenuItem />
 73 | 
 74 |         <ContextMenuGroup>
 75 |           <ContextMenuItem />
 76 |         </ContextMenuGroup>
 77 | 
 78 |         <ContextMenuCheckboxItem>
 79 |           <ContextMenuItemIndicator />
 80 |         </ContextMenuCheckboxItem>
 81 | 
 82 |         <ContextMenuRadioGroup>
 83 |           <ContextMenuRadioItem>
 84 |             <ContextMenuItemIndicator />
 85 |           </ContextMenuRadioItem>
 86 |         </ContextMenuRadioGroup>
 87 | 
 88 |         <ContextMenuSub>
 89 |           <ContextMenuSubTrigger />
 90 |           <ContextMenuPortal>
 91 |             <ContextMenuSubContent />
 92 |           </ContextMenuPortal>
 93 |         </ContextMenuSub>
 94 | 
 95 |         <ContextMenuSeparator />
 96 |       </ContextMenuContent>
 97 |     </ContextMenuPortal>
 98 |   </ContextMenuRoot>
 99 | </template>
100 | ```
101 | 
102 | ## API Reference
103 | 
104 | Adheres to the [Menu WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/menu) and uses [roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions.html) to manage focus movement among menu items.
105 | 
106 | ### Root
107 | 
108 | Contains all the parts of a context menu.
109 | 
110 | <!-- @include: @/meta/ContextMenuRoot.md -->
111 | 
112 | ### Trigger
113 | 
114 | The area that opens the context menu. Wrap it around the target you want the context menu to open from when right-clicking (or using the relevant keyboard shortcuts).
115 | 
116 | <!-- @include: @/meta/ContextMenuTrigger.md -->
117 | 
118 | <DataAttributesTable
119 |   :data="[
120 |     {
121 |       attribute: '[data-state]',
122 |       values: ['open', 'closed'],
123 |     },
124 |   ]"
125 | />
126 | 
127 | ### Portal
128 | 
129 | When used, portals the content part into the `body`.
130 | 
131 | <!-- @include: @/meta/ContextMenuPortal.md -->
132 | 
133 | ### Content
134 | 
135 | The component that pops out in an open context menu.
136 | 
137 | <!-- @include: @/meta/ContextMenuContent.md -->
138 | 
139 | <DataAttributesTable
140 |   :data="[
141 |     {
142 |       attribute: '[data-state]',
143 |       values: ['open', 'closed'],
144 |     },
145 |     {
146 |       attribute: '[data-side]',
147 |       values: ['left', 'right', 'bottom', 'top'],
148 |     },
149 |     {
150 |       attribute: '[data-align]',
151 |       values: ['start', 'end', 'center'],
152 |     },
153 |   ]"
154 | />
155 | 
156 | <CssVariablesTable
157 |   :data="[
158 |     {
159 |       cssVariable: '--reka-context-menu-content-transform-origin',
160 |       description: `
161 |         The <Code>transform-origin</Code> computed from the content and arrow positions/offsets
162 |       `,
163 |     },
164 |     {
165 |       cssVariable: '--reka-context-menu-content-available-width',
166 |       description: `
167 |         The remaining width between the trigger and the boundary edge
168 |       `,
169 |     },
170 |     {
171 |       cssVariable: '--reka-context-menu-content-available-height',
172 |       description: `
173 |         The remaining height between the trigger and the boundary edge
174 |       `,
175 |     },
176 |     {
177 |       cssVariable: '--reka-context-menu-trigger-width',
178 |       description: `The width of the trigger`,
179 |     },
180 |     {
181 |       cssVariable: '--reka-context-menu-trigger-height',
182 |       description: 'The height of the trigger',
183 |     },
184 |   ]"
185 | />
186 | 
187 | ### Arrow
188 | 
189 | An optional arrow element to render alongside a submenu. This can be used to help visually link the trigger item with the `ContextMenu.Content`. Must be rendered inside `ContextMenu.Content`.
190 | 
191 | <!-- @include: @/meta/ContextMenuArrow.md -->
192 | 
193 | ### Item
194 | 
195 | The component that contains the context menu items.
196 | 
197 | <!-- @include: @/meta/ContextMenuItem.md -->
198 | 
199 | <DataAttributesTable
200 |   :data="[
201 |     {
202 |       attribute: '[data-highlighted]',
203 |       values: 'Present when highlighted',
204 |     },
205 |     {
206 |       attribute: '[data-disabled]',
207 |       values: 'Present when disabled',
208 |     },
209 |   ]"
210 | />
211 | 
212 | ### Group
213 | 
214 | Used to group multiple `ContextMenu.Item`s.
215 | 
216 | <!-- @include: @/meta/ContextMenuGroup.md -->
217 | 
218 | ### Label
219 | 
220 | Used to render a label. It won't be focusable using arrow keys.
221 | 
222 | <!-- @include: @/meta/ContextMenuLabel.md -->
223 | 
224 | ### CheckboxItem
225 | 
226 | An item that can be controlled and rendered like a checkbox.
227 | 
228 | <!-- @include: @/meta/ContextMenuCheckboxItem.md -->
229 | 
230 | <DataAttributesTable
231 |   :data="[
232 |     {
233 |       attribute: '[data-state]',
234 |       values: ['checked', 'unchecked', 'indeterminate'],
235 |     },
236 |     {
237 |       attribute: '[data-highlighted]',
238 |       values: 'Present when highlighted',
239 |     },
240 |     {
241 |       attribute: '[data-disabled]',
242 |       values: 'Present when disabled',
243 |     },
244 |   ]"
245 | />
246 | 
247 | ### RadioGroup
248 | 
249 | Used to group multiple `ContextMenu.RadioItem`s.
250 | 
251 | <!-- @include: @/meta/ContextMenuRadioGroup.md -->
252 | 
253 | ### RadioItem
254 | 
255 | An item that can be controlled and rendered like a radio.
256 | 
257 | <!-- @include: @/meta/ContextMenuRadioItem.md -->
258 | 
259 | <DataAttributesTable
260 |   :data="[
261 |     {
262 |       attribute: '[data-state]',
263 |       values: ['checked', 'unchecked', 'indeterminate'],
264 |     },
265 |     {
266 |       attribute: '[data-highlighted]',
267 |       values: 'Present when highlighted',
268 |     },
269 |     {
270 |       attribute: '[data-disabled]',
271 |       values: 'Present when disabled',
272 |     },
273 |   ]"
274 | />
275 | 
276 | ### ItemIndicator
277 | 
278 | Renders when the parent `ContextMenu.CheckboxItem` or `ContextMenu.RadioItem` is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
279 | 
280 | <!-- @include: @/meta/ContextMenuItemIndicator.md -->
281 | 
282 | <DataAttributesTable
283 |   :data="[
284 |     {
285 |       attribute: '[data-state]',
286 |       values: ['checked', 'unchecked', 'indeterminate'],
287 |     },
288 |   ]"
289 | />
290 | 
291 | ### Separator
292 | 
293 | Used to visually separate items in the context menu.
294 | 
295 | <!-- @include: @/meta/ContextMenuSeparator.md -->
296 | 
297 | ### Sub
298 | 
299 | Contains all the parts of a submenu.
300 | 
301 | <!-- @include: @/meta/ContextMenuSub.md -->
302 | 
303 | ### SubTrigger
304 | 
305 | An item that opens a submenu. Must be rendered inside `ContextMenu.Sub`.
306 | 
307 | <!-- @include: @/meta/ContextMenuSubTrigger.md -->
308 | 
309 | <DataAttributesTable
310 |   :data="[
311 |     {
312 |       attribute: '[data-state]',
313 |       values: ['open', 'closed'],
314 |     },
315 |     {
316 |       attribute: '[data-highlighted]',
317 |       values: 'Present when highlighted',
318 |     },
319 |     {
320 |       attribute: '[data-disabled]',
321 |       values: 'Present when disabled',
322 |     },
323 |   ]"
324 | />
325 | 
326 | ### SubContent
327 | 
328 | The component that pops out when a submenu is open. Must be rendered inside `ContextMenu.Sub`.
329 | 
330 | <!-- @include: @/meta/ContextMenuSubContent.md -->
331 | 
332 | <DataAttributesTable
333 |   :data="[
334 |     {
335 |       attribute: '[data-state]',
336 |       values: ['open', 'closed'],
337 |     },
338 |     {
339 |       attribute: '[data-side]',
340 |       values: ['left', 'right', 'bottom', 'top'],
341 |     },
342 |     {
343 |       attribute: '[data-align]',
344 |       values: ['start', 'end', 'center'],
345 |     },
346 |   ]"
347 | />
348 | 
349 | <CssVariablesTable
350 |   :data="[
351 |     {
352 |       cssVariable: '--reka-context-menu-content-transform-origin',
353 |       description: `
354 |         The <Code>transform-origin</Code> computed from the content and arrow positions/offsets
355 |       `,
356 |     },
357 |     {
358 |       cssVariable: '--reka-context-menu-content-available-width',
359 |       description: `The remaining width between the trigger and the boundary edge`,
360 |     },
361 |     {
362 |       cssVariable: '--reka-context-menu-content-available-height',
363 |       description: `The remaining height between the trigger and the boundary edge`,
364 |     },
365 |     {
366 |       cssVariable: '--reka-context-menu-trigger-width',
367 |       description: 'The width of the trigger',
368 |     },
369 |     {
370 |       cssVariable: '--reka-context-menu-trigger-height',
371 |       description: 'The height of the trigger',
372 |     },
373 |   ]"
374 | />
375 | 
376 | ## Examples
377 | 
378 | ### With submenus
379 | 
380 | You can create submenus by using `ContextMenuSub` in combination with its parts.
381 | 
382 | ```vue line=24-33
383 | <script setup lang="ts">
384 | import {
385 |   ContextMenuContent,
386 |   ContextMenuItem,
387 |   ContextMenuLabel,
388 |   ContextMenuPortal,
389 |   ContextMenuRoot,
390 |   ContextMenuSeparator,
391 |   ContextMenuSub,
392 |   ContextMenuSubContent,
393 |   ContextMenuSubTrigger,
394 |   ContextMenuTrigger,
395 | } from 'reka-ui'
396 | </script>
397 | 
398 | <template>
399 |   <ContextMenuRoot>
400 |     <ContextMenuTrigger>…</ContextMenuTrigger>
401 |     <ContextMenuPortal>
402 |       <ContextMenuContent>
403 |         <ContextMenuItem>…</ContextMenuItem>
404 |         <ContextMenuItem>…</ContextMenuItem>
405 |         <ContextMenuSeparator />
406 |         <ContextMenuSub>
407 |           <ContextMenuSubTrigger>Sub menu →</ContextMenuSubTrigger>
408 |           <ContextMenuPortal>
409 |             <ContextMenuSubContent>
410 |               <ContextMenuItem>Sub menu item</ContextMenuItem>
411 |               <ContextMenuItem>Sub menu item</ContextMenuItem>
412 |               <ContextMenuArrow />
413 |             </ContextMenuSubContent>
414 |           </ContextMenuPortal>
415 |         </ContextMenuSub>
416 |         <ContextMenuSeparator />
417 |         <ContextMenuItem>…</ContextMenuItem>
418 |       </ContextMenuContent>
419 |     </ContextMenuPortal>
420 |   </ContextMenuRoot>
421 | </template>
422 | ```
423 | 
424 | ### With disabled items
425 | 
426 | You can add special styles to disabled items via the `data-disabled` attribute.
427 | 
428 | ```vue line=12
429 | <script setup lang="ts">
430 | import { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'
431 | </script>
432 | 
433 | <template>
434 |   <ContextMenuRoot>
435 |     <ContextMenuTrigger>…</ContextMenuTrigger>
436 |     <ContextMenuPortal>
437 |       <ContextMenuContent>
438 |         <ContextMenuItem
439 |           class="ContextMenuItem"
440 |           disabled
441 |         >
442 |           …
443 |         </ContextMenuItem>
444 |         <ContextMenuItem class="ContextMenuItem">
445 |           …
446 |         </ContextMenuItem>
447 |       </ContextMenuContent>
448 |     </ContextMenuPortal>
449 |   </ContextMenuRoot>
450 | </template>
451 | ```
452 | 
453 | ```css line=2
454 | /* styles.css */
455 | .ContextMenuItem[data-disabled] {
456 |   color: gainsboro;
457 | }
458 | ```
459 | 
460 | ### With separators
461 | 
462 | Use the `Separator` part to add a separator between items.
463 | 
464 | ```vue line=7,18,20
465 | <script setup lang="ts">
466 | import {
467 |   ContextMenuContent,
468 |   ContextMenuItem,
469 |   ContextMenuPortal,
470 |   ContextMenuRoot,
471 |   ContextMenuSeparator,
472 |   ContextMenuTrigger,
473 | } from 'reka-ui'
474 | </script>
475 | 
476 | <template>
477 |   <ContextMenuRoot>
478 |     <ContextMenuTrigger>…</ContextMenuTrigger>
479 |     <ContextMenuPortal>
480 |       <ContextMenuContent>
481 |         <ContextMenuItem>…</ContextMenuItem>
482 |         <ContextMenuSeparator />
483 |         <ContextMenuItem>…</ContextMenuItem>
484 |         <ContextMenuSeparator />
485 |         <ContextMenuItem>…</ContextMenuItem>
486 |       </ContextMenuContent>
487 |     </ContextMenuPortal>
488 |   </ContextMenuRoot>
489 | </template>
490 | ```
491 | 
492 | ### With labels
493 | 
494 | Use the `Label` part to help label a section.
495 | 
496 | ```vue line=5,17
497 | <script setup lang="ts">
498 | import {
499 |   ContextMenuContent,
500 |   ContextMenuItem,
501 |   ContextMenuLabel,
502 |   ContextMenuPortal,
503 |   ContextMenuRoot,
504 |   ContextMenuTrigger,
505 | } from 'reka-ui'
506 | </script>
507 | 
508 | <template>
509 |   <ContextMenuRoot>
510 |     <ContextMenuTrigger>…</ContextMenuTrigger>
511 |     <ContextMenuPortal>
512 |       <ContextMenuContent>
513 |         <ContextMenuLabel>Label</ContextMenuLabel>
514 |         <ContextMenuItem>…</ContextMenuItem>
515 |         <ContextMenuItem>…</ContextMenuItem>
516 |         <ContextMenuItem>…</ContextMenuItem>
517 |       </ContextMenuContent>
518 |     </ContextMenuPortal>
519 |   </ContextMenuRoot>
520 | </template>
521 | ```
522 | 
523 | ### With checkbox items
524 | 
525 | Use the `CheckboxItem` part to add an item that can be checked.
526 | 
527 | ```vue line=3,25-30
528 | <script setup lang="ts">
529 | import { Icon } from '@iconify/vue'
530 | import {
531 |   ContextMenuCheckboxItem,
532 |   ContextMenuContent,
533 |   ContextMenuItem,
534 |   ContextMenuItemIndicator,
535 |   ContextMenuPortal,
536 |   ContextMenuRoot,
537 |   ContextMenuSeparator,
538 |   ContextMenuTrigger,
539 | } from 'reka-ui'
540 | 
541 | const checked = ref(true)
542 | </script>
543 | 
544 | <template>
545 |   <ContextMenuRoot>
546 |     <ContextMenuTrigger>…</ContextMenuTrigger>
547 |     <ContextMenuPortal>
548 |       <ContextMenuContent>
549 |         <ContextMenuItem>…</ContextMenuItem>
550 |         <ContextMenuItem>…</ContextMenuItem>
551 |         <ContextMenuSeparator />
552 |         <ContextMenuCheckboxItem v-model="checked">
553 |           <ContextMenuItemIndicator>
554 |             <Icon icon="radix-icons:check" />
555 |           </ContextMenuItemIndicator>
556 |           Checkbox item
557 |         </ContextMenuCheckboxItem>
558 |       </ContextMenuContent>
559 |     </ContextMenuPortal>
560 |   </ContextMenuRoot>
561 | </template>
562 | ```
563 | 
564 | ### With radio items
565 | 
566 | Use the `RadioGroup` and `RadioItem` parts to add an item that can be checked amongst others.
567 | 
568 | ```vue line=8,9,24-43
569 | <script setup lang="ts">
570 | import { Icon } from '@iconify/vue'
571 | import {
572 |   ContextMenuCheckboxItem,
573 |   ContextMenuContent,
574 |   ContextMenuItem,
575 |   ContextMenuItemIndicator,
576 |   ContextMenuPortal,
577 |   ContextMenuRadioGroup,
578 |   ContextMenuRadioItem,
579 |   ContextMenuRoot,
580 |   ContextMenuSeparator,
581 |   ContextMenuTrigger,
582 | } from 'reka-ui'
583 | 
584 | const color = ref('blue')
585 | </script>
586 | 
587 | <template>
588 |   <ContextMenuRoot>
589 |     <ContextMenuTrigger>…</ContextMenuTrigger>
590 |     <ContextMenuPortal>
591 |       <ContextMenuContent>
592 |         <ContextMenuRadioGroup v-model="color">
593 |           <ContextMenuRadioItem value="red">
594 |             <ContextMenuItemIndicator>
595 |               <Icon icon="radix-icons:check" />
596 |             </ContextMenuItemIndicator>
597 |             Red
598 |           </ContextMenuRadioItem>
599 |           <ContextMenuRadioItem value="blue">
600 |             <ContextMenuItemIndicator>
601 |               <Icon icon="radix-icons:check" />
602 |             </ContextMenuItemIndicator>
603 |             Blue
604 |           </ContextMenuRadioItem>
605 |           <ContextMenuRadioItem value="green">
606 |             <ContextMenuItemIndicator>
607 |               <Icon icon="radix-icons:check" />
608 |             </ContextMenuItemIndicator>
609 |             Green
610 |           </ContextMenuRadioItem>
611 |         </ContextMenuRadioGroup>
612 |       </ContextMenuContent>
613 |     </ContextMenuPortal>
614 |   </ContextMenuRoot>
615 | </template>
616 | ```
617 | 
618 | ### With complex items
619 | 
620 | You can add extra decorative elements in the `Item` parts, such as images.
621 | 
622 | ```vue line=11,15
623 | <script setup lang="ts">
624 | import { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'
625 | </script>
626 | 
627 | <template>
628 |   <ContextMenuRoot>
629 |     <ContextMenuTrigger>…</ContextMenuTrigger>
630 |     <ContextMenuPortal>
631 |       <ContextMenuContent>
632 |         <ContextMenuItem>
633 |           <img src="…">
634 |           Adolfo Hess
635 |         </ContextMenuItem>
636 |         <ContextMenuItem>
637 |           <img src="…">
638 |           Miyah Myles
639 |         </ContextMenuItem>
640 |       </ContextMenuContent>
641 |     </ContextMenuPortal>
642 |   </ContextMenuRoot>
643 | </template>
644 | ```
645 | 
646 | ### Constrain the content/sub-content size
647 | 
648 | You may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.
649 | 
650 | We expose several CSS custom properties such as `--reka-context-menu-trigger-width` and `--reka-context-menu-content-available-height` to support this. Use them to constrain the content dimensions.
651 | 
652 | ```vue line=9
653 | <script setup lang="ts">
654 | import { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'
655 | </script>
656 | 
657 | <template>
658 |   <ContextMenuRoot>
659 |     <ContextMenuTrigger>…</ContextMenuTrigger>
660 |     <ContextMenuPortal>
661 |       <ContextMenuContent class="ContextMenuContent">
662 |         …
663 |       </ContextMenuContent>
664 |     </ContextMenuPortal>
665 |   </ContextMenuRoot>
666 | </template>
667 | ```
668 | 
669 | ```css line=3-4
670 | /* styles.css */
671 | .ContextMenuContent {
672 |   width: var(--reka-context-menu-trigger-width);
673 |   max-height: var(--reka-context-menu-content-available-height);
674 | }
675 | ```
676 | 
677 | ### Origin-aware animations
678 | 
679 | We expose a CSS custom property `--reka-context-menu-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.
680 | 
681 | ```vue line=9
682 | <script setup lang="ts">
683 | import { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'
684 | </script>
685 | 
686 | <template>
687 |   <ContextMenuRoot>
688 |     <ContextMenuTrigger>…</ContextMenuTrigger>
689 |     <ContextMenuPortal>
690 |       <ContextMenuContent class="ContextMenuContent">
691 |         …
692 |       </ContextMenuContent>
693 |     </ContextMenuPortal>
694 |   </ContextMenuRoot>
695 | </template>
696 | ```
697 | 
698 | ```css line=3
699 | /* styles.css */
700 | .ContextMenuContent {
701 |   transform-origin: var(--reka-context-menu-content-transform-origin);
702 |   animation: scaleIn 0.5s ease-out;
703 | }
704 | 
705 | @keyframes scaleIn {
706 |   from {
707 |     opacity: 0;
708 |     transform: scale(0);
709 |   }
710 |   to {
711 |     opacity: 1;
712 |     transform: scale(1);
713 |   }
714 | }
715 | ```
716 | 
717 | ### Collision-aware animations
718 | 
719 | We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.
720 | 
721 | ```vue line=9
722 | <script setup lang="ts">
723 | import { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'
724 | </script>
725 | 
726 | <template>
727 |   <ContextMenuRoot>
728 |     <ContextMenuTrigger>…</ContextMenuTrigger>
729 |     <ContextMenuPortal>
730 |       <ContextMenuContent class="ContextMenuContent">
731 |         …
732 |       </ContextMenuContent>
733 |     </ContextMenuPortal>
734 |   </ContextMenuRoot>
735 | </template>
736 | ```
737 | 
738 | ```css line=6-11
739 | /* styles.css */
740 | .ContextMenuContent {
741 |   animation-duration: 0.6s;
742 |   animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
743 | }
744 | .ContextMenuContent[data-side="top"] {
745 |   animation-name: slideUp;
746 | }
747 | .ContextMenuContent[data-side="bottom"] {
748 |   animation-name: slideDown;
749 | }
750 | 
751 | @keyframes slideUp {
752 |   from {
753 |     opacity: 0;
754 |     transform: translateY(10px);
755 |   }
756 |   to {
757 |     opacity: 1;
758 |     transform: translateY(0);
759 |   }
760 | }
761 | 
762 | @keyframes slideDown {
763 |   from {
764 |     opacity: 0;
765 |     transform: translateY(-10px);
766 |   }
767 |   to {
768 |     opacity: 1;
769 |     transform: translateY(0);
770 |   }
771 | }
772 | ```
773 | 
774 | ## Accessibility
775 | 
776 | Uses [roving tabindex](https://www.w3.org/WAI/ARIA/apg/patterns/kbd_roving_tabindex) to manage focus movement among menu items.
777 | 
778 | ### Keyboard Interactions
779 | 
780 | <KeyboardTable
781 |   :data="[
782 |     {
783 |       keys: ['Space'],
784 |       description: `<span>Activates the focused item.</span>`
785 |     },
786 |     {
787 |       keys: ['Enter'],
788 |       description: '<span>Activates the focused item.</span>',
789 |     },
790 |     {
791 |       keys: ['ArrowDown'],
792 |       description: '<span>Moves focus to the next item.</span>',
793 |     },
794 |     {
795 |       keys: ['ArrowUp'],
796 |       description: '<span>Moves focus to the previous item.</span>',
797 |     },
798 |     {
799 |       keys: ['ArrowRight', 'ArrowLeft'],
800 |       description: `
801 |         <span>
802 |           When focus is on <Code>ContextMenu.SubTrigger</Code>, opens or closes
803 |           the submenu depending on reading direction.
804 |         </span>
805 |       `,
806 |     },
807 |     {
808 |       keys: ['Esc'],
809 |       description: 'Closes the context menu',
810 |     },
811 |   ]"
812 | />
813 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/date-field.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Date Field
  3 | description: Enables users to input specific dates within a designated field.
  4 | name: date-field
  5 | ---
  6 | 
  7 | # Date Field
  8 | 
  9 | <Badge>Alpha</Badge>
 10 | 
 11 | <Description>
 12 | Enables users to input specific dates within a designated field.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="DateField" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation',
 22 |     'Can be controlled or uncontrolled',
 23 |     'Focus is fully managed',
 24 |     'Localization support',
 25 |     'Highly composable',
 26 |     'Accessible by default',
 27 |     'Supports both date and date-time formats'
 28 |   ]"
 29 | />
 30 | 
 31 | ## Preface
 32 | 
 33 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
 34 | 
 35 | We highly recommend reading through the documentation for the package to get a solid feel for how it works, and you'll need to install it in your project to use the date-related components.
 36 | 
 37 | ## Installation
 38 | 
 39 | Install the date package.
 40 | 
 41 | <InstallationTabs value="@internationalized/date" />
 42 | 
 43 | Install the component from your command line.
 44 | 
 45 | <InstallationTabs value="reka-ui" />
 46 | 
 47 | ## Anatomy
 48 | 
 49 | Import all parts and piece them together.
 50 | 
 51 | ```vue
 52 | <script setup>
 53 | import {
 54 |   DateFieldInput,
 55 |   DateFieldRoot,
 56 | } from 'reka-ui'
 57 | </script>
 58 | 
 59 | <template>
 60 |   <DateFieldRoot>
 61 |     <DateFieldInput />
 62 |   </DateFieldRoot>
 63 | </template>
 64 | ```
 65 | 
 66 | ## API Reference
 67 | 
 68 | ### Root
 69 | 
 70 | Contains all the parts of a date field
 71 | 
 72 | <!-- @include: @/meta/DateFieldRoot.md -->
 73 | 
 74 | <DataAttributesTable
 75 |   :data="[
 76 |     {
 77 |       attribute: '[data-readonly]',
 78 |       values: 'Present when readonly',
 79 |     },
 80 |     {
 81 |       attribute: '[data-disabled]',
 82 |       values: 'Present when disabled',
 83 |     },
 84 |     {
 85 |       attribute: '[data-invalid]',
 86 |       values: 'Present when invalid',
 87 |     }
 88 |   ]"
 89 | />
 90 | 
 91 | ### Input
 92 | 
 93 | Contains the date field segments
 94 | 
 95 | <!-- @include: @/meta/DateFieldInput.md -->
 96 | 
 97 | <DataAttributesTable
 98 |   :data="[
 99 |     {
100 |       attribute: '[data-disabled]',
101 |       values: 'Present when disabled',
102 |     },
103 |     {
104 |       attribute: '[data-invalid]',
105 |       values: 'Present when invalid',
106 |     },
107 |     {
108 |       attribute: '[data-placeholder]',
109 |       values: 'Present when no value is set',
110 |     },
111 |   ]"
112 | />
113 | 
114 | ## Accessibility
115 | 
116 | ### Keyboard Interactions
117 | 
118 | <KeyboardTable
119 |   :data="[
120 |     {
121 |       keys: ['Tab'],
122 |       description: 'When focus moves onto the date field, focuses the first segment.'
123 |     },
124 |     {
125 |       keys: ['ArrowLeft', 'ArrowRight'],
126 |       description:
127 |       `
128 |          Navigates between the date field segments.
129 |       `
130 |     },
131 |     {
132 |       keys: ['ArrowUp', 'ArrowDown'],
133 |       description: 'Increments/changes the value of the segment.'
134 |     },
135 |     {
136 |       keys: ['0-9'],
137 |       description: `
138 |           When the focus is on a numeric <Code>DateFieldInput</Code>, it types in the number and focuses the next segment if the next input would result in an invalid value.
139 |       `
140 |     },
141 |     {
142 |       keys: ['Backspace'],
143 |       description: 'Deletes a digit from the focused numeric segments.'
144 |     },
145 |     {
146 |       keys: ['A', 'P'],
147 |       description: 'When the focus is on the day period, it sets it to AM or PM.'
148 |     }
149 |   ]"
150 | />
151 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/date-picker.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Date Picker
  3 | description: Facilitates the selection of dates through an input and calendar-based interface.
  4 | name: date-picker
  5 | ---
  6 | 
  7 | # Date Picker
  8 | 
  9 | <Badge>Alpha</Badge>
 10 | 
 11 | <Description>
 12 | Facilitates the selection of dates through an input and calendar-based interface.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="DatePicker" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation',
 22 |     'Can be controlled or uncontrolled',
 23 |     'Focus is fully managed',
 24 |     'Localization support',
 25 |     'Accessible by default',
 26 |     'Supports both date and date-time formats'
 27 |   ]"
 28 | />
 29 | 
 30 | ## Preface
 31 | 
 32 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
 33 | 
 34 | We highly recommend reading through the documentation for the package to get a solid feel for how it works, and you'll need to install it in your project to use the date-related components.
 35 | 
 36 | ## Installation
 37 | 
 38 | Install the date package.
 39 | 
 40 | <InstallationTabs value="@internationalized/date" />
 41 | 
 42 | Install the component from your command line.
 43 | 
 44 | <InstallationTabs value="reka-ui" />
 45 | 
 46 | ## Anatomy
 47 | 
 48 | Import all parts and piece them together.
 49 | 
 50 | ```vue
 51 | <script setup>
 52 | import {
 53 |   DatePickerAnchor,
 54 |   DatePickerArrow,
 55 |   DatePickerCalendar,
 56 |   DatePickerCell,
 57 |   DatePickerCellTrigger,
 58 |   DatePickerClose,
 59 |   DatePickerContent,
 60 |   DatePickerField,
 61 |   DatePickerGrid,
 62 |   DatePickerGridBody,
 63 |   DatePickerGridHead,
 64 |   DatePickerGridRow,
 65 |   DatePickerHeadCell,
 66 |   DatePickerHeader,
 67 |   DatePickerHeading,
 68 |   DatePickerInput,
 69 |   DatePickerNext,
 70 |   DatePickerPrev,
 71 |   DatePickerRoot,
 72 |   DatePickerTrigger,
 73 | } from 'reka-ui'
 74 | </script>
 75 | 
 76 | <template>
 77 |   <DatePickerRoot>
 78 |     <DatePickerField>
 79 |       <DatePickerInput />
 80 |       <DatePickerTrigger />
 81 |     </DatePickerField>
 82 | 
 83 |     <DatePickerAnchor />
 84 |     <DatePickerContent>
 85 |       <DatePickerClose />
 86 |       <DatePickerArrow />
 87 | 
 88 |       <DatePickerCalendar>
 89 |         <DatePickerHeader>
 90 |           <DatePickerPrev />
 91 |           <DatePickerHeading />
 92 |           <DatePickerNext />
 93 |         </DatePickerHeader>
 94 | 
 95 |         <DatePickerGrid>
 96 |           <DatePickerGridHead>
 97 |             <DatePickerGridRow>
 98 |               <DatePickerHeadCell />
 99 |             </DatePickerGridRow>
100 |           </DatePickerGridHead>
101 | 
102 |           <DatePickerGridBody>
103 |             <DatePickerGridRow>
104 |               <DatePickerCell>
105 |                 <DatePickerCellTrigger />
106 |               </DatePickerCell>
107 |             </DatePickerGridRow>
108 |           </DatePickerGridBody>
109 |         </DatePickerGrid>
110 |       </DatePickerCalendar>
111 |     </DatePickerContent>
112 |   </DatePickerRoot>
113 | </template>
114 | ```
115 | 
116 | ## API Reference
117 | 
118 | ### Root
119 | 
120 | Contains all the parts of a date picker
121 | 
122 | <!-- @include: @/meta/DatePickerRoot.md -->
123 | 
124 | ### Field
125 | 
126 | Contains the date picker date field segments and trigger
127 | 
128 | <!-- @include: @/meta/DatePickerField.md -->
129 | 
130 | <DataAttributesTable
131 |   :data="[
132 |     {
133 |       attribute: '[data-readonly]',
134 |       values: 'Present when readonly',
135 |     },
136 |     {
137 |       attribute: '[data-disabled]',
138 |       values: 'Present when disabled',
139 |     },
140 |     {
141 |       attribute: '[data-invalid]',
142 |       values: 'Present when invalid',
143 |     }
144 |   ]"
145 | />
146 | 
147 | ### Input
148 | 
149 | Contains the date picker date field segments
150 | 
151 | <!-- @include: @/meta/DatePickerInput.md -->
152 | 
153 | <DataAttributesTable
154 |   :data="[
155 |     {
156 |       attribute: '[data-disabled]',
157 |       values: 'Present when disabled',
158 |     },
159 |     {
160 |       attribute: '[data-invalid]',
161 |       values: 'Present when invalid',
162 |     },
163 |     {
164 |       attribute: '[data-placeholder]',
165 |       values: 'Present when no value is set',
166 |     }
167 |   ]"
168 | />
169 | 
170 | ### Trigger
171 | 
172 | The button that toggles the popover. By default, the `DatePickerContent` will position itself against the trigger.
173 | 
174 | <!-- @include: @/meta/DatePickerTrigger.md -->
175 | 
176 | ### Content
177 | 
178 | The component that pops out when the popover is open.
179 | 
180 | <!-- @include: @/meta/DatePickerContent.md -->
181 | 
182 | ### Arrow
183 | 
184 | An optional arrow element to render alongside the popover. This can be used to help visually link the anchor with the `DatePickerContent`. Must be rendered inside `DatePickerContent`.
185 | 
186 | <!-- @include: @/meta/DatePickerArrow.md -->
187 | 
188 | ### Close
189 | 
190 | The button that closes an open date picker.
191 | 
192 | <!-- @include: @/meta/DatePickerClose.md -->
193 | 
194 | ### Anchor
195 | 
196 | An optional element to position the `DatePickerContent` against. If this part is not used, the content will position alongside the `DatePickerTrigger`.
197 | 
198 | <!-- @include: @/meta/DatePickerAnchor.md -->
199 | 
200 | ### Calendar
201 | 
202 | Contains all the parts of a calendar
203 | 
204 | <!-- @include: @/meta/DatePickerCalendar.md -->
205 | 
206 | <DataAttributesTable
207 |   :data="[
208 |     {
209 |       attribute: '[data-disabled]',
210 |       values: 'Present when disabled',
211 |     },
212 |     {
213 |       attribute: '[data-invalid]',
214 |       values: 'Present when invalid',
215 |     },
216 |     {
217 |       attribute: '[data-readonly]',
218 |       values: 'Present when readonly',
219 |     }
220 |   ]"
221 | />
222 | 
223 | ### Header
224 | 
225 | Contains the navigation buttons and the heading segments.
226 | 
227 | <!-- @include: @/meta/DatePickerHeader.md -->
228 | 
229 | ### Prev Button
230 | 
231 | Calendar navigation button. It navigates the calendar one month/year/decade in the past based on the current calendar view.
232 | 
233 | <!-- @include: @/meta/DatePickerPrev.md -->
234 | 
235 | <DataAttributesTable
236 |   :data="[
237 |     {
238 |       attribute: '[data-disabled]',
239 |       values: 'Present when disabled',
240 |     },
241 |   ]"
242 | />
243 | 
244 | ### Next Button
245 | 
246 | Calendar navigation button. It navigates the calendar one month/year/decade in the future based on the current calendar view.
247 | 
248 | <!-- @include: @/meta/DatePickerNext.md -->
249 | 
250 | <DataAttributesTable
251 |   :data="[
252 |     {
253 |       attribute: '[data-disabled]',
254 |       values: 'Present when disabled',
255 |     }
256 |   ]"
257 | />
258 | 
259 | ### Heading
260 | 
261 | Heading for displaying the current month and year/
262 | 
263 | <!-- @include: @/meta/DatePickerHeading.md -->
264 | 
265 | ### Grid
266 | 
267 | Container for wrapping the calendar grid.
268 | 
269 | <!-- @include: @/meta/DatePickerGrid.md -->
270 | 
271 | <DataAttributesTable
272 |   :data="[
273 |     {
274 |       attribute: '[data-disabled]',
275 |       values: 'Present when disabled',
276 |     },
277 |     {
278 |       attribute: '[data-readonly]',
279 |       values: 'Present when readonly',
280 |     }
281 |   ]"
282 | />
283 | 
284 | ### Grid Head
285 | 
286 | Container for wrapping the grid head.
287 | 
288 | <!-- @include: @/meta/DatePickerGridHead.md -->
289 | 
290 | ### Grid Body
291 | 
292 | Container for wrapping the grid body.
293 | 
294 | <!-- @include: @/meta/DatePickerGridBody.md -->
295 | 
296 | ### Grid Row
297 | 
298 | Container for wrapping the grid row.
299 | 
300 | <!-- @include: @/meta/DatePickerGridRow.md -->
301 | 
302 | ### Head Cell
303 | 
304 | Container for wrapping the head cell. Used for displaying the week days.
305 | 
306 | <!-- @include: @/meta/DatePickerHeadCell.md -->
307 | 
308 | ### Cell
309 | 
310 | Container for wrapping the calendar cells.
311 | 
312 | <!-- @include: @/meta/DatePickerCell.md -->
313 | 
314 | <DataAttributesTable
315 |   :data="[
316 |     {
317 |       attribute: '[data-disabled]',
318 |       values: 'Present when disabled',
319 |     },
320 |   ]"
321 | />
322 | 
323 | ### Cell Trigger
324 | 
325 | Interactable container for displaying the cell dates. Clicking it selects the date.
326 | 
327 | <!-- @include: @/meta/DatePickerCellTrigger.md -->
328 | 
329 | <DataAttributesTable
330 |   :data="[
331 |     {
332 |       attribute: '[data-selected]',
333 |       values: 'Present when selected',
334 |     },
335 |     {
336 |       attribute: '[data-value]',
337 |       values: 'The ISO string value of the date.',
338 |     },
339 |     {
340 |       attribute: '[data-disabled]',
341 |       values: 'Present when disabled',
342 |     },
343 |     {
344 |       attribute: '[data-unavailable]',
345 |       values: 'Present when unavailable',
346 |     },
347 |     {
348 |       attribute: '[data-today]',
349 |       values: 'Present when today',
350 |     },
351 |     {
352 |       attribute: '[data-outside-view]',
353 |       values: 'Present when the date is outside the current month it is displayed in.',
354 |     },
355 |     {
356 |       attribute: '[data-outside-visible-view]',
357 |       values: 'Present when the date is outside the months that are visible on the calendar.',
358 |     },
359 |     {
360 |       attribute: '[data-focused]',
361 |       values: 'Present when focused',
362 |     }
363 |   ]"
364 | />
365 | 
366 | ## Accessibility
367 | 
368 | ### Keyboard Interactions
369 | 
370 | <KeyboardTable
371 |   :data="[
372 |     {
373 |       keys: ['Tab'],
374 |       description: 'When focus moves onto the date field, focuses the first segment.'
375 |     },
376 |     {
377 |       keys: ['Space'],
378 |       description:`
379 |       <span>
380 |           When the focus is on either <Code>DatePickerNext</Code> or <Code>DatePickerPrev</Code>, it navigates the calendar. Otherwise, it selects the date. If the focus is on <Code>DatePickerTrigger</Code>, it opens/closes the popover.
381 |       </span>
382 |     ` ,
383 |     },
384 |     {
385 |       keys: ['Enter'],
386 |       description:`
387 |       <span>
388 |           When the focus is on either <Code>DatePickerNext</Code> or <Code>DatePickerPrev</Code>, it navigates the calendar. Otherwise, it selects the date. If the focus is on <Code>DatePickerTrigger</Code>, it opens/closes the popover.
389 |       </span>
390 |     ` ,
391 |     },
392 |     {
393 |       keys: ['ArrowLeft', 'ArrowRight'],
394 |       description:
395 |       `
396 |          Navigates between the date field segments. If the focus is on the <Code>DatePickerCalendar</Code>, it navigates between the dates.
397 |       `
398 |     },
399 |     {
400 |       keys: ['ArrowUp', 'ArrowDown'],
401 |       description: 'Increments/changes the value of the segment. If the focus is on the <Code>DatePickerCalendar</Code>, it navigates between the dates.'
402 |     },
403 |     {
404 |       keys: ['0-9'],
405 |       description: `
406 |           When the focus is on a numeric <Code>DatePickerInput</Code>, it types in the number and focuses the next segment if the next input would result in an invalid value.
407 |       `
408 |     },
409 |     {
410 |       keys: ['Backspace'],
411 |       description: 'Deletes a digit from the focused numeric segments.'
412 |     },
413 |     {
414 |       keys: ['A', 'P'],
415 |       description: 'When the focus is on the day period, it sets it to AM or PM.'
416 |     }
417 |   ]"
418 | />
419 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/date-range-field.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Date Range Field
  3 | description: Allows users to input a range of dates within a designated field.
  4 | name: date-range-field
  5 | ---
  6 | 
  7 | # Date Range Field
  8 | 
  9 | <Badge>Alpha</Badge>
 10 | 
 11 | <Description>
 12 | Allows users to input a range of dates within a designated field.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="DateRangeField" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation',
 22 |     'Can be controlled or uncontrolled',
 23 |     'Focus is fully managed',
 24 |     'Localization support',
 25 |     'Highly composable',
 26 |     'Accessible by default',
 27 |     'Supports both date and date-time formats'
 28 |   ]"
 29 | />
 30 | 
 31 | ## Preface
 32 | 
 33 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
 34 | 
 35 | We highly recommend reading through the documentation for the package to get a solid feel for how it works, and you'll need to install it in your project to use the date-related components.
 36 | 
 37 | ## Installation
 38 | 
 39 | Install the date package.
 40 | 
 41 | <InstallationTabs value="@internationalized/date" />
 42 | 
 43 | Install the component from your command line.
 44 | 
 45 | <InstallationTabs value="reka-ui" />
 46 | 
 47 | ## Anatomy
 48 | 
 49 | Import all parts and piece them together.
 50 | 
 51 | ```vue
 52 | <script setup>
 53 | import {
 54 |   DateRangeFieldInput,
 55 |   DateRangeFieldRoot,
 56 | } from 'reka-ui'
 57 | </script>
 58 | 
 59 | <template>
 60 |   <DateRangeFieldRoot>
 61 |     <DateRangeFieldInput />
 62 |   </DateRangeFieldRoot>
 63 | </template>
 64 | ```
 65 | 
 66 | ## API Reference
 67 | 
 68 | ### Root
 69 | 
 70 | Contains all the parts of a date field
 71 | 
 72 | <!-- @include: @/meta/DateRangeFieldRoot.md -->
 73 | 
 74 | <DataAttributesTable
 75 |   :data="[
 76 |     {
 77 |       attribute: '[data-readonly]',
 78 |       values: 'Present when readonly',
 79 |     },
 80 |     {
 81 |       attribute: '[data-disabled]',
 82 |       values: 'Present when disabled',
 83 |     },
 84 |     {
 85 |       attribute: '[data-invalid]',
 86 |       values: 'Present when invalid',
 87 |     }
 88 |   ]"
 89 | />
 90 | 
 91 | ### Input
 92 | 
 93 | Contains the date field segments
 94 | 
 95 | <!-- @include: @/meta/DateRangeFieldInput.md -->
 96 | 
 97 | <DataAttributesTable
 98 |   :data="[
 99 |     {
100 |       attribute: '[data-disabled]',
101 |       values: 'Present when disabled',
102 |     },
103 |     {
104 |       attribute: '[data-invalid]',
105 |       values: 'Present when invalid',
106 |     },
107 |     {
108 |       attribute: '[data-placeholder]',
109 |       values: 'Present when no value is set',
110 |     },
111 |   ]"
112 | />
113 | 
114 | ## Accessibility
115 | 
116 | ### Keyboard Interactions
117 | 
118 | <KeyboardTable
119 |   :data="[
120 |     {
121 |       keys: ['Tab'],
122 |       description: 'When focus moves onto the date field, focuses the first segment.'
123 |     },
124 |     {
125 |       keys: ['ArrowLeft', 'ArrowRight'],
126 |       description:
127 |       `
128 |        Navigates between the date field segments.
129 |       `
130 |     },
131 |     {
132 |       keys: ['ArrowUp', 'ArrowDown'],
133 |       description: 'Increments/changes the value of the segment.'
134 |     },
135 |     {
136 |       keys: ['0-9'],
137 |       description: `
138 |           When the focus is on a numeric <Code>DateFieldInput</Code>, it types in the number and focuses the next segment if the next input would result in an invalid value.
139 |       `
140 |     },
141 |     {
142 |       keys: ['Backspace'],
143 |       description:  'Deletes a digit from the focused numeric segments.'
144 |     },
145 |     {
146 |       keys: ['A', 'P'],
147 |       description: 'When the focus is on the day period, it sets it to AM or PM.'
148 |     }
149 |   ]"
150 | />
151 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/date-range-picker.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Date Range Picker
  3 | description: Facilitates the selection of date ranges through an input and calendar-based interface.
  4 | name: date-range-picker
  5 | ---
  6 | 
  7 | # Date Range Picker
  8 | 
  9 | <Badge>Alpha</Badge>
 10 | 
 11 | <Description>
 12 | Facilitates the selection of date ranges through an input and calendar-based interface.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="DateRangePicker" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation',
 22 |     'Can be controlled or uncontrolled',
 23 |     'Focus is fully managed',
 24 |     'Localization support',
 25 |     'Accessible by default',
 26 |     'Supports both date and date-time formats'
 27 |   ]"
 28 | />
 29 | 
 30 | ## Preface
 31 | 
 32 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
 33 | 
 34 | We highly recommend reading through the documentation for the package to get a solid feel for how it works, and you'll need to install it in your project to use the date-related components.
 35 | 
 36 | ## Installation
 37 | 
 38 | Install the date package.
 39 | 
 40 | <InstallationTabs value="@internationalized/date" />
 41 | 
 42 | Install the component from your command line.
 43 | 
 44 | <InstallationTabs value="reka-ui" />
 45 | 
 46 | ## Anatomy
 47 | 
 48 | Import all parts and piece them together.
 49 | 
 50 | ```vue
 51 | <script setup>
 52 | import {
 53 |   DateRangePickerAnchor,
 54 |   DateRangePickerArrow,
 55 |   DateRangePickerCalendar,
 56 |   DateRangePickerCell,
 57 |   DateRangePickerCellTrigger,
 58 |   DateRangePickerClose,
 59 |   DateRangePickerContent,
 60 |   DateRangePickerField,
 61 |   DateRangePickerGrid,
 62 |   DateRangePickerGridBody,
 63 |   DateRangePickerGridHead,
 64 |   DateRangePickerGridRow,
 65 |   DateRangePickerHeadCell,
 66 |   DateRangePickerHeader,
 67 |   DateRangePickerHeading,
 68 |   DateRangePickerInput,
 69 |   DateRangePickerNext,
 70 |   DateRangePickerPrev,
 71 |   DateRangePickerRoot,
 72 |   DateRangePickerTrigger,
 73 | } from 'reka-ui'
 74 | </script>
 75 | 
 76 | <template>
 77 |   <DateRangePickerRoot>
 78 |     <DateRangePickerField>
 79 |       <DateRangePickerInput />
 80 |       <DateRangePickerTrigger />
 81 |     </DateRangePickerField>
 82 | 
 83 |     <DateRangePickerAnchor />
 84 | 
 85 |     <DateRangePickerContent>
 86 |       <DateRangePickerClose />
 87 |       <DateRangePickerArrow />
 88 | 
 89 |       <DateRangePickerCalendar>
 90 |         <DateRangePickerHeader>
 91 |           <DateRangePickerPrev />
 92 |           <DateRangePickerHeading />
 93 |           <DateRangePickerNext />
 94 |         </DateRangePickerHeader>
 95 | 
 96 |         <DateRangePickerGrid>
 97 |           <DateRangePickerGridHead>
 98 |             <DateRangePickerGridRow>
 99 |               <DateRangePickerHeadCell />
100 |             </DateRangePickerGridRow>
101 |           </DateRangePickerGridHead>
102 | 
103 |           <DateRangePickerGridBody>
104 |             <DateRangePickerGridRow>
105 |               <DateRangePickerCell>
106 |                 <DateRangePickerCellTrigger />
107 |               </DateRangePickerCell>
108 |             </DateRangePickerGridRow>
109 |           </DateRangePickerGridBody>
110 |         </DateRangePickerGrid>
111 |       </DateRangePickerCalendar>
112 |     </DateRangePickerContent>
113 |   </DateRangePickerRoot>
114 | </template>
115 | ```
116 | 
117 | ## API Reference
118 | 
119 | ### Root
120 | 
121 | Contains all the parts of a date picker
122 | 
123 | <!-- @include: @/meta/DateRangePickerRoot.md -->
124 | 
125 | ### Field
126 | 
127 | Contains the date picker date field segments and trigger
128 | 
129 | <!-- @include: @/meta/DateRangePickerField.md -->
130 | 
131 | <DataAttributesTable
132 |   :data="[
133 |     {
134 |       attribute: '[data-readonly]',
135 |       values: 'Present when readonly',
136 |     },
137 |     {
138 |       attribute: '[data-disabled]',
139 |       values: 'Present when disabled',
140 |     },
141 |     {
142 |       attribute: '[data-invalid]',
143 |       values: 'Present when invalid',
144 |     }
145 |   ]"
146 | />
147 | 
148 | ### Input
149 | 
150 | Contains the date picker date field segments
151 | 
152 | <!-- @include: @/meta/DateRangePickerInput.md -->
153 | 
154 | <DataAttributesTable
155 |   :data="[
156 |     {
157 |       attribute: '[data-disabled]',
158 |       values: 'Present when disabled',
159 |     },
160 |     {
161 |       attribute: '[data-invalid]',
162 |       values: 'Present when invalid',
163 |     },
164 |     {
165 |       attribute: '[data-placeholder]',
166 |       values: 'Present when no value is set',
167 |     }
168 |   ]"
169 | />
170 | 
171 | ### Trigger
172 | 
173 | The button that toggles the popover. By default, the `DateRangePickerContent` will position itself against the trigger.
174 | 
175 | <!-- @include: @/meta/DateRangePickerTrigger.md -->
176 | 
177 | ### Content
178 | 
179 | The component that pops out when the popover is open.
180 | 
181 | <!-- @include: @/meta/DateRangePickerContent.md -->
182 | 
183 | ### Arrow
184 | 
185 | An optional arrow element to render alongside the popover. This can be used to help visually link the anchor with the `DateRangePickerContent`. Must be rendered inside `DateRangePickerContent`.
186 | 
187 | <!-- @include: @/meta/DateRangePickerArrow.md -->
188 | 
189 | ### Close
190 | 
191 | The button that closes an open date picker.
192 | 
193 | <!-- @include: @/meta/DateRangePickerClose.md -->
194 | 
195 | ### Anchor
196 | 
197 | An optional element to position the `DateRangePickerContent` against. If this part is not used, the content will position alongside the `DateRangePickerTrigger`.
198 | 
199 | <!-- @include: @/meta/DateRangePickerAnchor.md -->
200 | 
201 | ### Calendar
202 | 
203 | Contains all the parts of a calendar
204 | 
205 | <!-- @include: @/meta/DateRangePickerCalendar.md -->
206 | 
207 | <DataAttributesTable
208 |   :data="[
209 |     {
210 |       attribute: '[data-readonly]',
211 |       values: 'Present when readonly',
212 |     },
213 |     {
214 |       attribute: '[data-disabled]',
215 |       values: 'Present when disabled',
216 |     },
217 |     {
218 |       attribute: '[data-invalid]',
219 |       values: 'Present when invalid',
220 |     }
221 |   ]"
222 | />
223 | 
224 | ### Header
225 | 
226 | Contains the navigation buttons and the heading segments.
227 | 
228 | <!-- @include: @/meta/DateRangePickerHeader.md -->
229 | 
230 | ### Prev Button
231 | 
232 | Calendar navigation button. It navigates the calendar one month/year/decade in the past based on the current calendar view.
233 | 
234 | <!-- @include: @/meta/DateRangePickerPrev.md -->
235 | 
236 | <DataAttributesTable
237 |   :data="[
238 |     {
239 |       attribute: '[data-disabled]',
240 |       values: 'Present when disabled',
241 |     },
242 |   ]"
243 | />
244 | 
245 | ### Next Button
246 | 
247 | Calendar navigation button. It navigates the calendar one month/year/decade in the future based on the current calendar view.
248 | 
249 | <!-- @include: @/meta/DateRangePickerNext.md -->
250 | 
251 | <DataAttributesTable
252 |   :data="[
253 |     {
254 |       attribute: '[data-disabled]',
255 |       values: 'Present when disabled',
256 |     },
257 |   ]"
258 | />
259 | 
260 | ### Heading
261 | 
262 | Heading for displaying the current month and year
263 | 
264 | <!-- @include: @/meta/DateRangePickerHeading.md -->
265 | 
266 | <DataAttributesTable
267 |   :data="[
268 |     {
269 |       attribute: '[data-disabled]',
270 |       values: 'Present when disabled',
271 |     },
272 |   ]"
273 | />
274 | 
275 | ### Grid
276 | 
277 | Container for wrapping the calendar grid.
278 | 
279 | <!-- @include: @/meta/DateRangePickerGrid.md -->
280 | 
281 | <DataAttributesTable
282 |   :data="[
283 |     {
284 |       attribute: '[data-readonly]',
285 |       values: 'Present when readonly',
286 |     },
287 |     {
288 |       attribute: '[data-disabled]',
289 |       values: 'Present when disabled',
290 |     },
291 |   ]"
292 | />
293 | 
294 | ### Grid Head
295 | 
296 | Container for wrapping the grid head.
297 | 
298 | <!-- @include: @/meta/DateRangePickerGridHead.md -->
299 | 
300 | ### Grid Body
301 | 
302 | Container for wrapping the grid body.
303 | 
304 | <!-- @include: @/meta/DateRangePickerGridBody.md -->
305 | 
306 | ### Grid Row
307 | 
308 | Container for wrapping the grid row.
309 | 
310 | <!-- @include: @/meta/DateRangePickerGridRow.md -->
311 | 
312 | ### Head Cell
313 | 
314 | Container for wrapping the head cell. Used for displaying the week days.
315 | 
316 | <!-- @include: @/meta/DateRangePickerHeadCell.md -->
317 | 
318 | ### Cell
319 | 
320 | Container for wrapping the calendar cells.
321 | 
322 | <!-- @include: @/meta/DateRangePickerCell.md -->
323 | 
324 | <DataAttributesTable
325 |   :data="[
326 |     {
327 |       attribute: '[data-disabled]',
328 |       values: 'Present when disabled',
329 |     },
330 |   ]"
331 | />
332 | 
333 | ### Cell Trigger
334 | 
335 | Interactable container for displaying the cell dates. Clicking it selects the date.
336 | 
337 | <!-- @include: @/meta/DateRangePickerCellTrigger.md -->
338 | 
339 | <DataAttributesTable
340 |   :data="[
341 |     {
342 |       attribute: '[data-selected]',
343 |       values: 'Present when selected',
344 |     },
345 |     {
346 |       attribute: '[data-value]',
347 |       values: 'The ISO string value of the date.',
348 |     },
349 |     {
350 |       attribute: '[data-disabled]',
351 |       values: 'Present when disabled',
352 |     },
353 |     {
354 |       attribute: '[data-unavailable]',
355 |       values: 'Present when unavailable',
356 |     },
357 |     {
358 |       attribute: '[data-today]',
359 |       values: 'Present when today',
360 |     },
361 |     {
362 |       attribute: '[data-outside-view]',
363 |       values: 'Present when the date is outside the current month it is displayed in.',
364 |     },
365 |     {
366 |       attribute: '[data-outside-visible-view]',
367 |       values: 'Present when the date is outside the months that are visible on the calendar.',
368 |     },
369 |     {
370 |       attribute: '[data-selection-start]',
371 |       values: 'Present when the date is the start of the selection.',
372 |     },
373 |     {
374 |       attribute: '[data-selection-end]',
375 |       values: 'Present when the date is the end of the selection.',
376 |     },
377 |     {
378 |       attribute: '[data-highlighted]',
379 |       values: 'Present when the date is highlighted by the user as they select a range.',
380 |     },
381 |     {
382 |       attribute: '[data-highlighted-start]',
383 |       values: 'Present when the date is the start of the range that is highlighted by the user.',
384 |     },
385 |     {
386 |       attribute: '[data-highlighted-end]',
387 |       values: 'Present when the date is the end of the range that is highlighted by the user.',
388 |     },
389 |     {
390 |       attribute: '[data-focused]',
391 |       values: 'Present when focused',
392 |     }
393 |   ]"
394 | />
395 | 
396 | ## Accessibility
397 | 
398 | ### Keyboard Interactions
399 | 
400 | <KeyboardTable
401 |   :data="[
402 |     {
403 |       keys: ['Tab'],
404 |       description: 'When focus moves onto the date field, focuses the first segment.'
405 |     },
406 |     {
407 |       keys: ['Space'],
408 |       description:`
409 |       <span>
410 |           When the focus is on either <Code>DateRangePickerNext</Code> or <Code>DateRangePickerPrev</Code>, it navigates the calendar. Otherwise, it selects the date. If the focus is on <Code>DateRangePickerTrigger</Code>, it opens/closes the popover.
411 |       </span>
412 |     ` ,
413 |     },
414 |     {
415 |       keys: ['Enter'],
416 |       description:`
417 |       <span>
418 |           When the focus is on either <Code>DateRangePickerNext</Code> or <Code>DateRangePickerPrev</Code>, it navigates the calendar. Otherwise, it selects the date. If the focus is on <Code>DateRangePickerTrigger</Code>, it opens/closes the popover.
419 |       </span>
420 |     ` ,
421 |     },
422 |     {
423 |       keys: ['ArrowLeft', 'ArrowRight'],
424 |       description:
425 |       `
426 |          Navigates between the date field segments. If the focus is on the <Code>DateRangePickerCalendar</Code>, it navigates between the dates.
427 |       `
428 |     },
429 |     {
430 |       keys: ['ArrowUp', 'ArrowDown'],
431 |       description: 'Increments/changes the value of the segment. If the focus is on the <Code>DateRangePickerCalendar</Code>, it navigates between the dates.'
432 |     },
433 |     {
434 |       keys: ['0-9'],
435 |       description: `
436 |           When the focus is on a numeric <Code>DateRangePickerInput</Code>, it types in the number and focuses the next segment if the next input would result in an invalid value.
437 |       `
438 |     },
439 |     {
440 |       keys: ['Backspace'],
441 |       description: 'Deletes a digit from the focused numeric segments.'
442 |     },
443 |     {
444 |       keys: ['A', 'P'],
445 |       description: 'When the focus is on the day period, it sets it to AM or PM.'
446 |     }
447 |   ]"
448 | />
449 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/dialog.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Dialog
  4 | description: A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.
  5 | name: dialog
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal
  7 | ---
  8 | 
  9 | # Dialog
 10 | 
 11 | <Description>
 12 | A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Dialog" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Supports modal and non-modal modes.',
 22 |     'Focus is automatically trapped when modal.',
 23 |     'Can be controlled or uncontrolled.',
 24 |     '<span> Manages screen reader announcements with <Code>Title</Code> and<Code>Description</Code> components.</span>',
 25 |     'Esc closes the component automatically.',
 26 |   ]"
 27 | />
 28 | 
 29 | ## Installation
 30 | 
 31 | Install the component from your command line.
 32 | 
 33 | <InstallationTabs value="reka-ui" />
 34 | 
 35 | ## Anatomy
 36 | 
 37 | Import all parts and piece them together.
 38 | 
 39 | ```vue
 40 | <script setup>
 41 | import {
 42 |   DialogClose,
 43 |   DialogContent,
 44 |   DialogDescription,
 45 |   DialogOverlay,
 46 |   DialogPortal,
 47 |   DialogRoot,
 48 |   DialogTitle,
 49 |   DialogTrigger,
 50 | } from 'reka-ui'
 51 | </script>
 52 | 
 53 | <template>
 54 |   <DialogRoot>
 55 |     <DialogTrigger />
 56 |     <DialogPortal>
 57 |       <DialogOverlay />
 58 |       <DialogContent>
 59 |         <DialogTitle />
 60 |         <DialogDescription />
 61 |         <DialogClose />
 62 |       </DialogContent>
 63 |     </DialogPortal>
 64 |   </DialogRoot>
 65 | </template>
 66 | ```
 67 | 
 68 | ## API Reference
 69 | 
 70 | ### Root
 71 | 
 72 | Contains all the parts of a dialog
 73 | 
 74 | <!-- @include: @/meta/DialogRoot.md -->
 75 | 
 76 | ### Trigger
 77 | 
 78 | The button that opens the dialog
 79 | 
 80 | <!-- @include: @/meta/DialogTrigger.md -->
 81 | 
 82 | <DataAttributesTable
 83 |   :data="[
 84 |     {
 85 |       attribute: '[data-state]',
 86 |       values: ['open', 'closed'],
 87 |     },
 88 |   ]"
 89 | />
 90 | 
 91 | ### Portal
 92 | 
 93 | When used, portals your overlay and content parts into the `body`.
 94 | 
 95 | <!-- @include: @/meta/DialogPortal.md -->
 96 | 
 97 | ### Overlay
 98 | 
 99 | A layer that covers the inert portion of the view when the dialog is open.
100 | 
101 | <PresenceCallout />
102 | 
103 | <!-- @include: @/meta/DialogOverlay.md -->
104 | 
105 | <DataAttributesTable
106 |   :data="[
107 |     {
108 |       attribute: '[data-state]',
109 |       values: ['open', 'closed'],
110 |     },
111 |   ]"
112 | />
113 | 
114 | ### Content
115 | 
116 | Contains content to be rendered in the open dialog
117 | 
118 | <PresenceCallout />
119 | 
120 | <!-- @include: @/meta/DialogContent.md -->
121 | 
122 | <DataAttributesTable
123 |   :data="[
124 |     {
125 |       attribute: '[data-state]',
126 |       values: ['open', 'closed'],
127 |     },
128 |   ]"
129 | />
130 | 
131 | ### Close
132 | 
133 | The button that closes the dialog
134 | 
135 | <!-- @include: @/meta/DialogClose.md -->
136 | 
137 | ### Title
138 | 
139 | An accessible title to be announced when the dialog is opened.
140 | 
141 | If you want to hide the title, wrap it inside our Visually Hidden utility like this `<VisuallyHidden asChild>`.
142 | 
143 | <!-- @include: @/meta/DialogTitle.md -->
144 | 
145 | ### Description
146 | 
147 | An optional accessible description to be announced when the dialog is opened.
148 | 
149 | If you want to hide the description, wrap it inside our Visually Hidden utility like this `<VisuallyHidden asChild>`. If you want to remove the description entirely, remove this part and pass `:aria-describedby="undefined"` to `DialogContent`.
150 | 
151 | <!-- @include: @/meta/DialogDescription.md -->
152 | 
153 | ## Examples
154 | 
155 | ### Nested dialog
156 | 
157 | You can nest multiple layers of dialogs.
158 | 
159 | <ComponentPreview name="DialogNested" />
160 | 
161 | ### Close after asynchronous form submission
162 | 
163 | Use the controlled props to programmatically close the Dialog after an async operation has completed.
164 | 
165 | ```vue line=4,5,15-19,22-24
166 | <script setup>
167 | import { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'reka-ui'
168 | 
169 | const wait = () => new Promise(resolve => setTimeout(resolve, 1000))
170 | const open = ref(false)
171 | </script>
172 | 
173 | <template>
174 |   <DialogRoot v-model:open="open">
175 |     <DialogTrigger>Open</DialogTrigger>
176 |     <DialogPortal>
177 |       <DialogOverlay />
178 |       <DialogContent>
179 |         <form
180 |           @submit.prevent="
181 |             (event) => {
182 |               wait().then(() => (open = false));
183 |             }
184 |           "
185 |         >
186 |           <!-- some inputs -->
187 |           <button type="submit">
188 |             Submit
189 |           </button>
190 |         </form>
191 |       </DialogContent>
192 |     </DialogPortal>
193 |   </DialogRoot>
194 | </template>
195 | ```
196 | 
197 | ### Scrollable overlay
198 | 
199 | Move the content inside the overlay to render a dialog with overflow.
200 | 
201 | ```vue
202 | // index.vue
203 | <script setup>
204 | import { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'reka-ui'
205 | import './styles.css'
206 | </script>
207 | 
208 | <template>
209 |   <DialogRoot>
210 |     <DialogTrigger />
211 |     <DialogPortal>
212 |       <DialogOverlay class="DialogOverlay">
213 |         <DialogContent class="DialogContent">
214 |           ...
215 |         </DialogContent>
216 |       </DialogOverlay>
217 |     </DialogPortal>
218 |   </DialogRoot>
219 | </template>
220 | ```
221 | 
222 | ```css
223 | /* styles.css */
224 | .DialogOverlay {
225 |   background: rgba(0 0 0 / 0.5);
226 |   position: fixed;
227 |   top: 0;
228 |   left: 0;
229 |   right: 0;
230 |   bottom: 0;
231 |   display: grid;
232 |   place-items: center;
233 |   overflow-y: auto;
234 | }
235 | 
236 | .DialogContent {
237 |   min-width: 300px;
238 |   background: white;
239 |   padding: 30px;
240 |   border-radius: 4px;
241 | }
242 | ```
243 | 
244 | However, there's a caveat to this approach, where user might click on the scrollbar and close the dialog unintentionally. There's no universal solution that would fix this issue for now, however you can add the following snippet to `DialogContent` to prevent closing of modal when clicking on scrollbar.
245 | 
246 | ```vue
247 | <DialogContent
248 |   @pointer-down-outside="(event) => {
249 |     const originalEvent = event.detail.originalEvent;
250 |     const target = originalEvent.target as HTMLElement;
251 |     if (originalEvent.offsetX > target.clientWidth || originalEvent.offsetY > target.clientHeight) {
252 |       event.preventDefault();
253 |     }
254 |   }"
255 | >
256 | ```
257 | 
258 | ### Custom portal container
259 | 
260 | Customise the element that your dialog portals into.
261 | 
262 | ```vue line=4,11,17
263 | <script setup>
264 | import { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'reka-ui'
265 | 
266 | const container = ref(null)
267 | </script>
268 | 
269 | <template>
270 |   <div>
271 |     <DialogRoot>
272 |       <DialogTrigger />
273 |       <DialogPortal to="container">
274 |         <DialogOverlay />
275 |         <DialogContent>...</DialogContent>
276 |       </DialogPortal>
277 |     </DialogRoot>
278 | 
279 |     <div ref="container" />
280 |   </div>
281 | </template>
282 | ```
283 | 
284 | ### Disable close on Interaction outside
285 | 
286 | For example, if you have some global Toaster component that should not close the Dialog when clicking on it.
287 | 
288 | <ComponentPreview name="DialogToaster" />
289 | 
290 | ## Accessibility
291 | 
292 | Adheres to the [Dialog WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/).
293 | 
294 | ### Close icon button
295 | 
296 | When providing an icon (or font icon), remember to label it correctly for screen reader users.
297 | 
298 | ```vue line=9-11
299 | <template>
300 |   <DialogRoot>
301 |     <DialogTrigger />
302 |     <DialogPortal>
303 |       <DialogOverlay />
304 |       <DialogContent>
305 |         <DialogTitle />
306 |         <DialogDescription />
307 |         <DialogClose aria-label="Close">
308 |           <span aria-hidden="true">×</span>
309 |         </DialogClose>
310 |       </DialogContent>
311 |     </DialogPortal>
312 |   </DialogRoot>
313 | </template>
314 | ```
315 | 
316 | ### Close using slot props
317 | 
318 | Alternatively, you can use the `close` method provided by the `DialogRoot` slot props to programmatically close the dialog.
319 | 
320 | ```vue line=4,8,16-20
321 | <script setup>
322 | import { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'reka-ui'
323 | </script>
324 | 
325 | <template>
326 |   <DialogRoot v-slot="{ close }">
327 |     <DialogTrigger>Open</DialogTrigger>
328 |     <DialogPortal>
329 |       <DialogOverlay />
330 |       <DialogContent>
331 |         <form>
332 |           <!-- some inputs -->
333 |           <button type="submit" @click="close">
334 |             Submit
335 |           </button>
336 |         </form>
337 |       </DialogContent>
338 |       <DialogFooter>
339 |         <button type="submit" @click="close">
340 |           Submit
341 |         </button>
342 |       </DialogFooter>
343 |     </DialogPortal>
344 |   </DialogRoot>
345 | </template>
346 | ```
347 | 
348 | ### Keyboard Interactions
349 | 
350 | <KeyboardTable
351 |   :data="[
352 |     {
353 |       keys: ['Space'],
354 |       description: 'Opens/closes the dialog',
355 |     },
356 |     {
357 |       keys: ['Enter'],
358 |       description: 'Opens/closes the dialog',
359 |     },
360 |     {
361 |       keys: ['Tab'],
362 |       description: 'Moves focus to the next focusable element.',
363 |     },
364 |     {
365 |       keys: ['Shift + Tab'],
366 |       description: 'Moves focus to the previous focusable element.',
367 |     },
368 |     {
369 |       keys: ['Esc'],
370 |       description: '<span>Closes the dialog and moves focus to <Code>DialogTrigger</Code>.</span>',
371 |     },
372 |   ]"
373 | />
374 | 
375 | ## Custom APIs
376 | 
377 | Create your own API by abstracting the primitive parts into your own component.
378 | 
379 | ### Abstract the overlay and the close button
380 | 
381 | This example abstracts the `DialogOverlay` and `DialogClose` parts.
382 | 
383 | #### Usage
384 | 
385 | ```vue
386 | <script setup>
387 | import { Dialog, DialogContent, DialogTrigger } from './your-dialog'
388 | </script>
389 | 
390 | <template>
391 |   <Dialog>
392 |     <DialogTrigger>Dialog trigger</DialogTrigger>
393 |     <DialogContent>Dialog Content</DialogContent>
394 |   </Dialog>
395 | </template>
396 | ```
397 | 
398 | #### Implementation
399 | 
400 | ```ts
401 | // your-dialog.ts
402 | export { default as DialogContent } from 'DialogContent.vue'
403 | export { DialogRoot as Dialog, DialogTrigger } from 'reka-ui'
404 | ```
405 | 
406 | ```vue
407 | <!-- DialogContent.vue -->
408 | <script setup lang="ts">
409 | import type { DialogContentEmits, DialogContentProps } from 'reka-ui'
410 | import { Cross2Icon } from '@radix-icons/vue'
411 | import { DialogClose, DialogContent, DialogOverlay, DialogPortal, useForwardPropsEmits } from 'reka-ui'
412 | 
413 | const props = defineProps<DialogContentProps>()
414 | const emits = defineEmits<DialogContentEmits>()
415 | 
416 | const forwarded = useForwardPropsEmits(props, emits)
417 | </script>
418 | 
419 | <template>
420 |   <DialogPortal>
421 |     <DialogOverlay />
422 |     <DialogContent v-bind="forwarded">
423 |       <slot />
424 | 
425 |       <DialogClose>
426 |         <Cross2Icon />
427 |         <span class="sr-only">Close</span>
428 |       </DialogClose>
429 |     </DialogContent>
430 |   </DialogPortal>
431 | </template>
432 | ```
433 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/dropdown-menu.md:
--------------------------------------------------------------------------------
   1 | ---
   2 | 
   3 | title: Dropdown Menu
   4 | description: Displays a menu to the user—such as a set of actions or functions—triggered by a button.
   5 | name: dropdown-menu
   6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/menubutton
   7 | ---
   8 | 
   9 | # DropdownMenu
  10 | 
  11 | <Description>
  12 | Displays a menu to the user—such as a set of actions or functions—triggered by a button.
  13 | </Description>
  14 | 
  15 | <ComponentPreview name="DropdownMenu" />
  16 | 
  17 | ## Features
  18 | 
  19 | <Highlights
  20 |   :features="[
  21 |     'Can be controlled or uncontrolled.',
  22 |     'Supports submenus with configurable reading direction.',
  23 |     'Supports items, labels, groups of items.',
  24 |     'Supports checkable items (single or multiple) with optional indeterminate state.',
  25 |     'Supports modal and non-modal modes.',
  26 |     'Customize side, alignment, offsets, collision handling.',
  27 |     'Optionally render a pointing arrow.',
  28 |     'Focus is fully managed.',
  29 |     'Full keyboard navigation.',
  30 |     'Typeahead support.',
  31 |     'Dismissing and layering behavior is highly customizable.',
  32 |   ]"
  33 | />
  34 | 
  35 | ## Installation
  36 | 
  37 | Install the component from your command line.
  38 | 
  39 | <InstallationTabs value="reka-ui" />
  40 | 
  41 | ## Anatomy
  42 | 
  43 | Import all parts and piece them together.
  44 | 
  45 | ```vue
  46 | <script setup lang="ts">
  47 | import {
  48 |   DropdownMenuArrow,
  49 |   DropdownMenuCheckboxItem,
  50 |   DropdownMenuContent,
  51 |   DropdownMenuGroup,
  52 |   DropdownMenuItem,
  53 |   DropdownMenuItemIndicator,
  54 |   DropdownMenuLabel,
  55 |   DropdownMenuPortal,
  56 |   DropdownMenuRadioGroup,
  57 |   DropdownMenuRadioItem,
  58 |   DropdownMenuRoot,
  59 |   DropdownMenuSeparator,
  60 |   DropdownMenuSub,
  61 |   DropdownMenuSubContent,
  62 |   DropdownMenuSubTrigger,
  63 |   DropdownMenuTrigger,
  64 | } from 'reka-ui'
  65 | </script>
  66 | 
  67 | <template>
  68 |   <DropdownMenuRoot>
  69 |     <DropdownMenuTrigger />
  70 | 
  71 |     <DropdownMenuPortal>
  72 |       <DropdownMenuContent>
  73 |         <DropdownMenuLabel />
  74 |         <DropdownMenuItem />
  75 | 
  76 |         <DropdownMenuGroup>
  77 |           <DropdownMenuItem />
  78 |         </DropdownMenuGroup>
  79 | 
  80 |         <DropdownMenuCheckboxItem>
  81 |           <DropdownMenuItemIndicator />
  82 |         </DropdownMenuCheckboxItem>
  83 | 
  84 |         <DropdownMenuRadioGroup>
  85 |           <DropdownMenuRadioItem>
  86 |             <DropdownMenuItemIndicator />
  87 |           </DropdownMenuRadioItem>
  88 |         </DropdownMenuRadioGroup>
  89 | 
  90 |         <DropdownMenuSub>
  91 |           <DropdownMenuSubTrigger />
  92 |           <DropdownMenuPortal>
  93 |             <DropdownMenuSubContent />
  94 |           </DropdownMenuPortal>
  95 |         </DropdownMenuSub>
  96 | 
  97 |         <DropdownMenuSeparator />
  98 |         <DropdownMenuArrow />
  99 |       </DropdownMenuContent>
 100 |     </DropdownMenuPortal>
 101 |   </DropdownMenuRoot>
 102 | </template>
 103 | ```
 104 | 
 105 | ## API Reference
 106 | 
 107 | ### Root
 108 | 
 109 | Contains all the parts of a dropdown menu.
 110 | 
 111 | <!-- @include: @/meta/DropdownMenuRoot.md -->
 112 | 
 113 | ### Trigger
 114 | 
 115 | The button that toggles the dropdown menu. By default, the `DropdownMenuContent` will position itself against the trigger.
 116 | 
 117 | <!-- @include: @/meta/DropdownMenuTrigger.md -->
 118 | 
 119 | <DataAttributesTable
 120 |   :data="[
 121 |     {
 122 |       attribute: '[data-state]',
 123 |       values: ['open', 'closed'],
 124 |     },
 125 |     {
 126 |       attribute: '[data-disabled]',
 127 |       values: 'Present when disabled',
 128 |     },
 129 |   ]"
 130 | />
 131 | 
 132 | ### Portal
 133 | 
 134 | When used, portals the content part into the `body`.
 135 | 
 136 | <!-- @include: @/meta/DropdownMenuPortal.md -->
 137 | 
 138 | ### Content
 139 | 
 140 | The component that pops out when the dropdown menu is open.
 141 | 
 142 | <!-- @include: @/meta/DropdownMenuContent.md -->
 143 | 
 144 | <DataAttributesTable
 145 |   :data="[
 146 |     {
 147 |       attribute: '[data-state]',
 148 |       values: ['open', 'closed'],
 149 |     },
 150 |     {
 151 |       attribute: '[data-side]',
 152 |       values: ['left', 'right', 'bottom', 'top'],
 153 |     },
 154 |     {
 155 |       attribute: '[data-align]',
 156 |       values: ['start', 'end', 'center'],
 157 |     },
 158 |     {
 159 |       attribute: '[data-orientation]',
 160 |       values: ['vertical', 'horizontal'],
 161 |     },
 162 |   ]"
 163 | />
 164 | 
 165 | <CssVariablesTable
 166 |   :data="[
 167 |     {
 168 |       cssVariable: '--reka-dropdown-menu-content-transform-origin',
 169 |       description: 'The <Code>transform-origin</Code> computed from the content and arrow positions/offsets'
 170 |     },
 171 |     {
 172 |       cssVariable: '--reka-dropdown-menu-content-available-width',
 173 |       description: 'The remaining width between the trigger and the boundary edge'
 174 |     },
 175 |     {
 176 |       cssVariable: '--reka-dropdown-menu-content-available-height',
 177 |       description: 'The remaining height between the trigger and the boundary edge'
 178 |     },
 179 |     {
 180 |       cssVariable: '--reka-dropdown-menu-trigger-width',
 181 |       description: 'The width of the trigger',
 182 |     },
 183 |     {
 184 |       cssVariable: '--reka-dropdown-menu-trigger-height',
 185 |       description: 'The height of the trigger',
 186 |     },
 187 |   ]"
 188 | />
 189 | 
 190 | ### Arrow
 191 | 
 192 | An optional arrow element to render alongside the dropdown menu. This can be used to help visually link the trigger with the `DropdownMenuContent`. Must be rendered inside `DropdownMenuContent`.
 193 | 
 194 | <!-- @include: @/meta/DropdownMenuArrow.md -->
 195 | 
 196 | ### Item
 197 | 
 198 | The component that contains the dropdown menu items.
 199 | 
 200 | <!-- @include: @/meta/DropdownMenuItem.md -->
 201 | 
 202 | <DataAttributesTable
 203 |   :data="[
 204 |     {
 205 |       attribute: '[data-orientation]',
 206 |       values: ['vertical', 'horizontal'],
 207 |     },
 208 |     {
 209 |       attribute: '[data-highlighted]',
 210 |       values: 'Present when highlighted',
 211 |     },
 212 |     {
 213 |       attribute: '[data-disabled]',
 214 |       values: 'Present when disabled',
 215 |     },
 216 |   ]"
 217 | />
 218 | 
 219 | ### Group
 220 | 
 221 | Used to group multiple `DropdownMenuItem`s.
 222 | 
 223 | <!-- @include: @/meta/DropdownMenuGroup.md -->
 224 | 
 225 | ### Label
 226 | 
 227 | Used to render a label. It won't be focusable using arrow keys.
 228 | 
 229 | <!-- @include: @/meta/DropdownMenuLabel.md -->
 230 | 
 231 | ### CheckboxItem
 232 | 
 233 | An item that can be controlled and rendered like a checkbox.
 234 | 
 235 | <!-- @include: @/meta/DropdownMenuCheckboxItem.md -->
 236 | 
 237 | <DataAttributesTable
 238 |   :data="[
 239 |     {
 240 |       attribute: '[data-state]',
 241 |       values: ['checked', 'unchecked', 'indeterminate'],
 242 |     },
 243 |     {
 244 |       attribute: '[data-highlighted]',
 245 |       values: 'Present when highlighted',
 246 |     },
 247 |     {
 248 |       attribute: '[data-disabled]',
 249 |       values: 'Present when disabled',
 250 |     },
 251 |   ]"
 252 | />
 253 | 
 254 | ### RadioGroup
 255 | 
 256 | Used to group multiple `DropdownMenuRadioItem`s.
 257 | 
 258 | <!-- @include: @/meta/DropdownMenuRadioGroup.md -->
 259 | 
 260 | ### RadioItem
 261 | 
 262 | An item that can be controlled and rendered like a radio.
 263 | 
 264 | <!-- @include: @/meta/DropdownMenuRadioItem.md -->
 265 | 
 266 | <DataAttributesTable
 267 |   :data="[
 268 |     {
 269 |       attribute: '[data-state]',
 270 |       values: ['checked', 'unchecked', 'indeterminate'],
 271 |     },
 272 |     {
 273 |       attribute: '[data-highlighted]',
 274 |       values: 'Present when highlighted',
 275 |     },
 276 |     {
 277 |       attribute: '[data-disabled]',
 278 |       values: 'Present when disabled',
 279 |     },
 280 |   ]"
 281 | />
 282 | 
 283 | ### ItemIndicator
 284 | 
 285 | Renders when the parent `DropdownMenuCheckboxItem` or `DropdownMenuRadioItem` is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
 286 | 
 287 | <!-- @include: @/meta/DropdownMenuItemIndicator.md -->
 288 | 
 289 | <DataAttributesTable
 290 |   :data="[
 291 |     {
 292 |       attribute: '[data-state]',
 293 |       values: ['checked', 'unchecked', 'indeterminate'],
 294 |     },
 295 |   ]"
 296 | />
 297 | 
 298 | ### Separator
 299 | 
 300 | Used to visually separate items in the dropdown menu.
 301 | 
 302 | <!-- @include: @/meta/DropdownMenuSeparator.md -->
 303 | 
 304 | ### Sub
 305 | 
 306 | Contains all the parts of a submenu.
 307 | 
 308 | <!-- @include: @/meta/DropdownMenuSub.md -->
 309 | 
 310 | ### SubTrigger
 311 | 
 312 | An item that opens a submenu. Must be rendered inside `DropdownMenuSub`.
 313 | 
 314 | <!-- @include: @/meta/DropdownMenuSubTrigger.md -->
 315 | 
 316 | <DataAttributesTable
 317 |   :data="[
 318 |     {
 319 |       attribute: '[data-state]',
 320 |       values: ['open', 'closed'],
 321 |     },
 322 |     {
 323 |       attribute: '[data-highlighted]',
 324 |       values: 'Present when highlighted',
 325 |     },
 326 |     {
 327 |       attribute: '[data-disabled]',
 328 |       values: 'Present when disabled',
 329 |     },
 330 |   ]"
 331 | />
 332 | 
 333 | <CssVariablesTable
 334 |   :data="[
 335 |     {
 336 |       cssVariable: '--reka-dropdown-menu-content-transform-origin',
 337 |       description: 'The <Code>transform-origin</Code> computed from the content and arrow positions/offsets',
 338 |     },
 339 |     {
 340 |       cssVariable: '--reka-dropdown-menu-content-available-width',
 341 |       description: `
 342 |         The remaining width between the trigger and the boundary edge
 343 |       `,
 344 |     },
 345 |     {
 346 |       cssVariable: '--reka-dropdown-menu-content-available-height',
 347 |       description: 'The remaining height between the trigger and the boundary edge',
 348 |     },
 349 |     {
 350 |       cssVariable: '--reka-dropdown-menu-trigger-width',
 351 |       description: 'The width of the trigger',
 352 |     },
 353 |     {
 354 |       cssVariable: '--reka-dropdown-menu-trigger-height',
 355 |       description: 'The height of the trigger'
 356 |     },
 357 |   ]"
 358 | />
 359 | 
 360 | ### SubContent
 361 | 
 362 | The component that pops out when a submenu is open. Must be rendered inside `DropdownMenuSub`.
 363 | 
 364 | <!-- @include: @/meta/DropdownMenuSubContent.md -->
 365 | 
 366 | <DataAttributesTable
 367 |   :data="[
 368 |     {
 369 |       attribute: '[data-state]',
 370 |       values: ['open', 'closed'],
 371 |     },
 372 |     {
 373 |       attribute: '[data-side]',
 374 |       values: ['left', 'right', 'bottom', 'top'],
 375 |     },
 376 |     {
 377 |       attribute: '[data-align]',
 378 |       values: ['start', 'end', 'center'],
 379 |     },
 380 |     {
 381 |       attribute: '[data-orientation]',
 382 |       values: ['vertical', 'horizontal'],
 383 |     },
 384 |   ]"
 385 | />
 386 | 
 387 | ## Examples
 388 | 
 389 | ### With submenus
 390 | 
 391 | You can create submenus by using `DropdownMenuSub` in combination with its parts.
 392 | 
 393 | ```vue line=9-11,24-33
 394 | <script setup lang="ts">
 395 | import {
 396 |   DropdownMenuArrow,
 397 |   DropdownMenuContent,
 398 |   DropdownMenuItem,
 399 |   DropdownMenuPortal,
 400 |   DropdownMenuRoot,
 401 |   DropdownMenuSeparator,
 402 |   DropdownMenuSub,
 403 |   DropdownMenuSubContent,
 404 |   DropdownMenuSubTrigger,
 405 |   DropdownMenuTrigger,
 406 | } from 'reka-ui'
 407 | </script>
 408 | 
 409 | <template>
 410 |   <DropdownMenuRoot>
 411 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 412 |     <DropdownMenuPortal>
 413 |       <DropdownMenuContent>
 414 |         <DropdownMenuItem>…</DropdownMenuItem>
 415 |         <DropdownMenuItem>…</DropdownMenuItem>
 416 |         <DropdownMenuSeparator />
 417 |         <DropdownMenuSub>
 418 |           <DropdownMenuSubTrigger>Sub menu →</DropdownMenuSubTrigger>
 419 |           <DropdownMenuPortal>
 420 |             <DropdownMenuSubContent>
 421 |               <DropdownMenuItem>Sub menu item</DropdownMenuItem>
 422 |               <DropdownMenuItem>Sub menu item</DropdownMenuItem>
 423 |               <DropdownMenuArrow />
 424 |             </DropdownMenuSubContent>
 425 |           </DropdownMenuPortal>
 426 |         </DropdownMenuSub>
 427 |         <DropdownMenuSeparator />
 428 |         <DropdownMenuItem>…</DropdownMenuItem>
 429 |       </DropdownMenuContent>
 430 |     </DropdownMenuPortal>
 431 |   </DropdownMenuRoot>
 432 | </template>
 433 | ```
 434 | 
 435 | ### With disabled items
 436 | 
 437 | You can add special styles to disabled items via the `data-disabled` attribute.
 438 | 
 439 | ```vue line=18
 440 | <script setup lang="ts">
 441 | import {
 442 |   DropdownMenuContent,
 443 |   DropdownMenuItem,
 444 |   DropdownMenuPortal,
 445 |   DropdownMenuRoot,
 446 |   DropdownMenuTrigger,
 447 | } from 'reka-ui'
 448 | </script>
 449 | 
 450 | <template>
 451 |   <DropdownMenuRoot>
 452 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 453 |     <DropdownMenuPortal>
 454 |       <DropdownMenuContent>
 455 |         <DropdownMenuItem
 456 |           class="DropdownMenuItem"
 457 |           disabled
 458 |         >
 459 |           …
 460 |         </DropdownMenuItem>
 461 |         <DropdownMenuItem class="DropdownMenuItem">
 462 |           …
 463 |         </DropdownMenuItem>
 464 |       </DropdownMenuContent>
 465 |     </DropdownMenuPortal>
 466 |   </DropdownMenuRoot>
 467 | </template>
 468 | ```
 469 | 
 470 | ```css line=2
 471 | /* styles.css */
 472 | .DropdownMenuItem[data-disabled] {
 473 |   color: gainsboro;
 474 | }
 475 | ```
 476 | 
 477 | ### With separators
 478 | 
 479 | Use the `Separator` part to add a separator between items.
 480 | 
 481 | ```vue line=7,18,20
 482 | <script setup lang="ts">
 483 | import {
 484 |   DropdownMenuContent,
 485 |   DropdownMenuItem,
 486 |   DropdownMenuPortal,
 487 |   DropdownMenuRoot,
 488 |   DropdownMenuSeparator,
 489 |   DropdownMenuTrigger,
 490 | } from 'reka-ui'
 491 | </script>
 492 | 
 493 | <template>
 494 |   <DropdownMenuRoot>
 495 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 496 |     <DropdownMenuPortal>
 497 |       <DropdownMenuContent>
 498 |         <DropdownMenuItem>…</DropdownMenuItem>
 499 |         <DropdownMenuSeparator />
 500 |         <DropdownMenuItem>…</DropdownMenuItem>
 501 |         <DropdownMenuSeparator />
 502 |         <DropdownMenuItem>…</DropdownMenuItem>
 503 |       </DropdownMenuContent>
 504 |     </DropdownMenuPortal>
 505 |   </DropdownMenuRoot>
 506 | </template>
 507 | ```
 508 | 
 509 | ### With labels
 510 | 
 511 | Use the `Label` part to help label a section.
 512 | 
 513 | ```vue line=5,17
 514 | <script setup lang="ts">
 515 | import {
 516 |   DropdownMenuContent,
 517 |   DropdownMenuItem,
 518 |   DropdownMenuLabel,
 519 |   DropdownMenuPortal,
 520 |   DropdownMenuRoot,
 521 |   DropdownMenuTrigger,
 522 | } from 'reka-ui'
 523 | </script>
 524 | 
 525 | <template>
 526 |   <DropdownMenuRoot>
 527 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 528 |     <DropdownMenuPortal>
 529 |       <DropdownMenuContent>
 530 |         <DropdownMenuLabel>Label</DropdownMenuLabel>
 531 |         <DropdownMenuItem>…</DropdownMenuItem>
 532 |         <DropdownMenuItem>…</DropdownMenuItem>
 533 |         <DropdownMenuItem>…</DropdownMenuItem>
 534 |       </DropdownMenuContent>
 535 |     </DropdownMenuPortal>
 536 |   </DropdownMenuRoot>
 537 | </template>
 538 | ```
 539 | 
 540 | ### With checkbox items
 541 | 
 542 | Use the `CheckboxItem` part to add an item that can be checked.
 543 | 
 544 | ```vue line=5,26-31
 545 | <script setup lang="ts">
 546 | import { Icon } from '@iconify/vue'
 547 | import {
 548 |   DropdownMenuCheckboxItem,
 549 |   DropdownMenuContent,
 550 |   DropdownMenuItem,
 551 |   DropdownMenuItemIndicator,
 552 |   DropdownMenuPortal,
 553 |   DropdownMenuRoot,
 554 |   DropdownMenuSeparator,
 555 |   DropdownMenuTrigger,
 556 | } from 'reka-ui'
 557 | import { ref } from 'vue'
 558 | 
 559 | const checked = ref(false)
 560 | </script>
 561 | 
 562 | <template>
 563 |   <DropdownMenuRoot>
 564 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 565 |     <DropdownMenuPortal>
 566 |       <DropdownMenuContent>
 567 |         <DropdownMenuItem>…</DropdownMenuItem>
 568 |         <DropdownMenuItem>…</DropdownMenuItem>
 569 |         <DropdownMenuSeparator />
 570 |         <DropdownMenuCheckboxItem v-model="checked">
 571 |           <DropdownMenuItemIndicator>
 572 |             <Icon icon="radix-icons:check" />
 573 |           </DropdownMenuItemIndicator>
 574 |           Checkbox item
 575 |         </DropdownMenuCheckboxItem>
 576 |       </DropdownMenuContent>
 577 |     </DropdownMenuPortal>
 578 |   </DropdownMenuRoot>
 579 | </template>
 580 | ```
 581 | 
 582 | ### With radio items
 583 | 
 584 | Use the `RadioGroup` and `RadioItem` parts to add an item that can be checked amongst others.
 585 | 
 586 | ```vue line=8-9,22-41
 587 | <script setup lang="ts">
 588 | import { Icon } from '@iconify/vue'
 589 | import {
 590 |   DropdownMenuContent,
 591 |   DropdownMenuItemIndicator,
 592 |   DropdownMenuPortal,
 593 |   DropdownMenuRadioGroup,
 594 |   DropdownMenuRadioItem,
 595 |   DropdownMenuRoot,
 596 |   DropdownMenuTrigger,
 597 | } from 'reka-ui'
 598 | import { ref } from 'vue'
 599 | 
 600 | const color = ref(false)
 601 | </script>
 602 | 
 603 | <template>
 604 |   <DropdownMenuRoot>
 605 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 606 |     <DropdownMenuPortal>
 607 |       <DropdownMenuContent>
 608 |         <DropdownMenuRadioGroup v-model="color">
 609 |           <DropdownMenuRadioItem value="red">
 610 |             <DropdownMenuItemIndicator>
 611 |               <Icon icon="radix-icons:check" />
 612 |             </DropdownMenuItemIndicator>
 613 |             Red
 614 |           </DropdownMenuRadioItem>
 615 |           <DropdownMenuRadioItem value="blue">
 616 |             <DropdownMenuItemIndicator>
 617 |               <Icon icon="radix-icons:check" />
 618 |             </DropdownMenuItemIndicator>
 619 |             Blue
 620 |           </DropdownMenuRadioItem>
 621 |           <DropdownMenuRadioItem value="green">
 622 |             <DropdownMenuItemIndicator>
 623 |               <Icon icon="radix-icons:check" />
 624 |             </DropdownMenuItemIndicator>
 625 |             Green
 626 |           </DropdownMenuRadioItem>
 627 |         </DropdownMenuRadioGroup>
 628 |       </DropdownMenuContent>
 629 |     </DropdownMenuPortal>
 630 |   </DropdownMenuRoot>
 631 | </template>
 632 | ```
 633 | 
 634 | ### With complex items
 635 | 
 636 | You can add extra decorative elements in the `Item` parts, such as images.
 637 | 
 638 | ```vue line=17,21
 639 | <script setup lang="ts">
 640 | import {
 641 |   DropdownMenuContent,
 642 |   DropdownMenuItem,
 643 |   DropdownMenuPortal,
 644 |   DropdownMenuRoot,
 645 |   DropdownMenuTrigger,
 646 | } from 'reka-ui'
 647 | </script>
 648 | 
 649 | <template>
 650 |   <DropdownMenuRoot>
 651 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 652 |     <DropdownMenuPortal>
 653 |       <DropdownMenuContent>
 654 |         <DropdownMenuItem>
 655 |           <img src="…">
 656 |           Adolfo Hess
 657 |         </DropdownMenuItem>
 658 |         <DropdownMenuItem>
 659 |           <img src="…">
 660 |           Miyah Myles
 661 |         </DropdownMenuItem>
 662 |       </DropdownMenuContent>
 663 |     </DropdownMenuPortal>
 664 |   </DropdownMenuRoot>
 665 | </template>
 666 | ```
 667 | 
 668 | ### Constrain the content/sub-content size
 669 | 
 670 | You may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.
 671 | 
 672 | We expose several CSS custom properties such as `--reka-dropdown-menu-trigger-width` and `--reka-dropdown-menu-content-available-height` to support this. Use them to constrain the content dimensions.
 673 | 
 674 | ```vue line=9-12
 675 | <script setup lang="ts">
 676 | import { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'reka-ui'
 677 | </script>
 678 | 
 679 | <template>
 680 |   <DropdownMenuRoot>
 681 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 682 |     <DropdownMenuPortal>
 683 |       <DropdownMenuContent
 684 |         class="DropdownMenuContent"
 685 |         :side-offset="5"
 686 |       >
 687 |         …
 688 |       </DropdownMenuContent>
 689 |     </DropdownMenuPortal>
 690 |   </DropdownMenuRoot>
 691 | </template>
 692 | ```
 693 | 
 694 | ```css line=3-4
 695 | /* styles.css */
 696 | .DropdownMenuContent {
 697 |   width: var(--reka-dropdown-menu-trigger-width);
 698 |   max-height: var(--reka-dropdown-menu-content-available-height);
 699 | }
 700 | ```
 701 | 
 702 | ### Origin-aware animations
 703 | 
 704 | We expose a CSS custom property `--reka-dropdown-menu-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.
 705 | 
 706 | ```vue line=9
 707 | <script setup lang="ts">
 708 | import { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'reka-ui'
 709 | </script>
 710 | 
 711 | <template>
 712 |   <DropdownMenuRoot>
 713 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 714 |     <DropdownMenuPortal>
 715 |       <DropdownMenuContent class="DropdownMenuContent">
 716 |         …
 717 |       </DropdownMenuContent>
 718 |     </DropdownMenuPortal>
 719 |   </DropdownMenuRoot>
 720 | </template>
 721 | ```
 722 | 
 723 | ```css line=3
 724 | /* styles.css */
 725 | .DropdownMenuContent {
 726 |   transform-origin: var(--reka-dropdown-menu-content-transform-origin);
 727 |   animation: scaleIn 0.5s ease-out;
 728 | }
 729 | 
 730 | @keyframes scaleIn {
 731 |   from {
 732 |     opacity: 0;
 733 |     transform: scale(0);
 734 |   }
 735 |   to {
 736 |     opacity: 1;
 737 |     transform: scale(1);
 738 |   }
 739 | }
 740 | ```
 741 | 
 742 | ### Collision-aware animations
 743 | 
 744 | We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.
 745 | 
 746 | ```vue line=9
 747 | <script setup lang="ts">
 748 | import { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'reka-ui'
 749 | </script>
 750 | 
 751 | <template>
 752 |   <DropdownMenuRoot>
 753 |     <DropdownMenuTrigger>…</DropdownMenuTrigger>
 754 |     <DropdownMenuPortal>
 755 |       <DropdownMenuContent class="DropdownMenuContent">
 756 |         …
 757 |       </DropdownMenuContent>
 758 |     </DropdownMenuPortal>
 759 |   </DropdownMenuRoot>
 760 | </template>
 761 | ```
 762 | 
 763 | ```css line=6-11
 764 | /* styles.css */
 765 | .DropdownMenuContent {
 766 |   animation-duration: 0.6s;
 767 |   animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
 768 | }
 769 | .DropdownMenuContent[data-side="top"] {
 770 |   animation-name: slideUp;
 771 | }
 772 | .DropdownMenuContent[data-side="bottom"] {
 773 |   animation-name: slideDown;
 774 | }
 775 | 
 776 | @keyframes slideUp {
 777 |   from {
 778 |     opacity: 0;
 779 |     transform: translateY(10px);
 780 |   }
 781 |   to {
 782 |     opacity: 1;
 783 |     transform: translateY(0);
 784 |   }
 785 | }
 786 | 
 787 | @keyframes slideDown {
 788 |   from {
 789 |     opacity: 0;
 790 |     transform: translateY(-10px);
 791 |   }
 792 |   to {
 793 |     opacity: 1;
 794 |     transform: translateY(0);
 795 |   }
 796 | }
 797 | ```
 798 | 
 799 | ## Accessibility
 800 | 
 801 | Adheres to the [Menu Button WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/menubutton) and uses [roving tabindex](https://www.w3.org/WAI/ARIA/apg/patterns/kbd_roving_tabindex) to manage focus movement among menu items.
 802 | 
 803 | ### Keyboard Interactions
 804 | 
 805 | <KeyboardTable
 806 |   :data="[
 807 |     {
 808 |       keys: ['Space'],
 809 |       description: `
 810 |         <span>
 811 |           When focus is on <Code>DropdownMenuTrigger</Code>, opens the dropdown
 812 |           menu and focuses the first item.
 813 |           <br />
 814 |           When focus is on an item, activates the focused item.
 815 |         </span>
 816 |       `,
 817 |     },
 818 |     {
 819 |       keys: ['Enter'],
 820 |       description: `
 821 |         <span>
 822 |           When focus is on <Code>DropdownMenuTrigger</Code>, opens the dropdown
 823 |           menu and focuses the first item.
 824 |           <br />
 825 |           When focus is on an item, activates the focused item.
 826 |         </span>
 827 |       `,
 828 |     },
 829 |     {
 830 |       keys: ['ArrowDown'],
 831 |       description: `
 832 |         <span>
 833 |           When focus is on <Code>DropdownMenuTrigger</Code>, opens the dropdown
 834 |           menu.
 835 |           <br />
 836 |           When focus is on an item, moves focus to the next item.
 837 |         </span>
 838 |       `,
 839 |     },
 840 |     {
 841 |       keys: ['ArrowUp'],
 842 |       description: `
 843 |         <span>When focus is on an item, moves focus to the previous item.</span>
 844 |       `,
 845 |     },
 846 |     {
 847 |       keys: ['ArrowRight', 'ArrowLeft'],
 848 |       description: `
 849 |         <span>
 850 |           When focus is on <Code>DropdownMenuSubTrigger</Code>, opens or closes
 851 |           the submenu depending on reading direction.
 852 |         </span>
 853 |       `,
 854 |     },
 855 |     {
 856 |       keys: ['Esc'],
 857 |       description: `
 858 |         <span>
 859 |           Closes the dropdown menu and moves focus to{' '}
 860 |           <Code>DropdownMenuTrigger</Code>.
 861 |         </span>
 862 |       `,
 863 |     },
 864 |   ]"
 865 | />
 866 | 
 867 | ## Custom APIs
 868 | 
 869 | Create your own API by abstracting the primitive parts into your own component.
 870 | 
 871 | ### Abstract the arrow and item indicators
 872 | 
 873 | This example abstracts the `DropdownMenuArrow` and `DropdownMenuItemIndicator` parts. It also wraps implementation details for `CheckboxItem` and `RadioItem`.
 874 | 
 875 | #### Usage
 876 | 
 877 | ```vue
 878 | <script setup lang="ts">
 879 | import {
 880 |   DropdownMenu,
 881 |   DropdownMenuCheckboxItem,
 882 |   DropdownMenuContent,
 883 |   DropdownMenuGroup,
 884 |   DropdownMenuItem,
 885 |   DropdownMenuLabel,
 886 |   DropdownMenuRadioGroup,
 887 |   DropdownMenuRadioItem,
 888 |   DropdownMenuSeparator,
 889 |   DropdownMenuTrigger,
 890 | } from './your-dropdown-menu'
 891 | </script>
 892 | 
 893 | <template>
 894 |   <DropdownMenu>
 895 |     <DropdownMenuTrigger>DropdownMenu trigger</DropdownMenuTrigger>
 896 |     <DropdownMenuContent>
 897 |       <DropdownMenuItem>Item</DropdownMenuItem>
 898 |       <DropdownMenuLabel>Label</DropdownMenuLabel>
 899 |       <DropdownMenuGroup>Group</DropdownMenuGroup>
 900 |       <DropdownMenuCheckboxItem>CheckboxItem</DropdownMenuCheckboxItem>
 901 |       <DropdownMenuSeparator>Separator</DropdownMenuSeparator>
 902 |       <DropdownMenuRadioGroup>
 903 |         <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>
 904 |         <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>
 905 |       </DropdownMenuRadioGroup>
 906 |     </DropdownMenuContent>
 907 |   </DropdownMenu>
 908 | </template>
 909 | ```
 910 | 
 911 | #### Implementation
 912 | 
 913 | ```ts
 914 | export { default as DropdownMenuCheckboxItem } from 'DropdownMenuCheckboxItem.vue'
 915 | // your-dropdown-menu.ts
 916 | export { default as DropdownMenuContent } from 'DropdownMenuContent.vue'
 917 | export { default as DropdownMenuRadioItem } from 'DropdownMenuRadioItem.vue'
 918 | 
 919 | export {
 920 |   DropdownMenuRoot as DropdownMenu,
 921 |   DropdownMenuGroup,
 922 |   DropdownMenuItem,
 923 |   DropdownMenuLabel,
 924 |   DropdownMenuRadioGroup,
 925 |   DropdownMenuSeparator,
 926 |   DropdownMenuTrigger
 927 | } from 'reka-ui'
 928 | ```
 929 | 
 930 | ```vue
 931 | <!-- DropdownMenuContent.vue -->
 932 | <script setup lang="ts">
 933 | import type { DropdownMenuContentEmits, DropdownMenuContentProps } from 'reka-ui'
 934 | import { DropdownMenuContent, DropdownMenuPortal, useForwardPropsEmits } from 'reka-ui'
 935 | 
 936 | const props = defineProps<DropdownMenuContentProps>()
 937 | const emits = defineEmits<DropdownMenuContentEmits>()
 938 | 
 939 | const forwarded = useForwardPropsEmits(props, emits)
 940 | </script>
 941 | 
 942 | <template>
 943 |   <DropdownMenuPortal>
 944 |     <DropdownMenuContent v-bind="forwarded">
 945 |       <slot />
 946 |     </DropdownMenuContent>
 947 |   </DropdownMenuPortal>
 948 | </template>
 949 | ```
 950 | 
 951 | ```vue
 952 | <!-- DropdownMenuCheckboxItem.vue -->
 953 | <script setup lang="ts">
 954 | import type { DropdownMenuCheckboxItemEmits, DropdownMenuCheckboxItemProps } from 'reka-ui'
 955 | import { CheckIcon } from '@radix-icons/vue'
 956 | import { DropdownMenuCheckboxItem, DropdownMenuItemIndicator, useForwardPropsEmits } from 'reka-ui'
 957 | 
 958 | const props = defineProps<DropdownMenuCheckboxItemProps>()
 959 | const emits = defineEmits<DropdownMenuCheckboxItemEmits>()
 960 | 
 961 | const forwarded = useForwardPropsEmits(props, emits)
 962 | </script>
 963 | 
 964 | <template>
 965 |   <DropdownMenuCheckboxItem v-bind="forwarded">
 966 |     <span>
 967 |       <DropdownMenuItemIndicator>
 968 |         <CheckIcon />
 969 |       </DropdownMenuItemIndicator>
 970 |     </span>
 971 |     <slot />
 972 |   </DropdownMenuCheckboxItem>
 973 | </template>
 974 | ```
 975 | 
 976 | ```vue
 977 | <!-- DropdownMenuRadioItem.vue -->
 978 | <script setup lang="ts">
 979 | import type { DropdownMenuRadioItemEmits, DropdownMenuRadioItemProps } from 'reka-ui'
 980 | import { DotFilledIcon } from '@radix-icons/vue'
 981 | import { DropdownMenuItemIndicator, DropdownMenuRadioItem, useForwardPropsEmits } from 'reka-ui'
 982 | 
 983 | const props = defineProps<DropdownMenuRadioItemProps>()
 984 | const emits = defineEmits<DropdownMenuRadioItemEmits>()
 985 | 
 986 | const forwarded = useForwardPropsEmits(props, emits)
 987 | </script>
 988 | 
 989 | <template>
 990 |   <DropdownMenuRadioItem v-bind="forwarded">
 991 |     <span>
 992 |       <DropdownMenuItemIndicator>
 993 |         <DotFilledIcon />
 994 |       </DropdownMenuItemIndicator>
 995 |     </span>
 996 |     <slot />
 997 |   </DropdownMenuRadioItem>
 998 | </template>
 999 | ```
1000 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/editable.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Editable
  3 | description: Displays an input field used for editing a single line of text, rendering as static text on load.
  4 | name: editable
  5 | ---
  6 | 
  7 | # Editable
  8 | 
  9 | <Description>
 10 | Displays an input field used for editing a single line of text, rendering as static text on load. It transforms into a text input field when the edit interaction is triggered.
 11 | </Description>
 12 | 
 13 | <ComponentPreview name="Editable" />
 14 | 
 15 | ## Features
 16 | 
 17 | <Highlights
 18 |   :features="[
 19 |     'Full keyboard navigation',
 20 |     'Can be controlled or uncontrolled',
 21 |     'Focus is fully managed'
 22 |   ]"
 23 | />
 24 | 
 25 | ## Installation
 26 | 
 27 | Install the component from your command line.
 28 | 
 29 | <InstallationTabs value="reka-ui" />
 30 | 
 31 | ## Anatomy
 32 | 
 33 | Import all parts and piece them together.
 34 | 
 35 | ```vue
 36 | <script setup>
 37 | import {
 38 |   EditableArea,
 39 |   EditableCancelTrigger,
 40 |   EditableEditTrigger,
 41 |   EditableInput,
 42 |   EditablePreview,
 43 |   EditableRoot,
 44 |   EditableSubmitTrigger
 45 | } from 'reka-ui'
 46 | </script>
 47 | 
 48 | <template>
 49 |   <EditableRoot>
 50 |     <EditableArea>
 51 |       <EditablePreview />
 52 |       <EditableInput />
 53 |     </EditableArea>
 54 |     <EditableEditTrigger />
 55 |     <EditableSubmitTrigger />
 56 |     <EditableCancelTrigger />
 57 |   </EditableRoot>
 58 | </template>
 59 | ```
 60 | 
 61 | ## API Reference
 62 | 
 63 | ### Root
 64 | 
 65 | Contains all the parts of an editable component.
 66 | 
 67 | <!-- @include: @/meta/EditableRoot.md -->
 68 | 
 69 | ### Area
 70 | 
 71 | Contains the text parts of an editable component.
 72 | 
 73 | <!-- @include: @/meta/EditableArea.md -->
 74 | 
 75 | <DataAttributesTable
 76 |   :data="[
 77 |     {
 78 |       attribute: '[data-readonly]',
 79 |       values: 'Present when readonly',
 80 |     },
 81 |     {
 82 |       attribute: '[data-disabled]',
 83 |       values: 'Present when disabled',
 84 |     },
 85 |     {
 86 |       attribute: '[data-placeholder-shown]',
 87 |       values: 'Present when preview is shown',
 88 |     },
 89 |     {
 90 |       attribute: '[data-empty]',
 91 |       values: 'Present when the input is empty',
 92 |     },
 93 |     {
 94 |       attribute: '[data-focus]',
 95 |       values: 'Present when the editable field is focused. To be deprecated in favor of [data-focused]',
 96 |     },
 97 |     {
 98 |       attribute: '[data-focused]',
 99 |       values: 'Present when the editable field is focused',
100 |     }
101 |   ]"
102 | />
103 | 
104 | ### Input
105 | 
106 | Contains the input of an editable component.
107 | 
108 | <!-- @include: @/meta/EditableInput.md -->
109 | 
110 | <DataAttributesTable
111 | :data="[
112 |   {
113 |     attribute: '[data-readonly]',
114 |     values: 'Present when readonly',
115 |   },
116 |   {
117 |     attribute: '[data-disabled]',
118 |     values: 'Present when disabled',
119 |   }
120 | ]"
121 | />
122 | 
123 | ### Preview
124 | 
125 | Contains the preview of the editable component.
126 | 
127 | <!-- @include: @/meta/EditablePreview.md -->
128 | 
129 | ### Edit Trigger
130 | 
131 | Contains the edit trigger of the editable component.
132 | 
133 | <!-- @include: @/meta/EditableEditTrigger.md -->
134 | 
135 | ### Submit Trigger
136 | 
137 | Contains the submit trigger of the editable component.
138 | 
139 | <!-- @include: @/meta/EditableSubmitTrigger.md -->
140 | 
141 | ### Cancel Trigger
142 | 
143 | Contains the cancel trigger of the editable component.
144 | 
145 | <!-- @include: @/meta/EditableCancelTrigger.md -->
146 | 
147 | ## Examples
148 | 
149 | ### Change only on submit
150 | 
151 | By default the component will submit when `blur` event triggers. We can modify the `submit-mode` prop to alter this behavior.
152 | In this case, we want to submit only when user click on `EditableSubmitTrigger`, so we change the submit mode to `none`.
153 | 
154 | ```vue line=2,8
155 | <template>
156 |   <EditableRoot submit-mode="none">
157 |     <EditableArea>
158 |       <EditablePreview />
159 |       <EditableInput />
160 |     </EditableArea>
161 |     <EditableEditTrigger />
162 |     <EditableSubmitTrigger />
163 |     <EditableCancelTrigger />
164 |   </EditableRoot>
165 | </template>
166 | ```
167 | 
168 | ## Accessibility
169 | 
170 | ### Keyboard Interactions
171 | 
172 | <KeyboardTable
173 |   :data="[
174 |     {
175 |       keys: ['Tab'],
176 |       description: `<span>When focus moves onto the editable field, switches into the editable mode if the <Code>activation-mode</Code> is set to focus.</span>`
177 |     },
178 |     {
179 |       keys: ['Enter'],
180 |       description:`
181 |       <span>
182 |           If the <Code>submit-mode</Code> is set to <Code>enter</Code> or <Code>both</Code>, it submits the changes.
183 |       </span>
184 |     ` ,
185 |     },
186 |     {
187 |       keys: ['Escape'],
188 |       description:
189 |       `
190 |         When the focus is on the editable field, it cancels the changes.
191 |       `
192 |     }
193 |   ]"
194 | />
195 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/hover-card.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Hover Card
  4 | description: For sighted users to preview content available behind a link.
  5 | name: hover-card
  6 | ---
  7 | 
  8 | # HoverCard
  9 | 
 10 | <Description>
 11 | For sighted users to preview content available behind a link.
 12 | </Description>
 13 | 
 14 | <ComponentPreview name="HoverCard" />
 15 | 
 16 | ## Features
 17 | 
 18 | <Highlights
 19 |   :features="[
 20 |     'Can be controlled or uncontrolled.',
 21 |     'Customize side, alignment, offsets, collision handling.',
 22 |     'Optionally render a pointing arrow.',
 23 |     'Supports custom open and close delays.',
 24 |     'Ignored by screen readers.',
 25 |   ]"
 26 | />
 27 | 
 28 | ## Installation
 29 | 
 30 | Install the component from your command line.
 31 | 
 32 | <InstallationTabs value="reka-ui" />
 33 | 
 34 | ## Anatomy
 35 | 
 36 | Import all parts and piece them together.
 37 | 
 38 | ```vue
 39 | <script setup>
 40 | import { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'
 41 | </script>
 42 | 
 43 | <template>
 44 |   <HoverCardRoot>
 45 |     <HoverCardTrigger />
 46 |     <HoverCardPortal>
 47 |       <HoverCardContent>
 48 |         <HoverCardArrow />
 49 |       </HoverCardContent>
 50 |     </HoverCardPortal>
 51 |   </HoverCardRoot>
 52 | </template>
 53 | ```
 54 | 
 55 | ## API Reference
 56 | 
 57 | ### Root
 58 | 
 59 | Contains all the parts of a hover card.
 60 | 
 61 | <!-- @include: @/meta/HoverCardRoot.md -->
 62 | 
 63 | ### Trigger
 64 | 
 65 | The link that opens the hover card when hovered.
 66 | 
 67 | <!-- @include: @/meta/HoverCardTrigger.md -->
 68 | 
 69 | <DataAttributesTable
 70 |   :data="[
 71 |     {
 72 |       attribute: '[data-state]',
 73 |       values: ['open', 'closed'],
 74 |     },
 75 |   ]"
 76 | />
 77 | 
 78 | ### Portal
 79 | 
 80 | When used, portals the content part into the `body`.
 81 | 
 82 | <!-- @include: @/meta/HoverCardPortal.md -->
 83 | 
 84 | ### Content
 85 | 
 86 | The component that pops out when the hover card is open.
 87 | 
 88 | <PresenceCallout />
 89 | 
 90 | <!-- @include: @/meta/HoverCardContent.md -->
 91 | 
 92 | <DataAttributesTable
 93 |   :data="[
 94 |     {
 95 |       attribute: '[data-state]',
 96 |       values: ['open', 'closed'],
 97 |     },
 98 |     {
 99 |       attribute: '[data-side]',
100 |       values: ['left', 'right', 'bottom', 'top'],
101 |     },
102 |     {
103 |       attribute: '[data-align]',
104 |       values: ['start', 'end', 'center'],
105 |     },
106 |   ]"
107 | />
108 | 
109 | <CssVariablesTable
110 |   :data="[
111 |     {
112 |       cssVariable: '--reka-hover-card-content-transform-origin',
113 |       description: 'The <Code>transform-origin</Code> computed from the content and arrow positions/offsets',
114 |     },
115 |     {
116 |       cssVariable: '--reka-hover-card-content-available-width',
117 |       description: 'The remaining width between the trigger and the boundary edge',
118 |     },
119 |     {
120 |       cssVariable: '--reka-hover-card-content-available-height',
121 |       description: 'The remaining height between the trigger and the boundary edge',
122 |     },
123 |     {
124 |       cssVariable: '--reka-hover-card-trigger-width',
125 |       description: 'The width of the trigger',
126 |     },
127 |     {
128 |       cssVariable: '--reka-hover-card-trigger-height',
129 |       description: 'The height of the trigger',
130 |     },
131 |   ]"
132 | />
133 | 
134 | ### Arrow
135 | 
136 | An optional arrow element to render alongside the hover card. This can be used to help visually link the trigger with the `HoverCardContent`. Must be rendered inside `HoverCardContent`.
137 | 
138 | <!-- @include: @/meta/HoverCardArrow.md -->
139 | 
140 | ## Examples
141 | 
142 | ### Show instantly
143 | 
144 | Use the `openDelay` prop to control the time it takes for the hover card to open.
145 | 
146 | ```vue line=12
147 | <script setup>
148 | import {
149 |   HoverCardArrow,
150 |   HoverCardContent,
151 |   HoverCardPortal,
152 |   HoverCardRoot,
153 |   HoverCardTrigger,
154 | } from 'reka-ui'
155 | </script>
156 | 
157 | <template>
158 |   <HoverCardRoot :open-delay="0">
159 |     <HoverCardTrigger>…</HoverCardTrigger>
160 |     <HoverCardContent>…</HoverCardContent>
161 |   </HoverCardRoot>
162 | </template>
163 | ````
164 | 
165 | ### Constrain the content size
166 | 
167 | You may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.
168 | 
169 | We expose several CSS custom properties such as `--reka-hover-card-trigger-width` and `--reka-hover-card-content-available-height` to support this. Use them to constrain the content dimensions.
170 | 
171 | ```vue line=11
172 | // index.vue
173 | <script setup>
174 | import { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'
175 | </script>
176 | 
177 | <template>
178 |   <HoverCardRoot>
179 |     <HoverCardTrigger>…</HoverCardTrigger>
180 |     <HoverCardPortal>
181 |       <HoverCardContent
182 |         class="HoverCardContent"
183 |         :side-offset="5"
184 |       >
185 |         …
186 |       </HoverCardContent>
187 |     </HoverCardPortal>
188 |   </HoverCardRoot>
189 | </template>
190 | ```
191 | 
192 | ```css line=3-4
193 | /* styles.css */
194 | .HoverCardContent {
195 |   width: var(--reka-hover-card-trigger-width);
196 |   max-height: var(--reka-hover-card-content-available-height);
197 | }
198 | ```
199 | 
200 | ### Origin-aware animations
201 | 
202 | We expose a CSS custom property `--reka-hover-card-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.
203 | 
204 | ```vue line=8
205 | <script setup>
206 | import { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'
207 | </script>
208 | 
209 | <template>
210 |   <HoverCardRoot>
211 |     <HoverCardTrigger>…</HoverCardTrigger>
212 |     <HoverCardContent class="HoverCardContent">
213 |       …
214 |     </HoverCardContent>
215 |   </HoverCardRoot>
216 | </template>
217 | ```
218 | 
219 | ```css line=3
220 | /* styles.css */
221 | .HoverCardContent {
222 |   transform-origin: var(--reka-hover-card-content-transform-origin);
223 |   animation: scaleIn 0.5s ease-out;
224 | }
225 | 
226 | @keyframes scaleIn {
227 |   from {
228 |     opacity: 0;
229 |     transform: scale(0);
230 |   }
231 |   to {
232 |     opacity: 1;
233 |     transform: scale(1);
234 |   }
235 | }
236 | ```
237 | 
238 | ### Collision-aware animations
239 | 
240 | We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.
241 | 
242 | ```vue line=8
243 | <script setup>
244 | import { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'
245 | </script>
246 | 
247 | <template>
248 |   <HoverCardRoot>
249 |     <HoverCardTrigger>…</HoverCardTrigger>
250 |     <HoverCardContent class="HoverCardContent">
251 |       …
252 |     </HoverCardContent>
253 |   </HoverCardRoot>
254 | </template>
255 | ```
256 | 
257 | ```css line=6-11
258 | /* styles.css */
259 | .HoverCardContent {
260 |   animation-duration: 0.6s;
261 |   animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
262 | }
263 | .HoverCardContent[data-side="top"] {
264 |   animation-name: slideUp;
265 | }
266 | .HoverCardContent[data-side="bottom"] {
267 |   animation-name: slideDown;
268 | }
269 | 
270 | @keyframes slideUp {
271 |   from {
272 |     opacity: 0;
273 |     transform: translateY(10px);
274 |   }
275 |   to {
276 |     opacity: 1;
277 |     transform: translateY(0);
278 |   }
279 | }
280 | 
281 | @keyframes slideDown {
282 |   from {
283 |     opacity: 0;
284 |     transform: translateY(-10px);
285 |   }
286 |   to {
287 |     opacity: 1;
288 |     transform: translateY(0);
289 |   }
290 | }
291 | ```
292 | 
293 | ## Accessibility
294 | 
295 | The hover card is intended for sighted users only, the content will be inaccessible to keyboard users.
296 | 
297 | ### Keyboard Interactions
298 | 
299 | <KeyboardTable :data="[
300 |     {
301 |       keys: ['Tab'],
302 |       description: 'Opens/closes the hover card.',
303 |     },
304 |     {
305 |       keys: ['Enter'],
306 |       description: 'Opens the hover card link',
307 |     }]" />
308 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/label.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Label
 4 | description: Renders an accessible label associated with controls.
 5 | name: label
 6 | ---
 7 | 
 8 | # Label
 9 | 
10 | <Description>
11 | Renders an accessible label associated with controls.
12 | </Description>
13 | 
14 | <ComponentPreview name="Label" />
15 | 
16 | ## Features
17 | 
18 | <Highlights
19 |   :features="[
20 |     'Text selection is prevented when double clicking label.',
21 |     'Supports nested controls.',
22 |   ]"
23 | />
24 | 
25 | ## Installation
26 | 
27 | Install the component from your command line.
28 | 
29 | <InstallationTabs value="reka-ui" />
30 | 
31 | ## Anatomy
32 | 
33 | Import the component.
34 | 
35 | ```vue
36 | <script setup>
37 | import { Label } from 'reka-ui'
38 | </script>
39 | 
40 | <template>
41 |   <Label />
42 | </template>
43 | ```
44 | 
45 | ## API Reference
46 | 
47 | ### Root
48 | 
49 | Contains the content for the label.
50 | 
51 | <!-- @include: @/meta/Label.md -->
52 | 
53 | ## Accessibility
54 | 
55 | This component is based on the native `label` element, it will automatically apply the correct labelling when wrapping controls or using the `for` attribute. For your own custom controls to work correctly, ensure they use native elements such as `button` or `input` as a base.
56 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/listbox.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Listbox
  4 | description: A control that allows the user to toggle between checked and not checked.
  5 | name: listbox
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/listbox
  7 | ---
  8 | 
  9 | # Listbox
 10 | 
 11 | <Description>
 12 | A control that allows the user to toggle between checked and not checked.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Listbox" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Can be controlled or uncontrolled.',
 22 |     'Supports items, labels, groups of items.',
 23 |     'Focus is fully managed.',
 24 |     'Full keyboard navigation.',
 25 |     'Supports Right to Left direction.',
 26 |     'Different selection behavior.',
 27 |   ]"
 28 | />
 29 | 
 30 | ## Installation
 31 | 
 32 | Install the component from your command line.
 33 | 
 34 | <InstallationTabs value="reka-ui" />
 35 | 
 36 | ## Anatomy
 37 | 
 38 | Import all parts and piece them together.
 39 | 
 40 | ```vue
 41 | <script setup>
 42 | import { ListboxContent, ListboxFilter, ListboxGroup, ListboxGroupLabel, ListboxItem, ListboxItemIndicator, ListboxRoot, ListboxVirtualizer } from 'reka-ui'
 43 | </script>
 44 | 
 45 | <template>
 46 |   <ListboxRoot>
 47 |     <ListboxFilter />
 48 | 
 49 |     <ListboxContent>
 50 |       <ListboxItem>
 51 |         <ListboxItemIndicator />
 52 |       </ListboxItem>
 53 | 
 54 |       <!-- or with group -->
 55 |       <ListboxGroup>
 56 |         <ListboxGroupLabel />
 57 |         <ListboxItem>
 58 |           <ListboxItemIndicator />
 59 |         </ListboxItem>
 60 |       </ListboxGroup>
 61 | 
 62 |       <!-- or with virtual -->
 63 |       <ListboxVirtualizer>
 64 |         <ListboxItem>
 65 |           <ListboxItemIndicator />
 66 |         </ListboxItem>
 67 |       </ListboxVirtualizer>
 68 |     </ListboxContent>
 69 |   </ListboxRoot>
 70 | </template>
 71 | ```
 72 | 
 73 | ## API Reference
 74 | 
 75 | ### Root
 76 | 
 77 | Contains all the parts of a listbox. An `input` will also render when used within a `form` to ensure events propagate correctly.
 78 | 
 79 | <!-- @include: @/meta/ListboxRoot.md -->
 80 | 
 81 | <DataAttributesTable
 82 |   :data="[
 83 |     {
 84 |       attribute: '[data-disabled]',
 85 |       values: 'Present when disabled',
 86 |     },
 87 |   ]"
 88 | />
 89 | 
 90 | ### Filter
 91 | 
 92 | Input element to perform filtering.
 93 | 
 94 | <!-- @include: @/meta/ListboxFilter.md -->
 95 | 
 96 | <DataAttributesTable
 97 |   :data="[
 98 |     {
 99 |       attribute: '[data-disabled]',
100 |       values: 'Present when disabled',
101 |     },
102 |   ]"
103 | />
104 | 
105 | ### Content
106 | 
107 | Contains all the listbox group and items.
108 | 
109 | <!-- @include: @/meta/ListboxContent.md -->
110 | 
111 | ### Item
112 | 
113 | The item component.
114 | 
115 | <!-- @include: @/meta/ListboxItem.md -->
116 | 
117 | <DataAttributesTable
118 |   :data="[
119 |     {
120 |       attribute: '[data-state]',
121 |       values: ['checked', 'unchecked'],
122 |     },
123 |     {
124 |       attribute: '[data-highlighted]',
125 |       values: 'Present when highlighted',
126 |     },
127 |     {
128 |       attribute: '[data-disabled]',
129 |       values: 'Present when disabled',
130 |     },
131 |   ]"
132 | />
133 | 
134 | ### ItemIndicator
135 | 
136 | Renders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
137 | 
138 | <!-- @include: @/meta/ListboxItemIndicator.md -->
139 | 
140 | ### Group
141 | 
142 | Used to group multiple items. use in conjunction with `ListboxGroupLabel` to ensure good accessibility via automatic labelling.
143 | 
144 | <!-- @include: @/meta/ListboxGroup.md -->
145 | 
146 | ### GroupLabel
147 | 
148 | Used to render the label of a group. It won't be focusable using arrow keys.
149 | 
150 | <!-- @include: @/meta/ListboxGroupLabel.md -->
151 | 
152 | ### Virtualizer
153 | 
154 | Virtual container to achieve list virtualization.
155 | 
156 | <!-- @include: @/meta/ListboxVirtualizer.md -->
157 | 
158 | ## Examples
159 | 
160 | ### Binding objects as values
161 | 
162 | Unlike native HTML form controls which only allow you to provide strings as values, `reka-ui` supports binding complex objects as well.
163 | 
164 | ```vue line=12,16,21
165 | <script setup lang="ts">
166 | import { ListboxContent, ListboxFilter, ListboxItem, ListboxRoot } from 'reka-ui'
167 | import { ref } from 'vue'
168 | 
169 | const people = [
170 |   { id: 1, name: 'Durward Reynolds' },
171 |   { id: 2, name: 'Kenton Towne' },
172 |   { id: 3, name: 'Therese Wunsch' },
173 |   { id: 4, name: 'Benedict Kessler' },
174 |   { id: 5, name: 'Katelyn Rohan' },
175 | ]
176 | const selectedPeople = ref(people[0])
177 | </script>
178 | 
179 | <template>
180 |   <ListboxRoot v-model="selectedPeople">
181 |     <ListboxContent>
182 |       <ListboxItem
183 |         v-for="person in people"
184 |         :key="person.id"
185 |         :value="person"
186 |         :disabled="person.unavailable"
187 |       >
188 |         {{ person.name }}
189 |       </ListboxItem>
190 |     </ListboxContent>
191 |   </ListboxRoot>
192 | </template>
193 | ```
194 | 
195 | ### Selecting multiple values
196 | 
197 | The `Listbox` component allows you to select multiple values. You can enable this by providing an array of values instead of a single value.
198 | 
199 | ```vue line=12,18
200 | <script setup lang="ts">
201 | import { ListboxRoot } from 'reka-ui'
202 | import { ref } from 'vue'
203 | 
204 | const people = [
205 |   { id: 1, name: 'Durward Reynolds' },
206 |   { id: 2, name: 'Kenton Towne' },
207 |   { id: 3, name: 'Therese Wunsch' },
208 |   { id: 4, name: 'Benedict Kessler' },
209 |   { id: 5, name: 'Katelyn Rohan' },
210 | ]
211 | const selectedPeople = ref([people[0], people[1]])
212 | </script>
213 | 
214 | <template>
215 |   <ListboxRoot
216 |     v-model="selectedPeople"
217 |     multiple
218 |   >
219 |     ...
220 |   </ListboxRoot>
221 | </template>
222 | ```
223 | 
224 | ### Custom filtering
225 | 
226 | ```vue line=13,15-16,21,24
227 | <script setup lang="ts">
228 | import { ListboxContent, ListboxFilter, ListboxItem, ListboxRoot, useFilter } from 'reka-ui'
229 | import { ref } from 'vue'
230 | 
231 | const people = [
232 |   { id: 1, name: 'Durward Reynolds' },
233 |   { id: 2, name: 'Kenton Towne' },
234 |   { id: 3, name: 'Therese Wunsch' },
235 |   { id: 4, name: 'Benedict Kessler' },
236 |   { id: 5, name: 'Katelyn Rohan' },
237 | ]
238 | const selectedPeople = ref(people[0])
239 | const searchTerm = ref('')
240 | 
241 | const { startsWith } = useFilter({ sensitivity: 'base' })
242 | const filteredPeople = computed(() => people.filter(p => startsWith(p.name, searchTerm.value)))
243 | </script>
244 | 
245 | <template>
246 |   <ListboxRoot v-model="selectedPeople">
247 |     <ListboxFilter v-model="searchTerm" />
248 |     <ListboxContent>
249 |       <ListboxItem
250 |         v-for="person in filteredPeople"
251 |         :key="person.id"
252 |         :value="person"
253 |       >
254 |         {{ person.name }}
255 |       </ListboxItem>
256 |     </ListboxContent>
257 |   </ListboxRoot>
258 | </template>
259 | ```
260 | 
261 | ### Virtual List
262 | 
263 | Rendering a long list of item can slow down the app, thus using virtualization would significantly improve the performance.
264 | 
265 | See the [virtualization guide](../guides/virtualization.md) for more general info on virtualization.
266 | 
267 | ```vue line=18-23
268 | <script setup lang="ts">
269 | import { ListboxContent, ListboxFilter, ListboxItem, ListboxRoot, ListboxVirtualizer } from 'reka-ui'
270 | import { ref } from 'vue'
271 | 
272 | const people = [
273 |   { id: 1, name: 'Durward Reynolds' },
274 |   { id: 2, name: 'Kenton Towne' },
275 |   { id: 3, name: 'Therese Wunsch' },
276 |   { id: 4, name: 'Benedict Kessler' },
277 |   { id: 5, name: 'Katelyn Rohan' },
278 |   // and a lot more
279 | ]
280 | </script>
281 | 
282 | <template>
283 |   <ListboxRoot>
284 |     <ListboxContent>
285 |       <ListboxVirtualizer
286 |         v-slot="{ option }"
287 |         :options="people"
288 |         :text-content="(opt) => opt.name"
289 |       >
290 |         <ListboxItem :value="option">
291 |           {{ person.name }}
292 |         </ListboxItem>
293 |       </ListboxVirtualizer>
294 |     </ListboxContent>
295 |   </ListboxRoot>
296 | </template>
297 | ```
298 | 
299 | ## Accessibility
300 | 
301 | Adheres to the [Listbox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/listbox/).
302 | 
303 | ### Keyboard Interactions
304 | 
305 | <KeyboardTable
306 |   :data="[
307 |     {
308 |       keys: ['Enter'],
309 |       description: '<span>When highlight on <code>ListboxItem</code>, selects the focused item. </span>',
310 |     },
311 |     {
312 |       keys: ['ArrowDown'],
313 |       description: 'When focus is on <code>ListboxItem</code>, moves focus to the next item. </span>',
314 |     },
315 |     {
316 |       keys: ['ArrowUp'],
317 |       description: 'When focus is on <code>ListboxItem</code>, moves focus to the previous item. </span>',
318 |     },
319 |     {
320 |       keys: ['Home'],
321 |       description: '<span>Moves focus and highlight to the first item.</span>',
322 |     },
323 |     {
324 |       keys: ['End'],
325 |       description: '<span>Moves focus and highlight to the last item.</span>',
326 |     },
327 |     {
328 |       keys: ['Ctrl/Cmd + A'],
329 |       description: '<span>Select all the items.</span>',
330 |     }
331 |   ]"
332 | />
333 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/menubar.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Menubar
  4 | description: A visually persistent menu common in desktop applications that provides quick
  5 |   access to a consistent set of commands.
  6 | name: menubar
  7 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/menu/
  8 | ---
  9 | 
 10 | # Menubar
 11 | 
 12 | <Description>
 13 | A visually persistent menu common in desktop applications that provides quick access to a consistent set of commands.
 14 | </Description>
 15 | 
 16 | <ComponentPreview name="Menubar" />
 17 | 
 18 | ## Features
 19 | 
 20 | <Highlights
 21 |   :features="[
 22 |     'Can be controlled or uncontrolled.',
 23 |     'Supports submenus with configurable reading direction.',
 24 |     'Supports items, labels, groups of items.',
 25 |     'Supports checkable items (single or multiple).',
 26 |     'Customize side, alignment, offsets, collision handling.',
 27 |     'Optionally render a pointing arrow.',
 28 |     'Focus is fully managed.',
 29 |     'Full keyboard navigation.',
 30 |     'Typeahead support.',
 31 |   ]"
 32 | />
 33 | 
 34 | ## Installation
 35 | 
 36 | Install the component from your command line.
 37 | 
 38 | <InstallationTabs value="reka-ui" />
 39 | 
 40 | ## Anatomy
 41 | 
 42 | Import all parts and piece them together.
 43 | 
 44 | ```vue
 45 | <script setup lang="ts">
 46 | import {
 47 |   MenubarArrow,
 48 |   MenubarCheckboxItem,
 49 |   MenubarContent,
 50 |   MenubarItem,
 51 |   MenubarItemIndicator,
 52 |   MenubarLabel,
 53 |   MenubarMenu,
 54 |   MenubarPortal,
 55 |   MenubarRadioGroup,
 56 |   MenubarRadioItem,
 57 |   MenubarRoot,
 58 |   MenubarSeparator,
 59 |   MenubarSub,
 60 |   MenubarSubContent,
 61 |   MenubarSubTrigger,
 62 |   MenubarTrigger,
 63 | } from './'
 64 | </script>
 65 | 
 66 | <template>
 67 |   <MenubarRoot>
 68 |     <MenubarMenu>
 69 |       <MenubarTrigger />
 70 |       <MenubarPortal>
 71 |         <MenubarContent>
 72 |           <MenubarLabel />
 73 |           <MenubarItem />
 74 | 
 75 |           <MenubarGroup>
 76 |             <MenubarItem />
 77 |           </MenubarGroup>
 78 | 
 79 |           <MenubarCheckboxItem>
 80 |             <MenubarItemIndicator />
 81 |           </MenubarCheckboxItem>
 82 | 
 83 |           <MenubarRadioGroup>
 84 |             <MenubarRadioItem>
 85 |               <MenubarItemIndicator />
 86 |             </MenubarRadioItem>
 87 |           </MenubarRadioGroup>
 88 | 
 89 |           <MenubarSub>
 90 |             <MenubarSubTrigger />
 91 |             <MenubarPortal>
 92 |               <MenubarSubContent />
 93 |             </MenubarPortal>
 94 |           </MenubarSub>
 95 | 
 96 |           <MenubarSeparator />
 97 |           <MenubarArrow />
 98 |         </MenubarContent>
 99 |       </MenubarPortal>
100 |     </MenubarMenu>
101 |   </MenubarRoot>
102 | </template>
103 | ```
104 | 
105 | ## API Reference
106 | 
107 | ### Root
108 | 
109 | Contains all the parts of a menubar
110 | 
111 | <!-- @include: @/meta/MenubarRoot.md -->
112 | 
113 | ### Menu
114 | 
115 | A top level menu item, contains a trigger with content combination.
116 | 
117 | <!-- @include: @/meta/MenubarMenu.md -->
118 | 
119 | ### Trigger
120 | 
121 | The button that toggles the content. By default, the `MenubarContent` will position itself against the trigger.
122 | 
123 | <!-- @include: @/meta/MenubarTrigger.md -->
124 | 
125 | <DataAttributesTable
126 |   :data="[
127 |     {
128 |       attribute: '[data-state]',
129 |       values: ['open', 'closed'],
130 |     },
131 |     {
132 |       attribute: '[data-highlighted]',
133 |       values: 'Present when highlighted',
134 |     },
135 |     {
136 |       attribute: '[data-disabled]',
137 |       values: 'Present when disabled',
138 |     },
139 |   ]"
140 | />
141 | 
142 | ### Portal
143 | 
144 | When used, portals the content part into the `body`.
145 | 
146 | <!-- @include: @/meta/MenubarPortal.md -->
147 | 
148 | ### Content
149 | 
150 | The component that pops out when a menu is open.
151 | 
152 | <!-- @include: @/meta/MenubarContent.md -->
153 | 
154 | <DataAttributesTable
155 |   :data="[
156 |     {
157 |       attribute: '[data-state]',
158 |       values: ['open', 'closed'],
159 |     },
160 |     {
161 |       attribute: '[data-side]',
162 |       values: ['left', 'right', 'bottom', 'top'],
163 |     },
164 |     {
165 |       attribute: '[data-align]',
166 |       values: ['start', 'end', 'center'],
167 |     },
168 |   ]"
169 | />
170 | 
171 | <CssVariablesTable
172 |   :data="[
173 |     {
174 |       cssVariable: '--reka-menubar-content-transform-origin',
175 |       description: `
176 |         The <Code>transform-origin</Code> computed from the content and arrow positions/offsets
177 |       `,
178 |     },
179 |     {
180 |       cssVariable: '--reka-menubar-content-available-width',
181 |       description: `
182 |         The remaining width between the trigger and the boundary edge
183 |       `,
184 |     },
185 |     {
186 |       cssVariable: '--reka-menubar-content-available-height',
187 |       description: `
188 |         The remaining height between the trigger and the boundary edge
189 |       `,
190 |     },
191 |     {
192 |       cssVariable: '--reka-menubar-trigger-width',
193 |       description: 'The width of the trigger',
194 |     },
195 |     {
196 |       cssVariable: '--reka-menubar-trigger-height',
197 |       description: 'The height of the trigger',
198 |     },
199 |   ]"
200 | />
201 | 
202 | ### Arrow
203 | 
204 | An optional arrow element to render alongside a menubar menu. This can be used to help visually link the trigger with the `MenubarContent`. Must be rendered inside `MenubarContent`.
205 | 
206 | <!-- @include: @/meta/MenubarArrow.md -->
207 | 
208 | ### Item
209 | 
210 | The component that contains the menubar items.
211 | 
212 | <!-- @include: @/meta/MenubarItem.md -->
213 | 
214 | <DataAttributesTable
215 |   :data="[
216 |     {
217 |       attribute: '[data-highlighted]',
218 |       values: 'Present when highlighted',
219 |     },
220 |     {
221 |       attribute: '[data-disabled]',
222 |       values: 'Present when disabled',
223 |     },
224 |   ]"
225 | />
226 | 
227 | ### Group
228 | 
229 | Used to group multiple `MenubarItem`s.
230 | 
231 | <!-- @include: @/meta/MenubarGroup.md -->
232 | 
233 | ### Label
234 | 
235 | Used to render a label. It won't be focusable using arrow keys.
236 | 
237 | <!-- @include: @/meta/MenubarLabel.md -->
238 | 
239 | ### CheckboxItem
240 | 
241 | An item that can be controlled and rendered like a checkbox.
242 | 
243 | <!-- @include: @/meta/MenubarCheckboxItem.md -->
244 | 
245 | <DataAttributesTable
246 |   :data="[
247 |     {
248 |       attribute: '[data-state]',
249 |       values: ['checked', 'unchecked'],
250 |     },
251 |     {
252 |       attribute: '[data-highlighted]',
253 |       values: 'Present when highlighted',
254 |     },
255 |     {
256 |       attribute: '[data-disabled]',
257 |       values: 'Present when disabled',
258 |     },
259 |   ]"
260 | />
261 | 
262 | ### RadioGroup
263 | 
264 | Used to group multiple `MenubarRadioItem`s.
265 | 
266 | <!-- @include: @/meta/MenubarRadioGroup.md -->
267 | 
268 | ### RadioItem
269 | 
270 | An item that can be controlled and rendered like a radio.
271 | 
272 | <!-- @include: @/meta/MenubarRadioItem.md -->
273 | 
274 | <DataAttributesTable
275 |   :data="[
276 |     {
277 |       attribute: '[data-state]',
278 |       values: ['checked', 'unchecked'],
279 |     },
280 |     {
281 |       attribute: '[data-highlighted]',
282 |       values: 'Present when highlighted',
283 |     },
284 |     {
285 |       attribute: '[data-disabled]',
286 |       values: 'Present when disabled',
287 |     },
288 |   ]"
289 | />
290 | 
291 | ### ItemIndicator
292 | 
293 | Renders when the parent `MenubarCheckboxItem` or `MenubarRadioItem` is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
294 | 
295 | <!-- @include: @/meta/MenubarItemIndicator.md -->
296 | 
297 | <DataAttributesTable
298 |   :data="[
299 |     {
300 |       attribute: '[data-state]',
301 |       values: ['checked', 'unchecked'],
302 |     },
303 |   ]"
304 | />
305 | 
306 | ### Separator
307 | 
308 | Used to visually separate items in a menubar menu.
309 | 
310 | <!-- @include: @/meta/MenubarSeparator.md -->
311 | 
312 | ### Sub
313 | 
314 | Contains all the parts of a submenu.
315 | 
316 | <!-- @include: @/meta/MenubarSub.md -->
317 | 
318 | ### SubTrigger
319 | 
320 | An item that opens a submenu. Must be rendered inside `MenubarSub`.
321 | 
322 | <!-- @include: @/meta/MenubarSubTrigger.md -->
323 | 
324 | <DataAttributesTable
325 |   :data="[
326 |     {
327 |       attribute: '[data-state]',
328 |       values: ['open', 'closed'],
329 |     },
330 |     {
331 |       attribute: '[data-highlighted]',
332 |       values: 'Present when highlighted',
333 |     },
334 |     {
335 |       attribute: '[data-disabled]',
336 |       values: 'Present when disabled',
337 |     },
338 |   ]"
339 | />
340 | 
341 | ### SubContent
342 | 
343 | The component that pops out when a submenu is open. Must be rendered inside `MenubarSub`.
344 | 
345 | <!-- @include: @/meta/MenubarSubContent.md -->
346 | 
347 | <DataAttributesTable
348 |   :data="[
349 |     {
350 |       attribute: '[data-state]',
351 |       values: ['open', 'closed'],
352 |     },
353 |     {
354 |       attribute: '[data-side]',
355 |       values: ['left', 'right', 'bottom', 'top'],
356 |     },
357 |     {
358 |       attribute: '[data-align]',
359 |       values: ['start', 'end', 'center'],
360 |     },
361 |     {
362 |       attribute: '[data-orientation]',
363 |       values: ['vertical', 'horizontal'],
364 |     },
365 |   ]"
366 | />
367 | 
368 | <CssVariablesTable
369 |   :data="[
370 |     {
371 |       cssVariable: '--reka-menubar-content-transform-origin',
372 |       description: `
373 |         The <Code>transform-origin</Code> computed from the content and arrow positions/offsets
374 |       `,
375 |     },
376 |     {
377 |       cssVariable: '--reka-menubar-content-available-width',
378 |       description: `
379 |         The remaining width between the trigger and the boundary edge
380 |       `,
381 |     },
382 |     {
383 |       cssVariable: '--reka-menubar-content-available-height',
384 |       description: `
385 |         The remaining height between the trigger and the boundary edge
386 |       `,
387 |     },
388 |     {
389 |       cssVariable: '--reka-menubar-trigger-width',
390 |       description: 'The width of the trigger',
391 |     },
392 |     {
393 |       cssVariable: '--reka-menubar-trigger-height',
394 |       description: 'The height of the trigger',
395 |     },
396 |   ]"
397 | />
398 | 
399 | ## Examples
400 | 
401 | ### With submenus
402 | 
403 | You can create submenus by using `MenubarSub` in combination with its parts.
404 | 
405 | ```vue line=9-11,25-34
406 | <script setup lang="ts">
407 | import {
408 |   MenubarContent,
409 |   MenubarItem,
410 |   MenubarMenu,
411 |   MenubarPortal,
412 |   MenubarRoot,
413 |   MenubarSeparator,
414 |   MenubarSub,
415 |   MenubarSubContent,
416 |   MenubarSubTrigger,
417 |   MenubarTrigger,
418 | } from 'reka-ui'
419 | </script>
420 | 
421 | <template>
422 |   <MenubarRoot>
423 |     <MenubarMenu>
424 |       <MenubarTrigger>…</MenubarTrigger>
425 |       <MenubarPortal>
426 |         <MenubarContent>
427 |           <MenubarItem>…</MenubarItem>
428 |           <MenubarItem>…</MenubarItem>
429 |           <MenubarSeparator />
430 |           <MenubarSub>
431 |             <MenubarSubTrigger>Sub menu →</MenubarSubTrigger>
432 |             <MenubarPortal>
433 |               <MenubarSubContent>
434 |                 <MenubarItem>Sub menu item</MenubarItem>
435 |                 <MenubarItem>Sub menu item</MenubarItem>
436 |                 <MenubarArrow />
437 |               </MenubarSubContent>
438 |             </MenubarPortal>
439 |           </MenubarSub>
440 |           <MenubarSeparator />
441 |           <MenubarItem>…</MenubarItem>
442 |         </MenubarContent>
443 |       </MenubarPortal>
444 |     </MenubarMenu>
445 |   </MenubarRoot>
446 | </template>
447 | ```
448 | 
449 | ### With disabled items
450 | 
451 | You can add special styles to disabled items via the `data-disabled` attribute.
452 | 
453 | ```vue line=13
454 | <script setup lang="ts">
455 | import { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'
456 | </script>
457 | 
458 | <template>
459 |   <MenubarRoot>
460 |     <MenubarMenu>
461 |       <MenubarTrigger>…</MenubarTrigger>
462 |       <MenubarPortal>
463 |         <MenubarContent>
464 |           <MenubarItem
465 |             class="MenubarItem"
466 |             disabled
467 |           >
468 |             …
469 |           </MenubarItem>
470 |           <MenubarItem class="MenubarItem">
471 |             …
472 |           </MenubarItem>
473 |         </MenubarContent>
474 |       </MenubarPortal>
475 |     </MenubarMenu>
476 |   </MenubarRoot>
477 | </template>
478 | ```
479 | 
480 | ```css line=2
481 | /* styles.css */
482 | .MenubarItem[data-disabled] {
483 |   color: gainsboro;
484 | }
485 | ```
486 | 
487 | ### With separators
488 | 
489 | Use the `Separator` part to add a separator between items.
490 | 
491 | ```vue line=8,20,22
492 | <script setup lang="ts">
493 | import {
494 |   MenubarContent,
495 |   MenubarItem,
496 |   MenubarMenu,
497 |   MenubarPortal,
498 |   MenubarRoot,
499 |   MenubarSeparator,
500 |   MenubarTrigger,
501 | } from 'reka-ui'
502 | </script>
503 | 
504 | <template>
505 |   <MenubarRoot>
506 |     <MenubarMenu>
507 |       <MenubarTrigger>…</MenubarTrigger>
508 |       <MenubarPortal>
509 |         <MenubarContent>
510 |           <MenubarItem>…</MenubarItem>
511 |           <MenubarSeparator />
512 |           <MenubarItem>…</MenubarItem>
513 |           <MenubarSeparator />
514 |           <MenubarItem>…</MenubarItem>
515 |         </MenubarContent>
516 |       </MenubarPortal>
517 |     </MenubarMenu>
518 |   </MenubarRoot>
519 | </template>
520 | ```
521 | 
522 | ### With labels
523 | 
524 | Use the `Label` part to help label a section.
525 | 
526 | ```vue line=5,19
527 | <script setup lang="ts">
528 | import {
529 |   MenubarContent,
530 |   MenubarItem,
531 |   MenubarLabel,
532 |   MenubarMenu,
533 |   MenubarPortal,
534 |   MenubarRoot,
535 |   MenubarTrigger,
536 | } from 'reka-ui'
537 | </script>
538 | 
539 | <template>
540 |   <MenubarRoot>
541 |     <MenubarMenu>
542 |       <MenubarTrigger>…</MenubarTrigger>
543 |       <MenubarPortal>
544 |         <MenubarContent>
545 |           <MenubarLabel>Label</MenubarLabel>
546 |           <MenubarItem>…</MenubarItem>
547 |           <MenubarItem>…</MenubarItem>
548 |           <MenubarItem>…</MenubarItem>
549 |         </MenubarContent>
550 |       </MenubarPortal>
551 |     </MenubarMenu>
552 |   </MenubarRoot>
553 | </template>
554 | ```
555 | 
556 | ### With checkbox items
557 | 
558 | Use the `CheckboxItem` part to add an item that can be checked.
559 | 
560 | ```vue line=3,27-32
561 | <script setup lang="ts">
562 | import { Icon } from '@iconify/vue'
563 | import {
564 |   MenubarCheckboxItem,
565 |   MenubarContent,
566 |   MenubarItem,
567 |   MenubarItemIndicator,
568 |   MenubarMenu,
569 |   MenubarPortal,
570 |   MenubarRoot,
571 |   MenubarSeparator,
572 |   MenubarTrigger,
573 | } from 'reka-ui'
574 | 
575 | const checked = ref(true)
576 | </script>
577 | 
578 | <template>
579 |   <MenubarRoot>
580 |     <MenubarMenu>
581 |       <MenubarTrigger>…</MenubarTrigger>
582 |       <MenubarPortal>
583 |         <MenubarContent>
584 |           <MenubarItem>…</MenubarItem>
585 |           <MenubarItem>…</MenubarItem>
586 |           <MenubarSeparator />
587 |           <MenubarCheckboxItem v-model="checked">
588 |             <MenubarItemIndicator>
589 |               <Icon icon="radix-icons:check" />
590 |             </MenubarItemIndicator>
591 |             Checkbox item
592 |           </MenubarCheckboxItem>
593 |         </MenubarContent>
594 |       </MenubarPortal>
595 |     </MenubarMenu>
596 |   </MenubarRoot>
597 | </template>
598 | ```
599 | 
600 | ### With radio items
601 | 
602 | Use the `RadioGroup` and `RadioItem` parts to add an item that can be checked amongst others.
603 | 
604 | ```vue line=9-10,26-39
605 | <script setup lang="ts">
606 | import { Icon } from '@iconify/vue'
607 | import {
608 |   MenubarCheckboxItem,
609 |   MenubarContent,
610 |   MenubarItem,
611 |   MenubarItemIndicator,
612 |   MenubarMenu,
613 |   MenubarPortal,
614 |   MenubarRadioGroup,
615 |   MenubarRadioItem,
616 |   MenubarRoot,
617 |   MenubarSeparator,
618 |   MenubarTrigger,
619 | } from 'reka-ui'
620 | 
621 | const color = ref('blue')
622 | </script>
623 | 
624 | <template>
625 |   <MenubarRoot>
626 |     <MenubarMenu>
627 |       <MenubarTrigger>…</MenubarTrigger>
628 |       <MenubarPortal>
629 |         <MenubarContent>
630 |           <MenubarRadioGroup v-model="color">
631 |             <MenubarRadioItem value="red">
632 |               <MenubarItemIndicator>
633 |                 <Icon icon="radix-icons:check" />
634 |               </MenubarItemIndicator>
635 |               Red
636 |             </MenubarRadioItem>
637 |             <MenubarRadioItem value="blue">
638 |               <MenubarItemIndicator>
639 |                 <Icon icon="radix-icons:check" />
640 |               </MenubarItemIndicator>
641 |               Blue
642 |             </MenubarRadioItem>
643 |           </MenubarRadioGroup>
644 |         </MenubarContent>
645 |       </MenubarPortal>
646 |     </MenubarMenu>
647 |   </MenubarRoot>
648 | </template>
649 | ```
650 | 
651 | ### With complex items
652 | 
653 | You can add extra decorative elements in the `Item` parts, such as images.
654 | 
655 | ```vue line=12,16
656 | <script setup lang="ts">
657 | import { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'
658 | </script>
659 | 
660 | <template>
661 |   <MenubarRoot>
662 |     <MenubarMenu>
663 |       <MenubarTrigger>…</MenubarTrigger>
664 |       <MenubarPortal>
665 |         <MenubarContent>
666 |           <MenubarItem>
667 |             <img src="…">
668 |             Adolfo Hess
669 |           </MenubarItem>
670 |           <MenubarItem>
671 |             <img src="…">
672 |             Miyah Myles
673 |           </MenubarItem>
674 |         </MenubarContent>
675 |       </MenubarPortal>
676 |     </MenubarMenu>
677 |   </MenubarRoot>
678 | </template>
679 | ```
680 | 
681 | ### Constrain the content/sub-content size
682 | 
683 | You may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.
684 | 
685 | We expose several CSS custom properties such as `--reka-menubar-trigger-width` and `--reka-menubar-content-available-height` to support this. Use them to constrain the content dimensions.
686 | 
687 | ```vue line=10-13
688 | <script setup lang="ts">
689 | import { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'
690 | </script>
691 | 
692 | <template>
693 |   <MenubarRoot>
694 |     <MenubarMenu>
695 |       <MenubarTrigger> Trigger </MenubarTrigger>
696 |       <MenubarPortal>
697 |         <MenubarContent
698 |           class="MenubarContent"
699 |           :side-offset="5"
700 |           :align-offset="-3"
701 |         >
702 |           <MenubarItem> New Tab </MenubarItem>
703 |         </MenubarContent>
704 |       </MenubarPortal>
705 |     </MenubarMenu>
706 |   </MenubarRoot>
707 | </template>
708 | ```
709 | 
710 | ```css line=3-4
711 | /* styles.css */
712 | .MenubarContent {
713 |   width: var(--reka-menubar-trigger-width);
714 |   max-height: var(--reka-menubar-content-available-height);
715 | }
716 | ```
717 | 
718 | ### Origin-aware animations
719 | 
720 | We expose a CSS custom property `--reka-menubar-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.
721 | 
722 | ```vue line=10
723 | <script setup lang="ts">
724 | import { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'
725 | </script>
726 | 
727 | <template>
728 |   <MenubarRoot>
729 |     <MenubarMenu>
730 |       <MenubarTrigger>…</MenubarTrigger>
731 |       <MenubarPortal>
732 |         <MenubarContent class="MenubarContent">
733 |           …
734 |         </MenubarContent>
735 |       </MenubarPortal>
736 |     </MenubarMenu>
737 |   </MenubarRoot>
738 | </template>
739 | ```
740 | 
741 | ```css line=3
742 | /* styles.css */
743 | .MenubarContent {
744 |   transform-origin: var(--reka-menubar-content-transform-origin);
745 |   animation: scaleIn 0.5s ease-out;
746 | }
747 | 
748 | @keyframes scaleIn {
749 |   from {
750 |     opacity: 0;
751 |     transform: scale(0);
752 |   }
753 |   to {
754 |     opacity: 1;
755 |     transform: scale(1);
756 |   }
757 | }
758 | ```
759 | 
760 | ### Collision-aware animations
761 | 
762 | We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.
763 | 
764 | ```vue line=10
765 | <script setup lang="ts">
766 | import { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'
767 | </script>
768 | 
769 | <template>
770 |   <MenubarRoot>
771 |     <MenubarMenu>
772 |       <MenubarTrigger>…</MenubarTrigger>
773 |       <MenubarPortal>
774 |         <MenubarContent class="MenubarContent">
775 |           …
776 |         </MenubarContent>
777 |       </MenubarPortal>
778 |     </MenubarMenu>
779 |   </MenubarRoot>
780 | </template>
781 | ```
782 | 
783 | ```css line=6-11
784 | /* styles.css */
785 | .MenubarContent {
786 |   animation-duration: 0.6s;
787 |   animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
788 | }
789 | .MenubarContent[data-side="top"] {
790 |   animation-name: slideUp;
791 | }
792 | .MenubarContent[data-side="bottom"] {
793 |   animation-name: slideDown;
794 | }
795 | 
796 | @keyframes slideUp {
797 |   from {
798 |     opacity: 0;
799 |     transform: translateY(10px);
800 |   }
801 |   to {
802 |     opacity: 1;
803 |     transform: translateY(0);
804 |   }
805 | }
806 | 
807 | @keyframes slideDown {
808 |   from {
809 |     opacity: 0;
810 |     transform: translateY(-10px);
811 |   }
812 |   to {
813 |     opacity: 1;
814 |     transform: translateY(0);
815 |   }
816 | }
817 | ```
818 | 
819 | ## Accessibility
820 | 
821 | Adheres to the [Menu Button WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/menubutton) and uses [roving tabindex](https://www.w3.org/WAI/ARIA/apg/patterns/kbd_roving_tabindex) to manage focus movement among menu items.
822 | 
823 | ### Keyboard Interactions
824 | 
825 | <KeyboardTable
826 |   :data="[
827 |     {
828 |       keys: ['Space'],
829 |       description: `
830 |         When focus is on <Code>MenubarTrigger</Code>, opens the menubar and focuses the first item.
831 |         <br />
832 |         When focus is on an item, activates the focused item.
833 |       `,
834 |     },
835 |     {
836 |       keys: ['Enter'],
837 |       description: `
838 |         When focus is on <Code>MenubarTrigger</Code>, opens the associated menu.
839 |         <br />
840 |         When focus is on an item, activates the focused item.
841 |       `,
842 |     },
843 |     {
844 |       keys: ['ArrowDown'],
845 |       description: `
846 |         When focus is on <Code>MenubarTrigger</Code>, opens the associated menu.
847 |         <br />
848 |         When focus is on an item, moves focus to the next item.
849 |       `,
850 |     },
851 |     {
852 |       keys: ['ArrowUp'],
853 |       description: `When focus is on an item, moves focus to the previous item.`,
854 |     },
855 |     {
856 |       keys: ['ArrowRight', 'ArrowLeft'],
857 |       description: `
858 |         When focus is on a <Code>MenubarTrigger</Code>, moves focus to the next or previous item. <br /> When focus is on a <Code>MenubarSubTrigger</Code>, opens or closes the submenu depending on reading direction. <br /> When focus is within a <Code>MenubarContent</Code>, opens the next menu in the menubar
859 |       `,
860 |     },
861 |     {
862 |       keys: ['Esc'],
863 |       description: `
864 |         Closes the currently open menu and moves focus to its <Code>MenubarTrigger</Code>.
865 |       `,
866 |     },
867 |   ]"
868 | />
869 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/navigation-menu.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Navigation Menu
  3 | description: A collection of links for navigating websites.
  4 | name: navigation-menu
  5 | aria: https://www.w3.org/TR/wai-aria/#navigation
  6 | ---
  7 | 
  8 | # Navigation Menu
  9 | 
 10 | <Description>
 11 | A collection of links for navigating websites.
 12 | </Description>
 13 | 
 14 | <ComponentPreview name="NavigationMenu" />
 15 | 
 16 | ## Features
 17 | 
 18 | <Highlights
 19 |   :features="[
 20 |     'Can be controlled or uncontrolled.',
 21 |     'Flexible layout structure with managed tab focus.',
 22 |     'Supports submenus.',
 23 |     'Optional active item indicator.',
 24 |     'Full keyboard navigation.',
 25 |     'Exposes CSS variables for advanced animation.',
 26 |     'Supports custom timings.',
 27 |   ]"
 28 | />
 29 | 
 30 | ## Installation
 31 | 
 32 | Install the component from your command line.
 33 | 
 34 | <InstallationTabs value="reka-ui" />
 35 | 
 36 | ## Anatomy
 37 | 
 38 | Import all parts and piece them together.
 39 | 
 40 | ```vue
 41 | <script setup lang="ts">
 42 | import {
 43 |   NavigationMenuContent,
 44 |   NavigationMenuIndicator,
 45 |   NavigationMenuItem,
 46 |   NavigationMenuLink,
 47 |   NavigationMenuList,
 48 |   NavigationMenuRoot,
 49 |   NavigationMenuSub,
 50 |   NavigationMenuTrigger,
 51 |   NavigationMenuViewport,
 52 | } from 'reka-ui'
 53 | </script>
 54 | 
 55 | <template>
 56 |   <NavigationMenuRoot>
 57 |     <NavigationMenuList>
 58 |       <NavigationMenuItem>
 59 |         <NavigationMenuTrigger />
 60 |         <NavigationMenuContent>
 61 |           <NavigationMenuLink />
 62 |         </NavigationMenuContent>
 63 |       </NavigationMenuItem>
 64 | 
 65 |       <NavigationMenuItem>
 66 |         <NavigationMenuLink />
 67 |       </NavigationMenuItem>
 68 | 
 69 |       <NavigationMenuItem>
 70 |         <NavigationMenuTrigger />
 71 |         <NavigationMenuContent>
 72 |           <NavigationMenuSub>
 73 |             <NavigationMenuList />
 74 |             <NavigationMenuViewport />
 75 |           </NavigationMenuSub>
 76 |         </NavigationMenuContent>
 77 |       </NavigationMenuItem>
 78 | 
 79 |       <NavigationMenuIndicator />
 80 |     </NavigationMenuList>
 81 | 
 82 |     <NavigationMenuViewport />
 83 |   </NavigationMenuRoot>
 84 | </template>
 85 | ```
 86 | 
 87 | ## API Reference
 88 | 
 89 | ### Root
 90 | 
 91 | Contains all the parts of a navigation menu.
 92 | 
 93 | <!-- @include: @/meta/NavigationMenuRoot.md -->
 94 | 
 95 | <DataAttributesTable
 96 |   :data="[
 97 |     {
 98 |       attribute: '[data-orientation]',
 99 |       values: ['vertical', 'horizontal'],
100 |     },
101 |   ]"
102 | />
103 | 
104 | ### Sub
105 | 
106 | Signifies a submenu. Use it in place of the root part when nested to create a submenu.
107 | 
108 | <!-- @include: @/meta/NavigationMenuSub.md -->
109 | 
110 | <DataAttributesTable
111 |   :data="[
112 |     {
113 |       attribute: '[data-orientation]',
114 |       values: ['vertical', 'horizontal'],
115 |     },
116 |   ]"
117 | />
118 | 
119 | ### List
120 | 
121 | Contains the top level menu items.
122 | 
123 | <!-- @include: @/meta/NavigationMenuList.md -->
124 | 
125 | <DataAttributesTable
126 |   :data="[
127 |     {
128 |       attribute: '[data-orientation]',
129 |       values: ['vertical', 'horizontal'],
130 |     },
131 |   ]"
132 | />
133 | 
134 | ### Item
135 | 
136 | A top level menu item, contains a link or trigger with content combination.
137 | 
138 | <!-- @include: @/meta/NavigationMenuItem.md -->
139 | 
140 | ### Trigger
141 | 
142 | The button that toggles the content.
143 | 
144 | <!-- @include: @/meta/NavigationMenuTrigger.md -->
145 | 
146 | <DataAttributesTable
147 |   :data="[
148 |     {
149 |       attribute: '[data-state]',
150 |       values: ['open', 'closed'],
151 |     },
152 |     {
153 |       attribute: '[data-disabled]',
154 |       values: 'Present when disabled',
155 |     },
156 |   ]"
157 | />
158 | 
159 | ### Content
160 | 
161 | Contains the content associated with each trigger.
162 | 
163 | <PresenceCallout />
164 | 
165 | <!-- @include: @/meta/NavigationMenuContent.md -->
166 | 
167 | <DataAttributesTable
168 |   :data="[
169 |     {
170 |       attribute: '[data-state]',
171 |       values: ['open', 'closed'],
172 |     },
173 |     {
174 |       attribute: '[data-motion]',
175 |       values: ['to-start', 'to-end', 'from-start', 'from-end'],
176 |     },
177 |     {
178 |       attribute: '[data-orientation]',
179 |       values: ['vertical', 'horizontal'],
180 |     },
181 |   ]"
182 | />
183 | 
184 | ### Link
185 | 
186 | A navigational link.
187 | 
188 | <!-- @include: @/meta/NavigationMenuLink.md -->
189 | 
190 | <DataAttributesTable
191 |   :data="[
192 |     {
193 |       attribute: '[data-active]',
194 |       values: 'Present when active',
195 |     },
196 |   ]"
197 | />
198 | 
199 | ### Indicator
200 | 
201 | An optional indicator element that renders below the list, is used to highlight the currently active trigger.
202 | 
203 | <PresenceCallout />
204 | 
205 | <!-- @include: @/meta/NavigationMenuIndicator.md -->
206 | 
207 | <DataAttributesTable
208 |   :data="[
209 |     {
210 |       attribute: '[data-state]',
211 |       values: ['visible', 'hidden'],
212 |     },
213 |     {
214 |       attribute: '[data-orientation]',
215 |       values: ['vertical', 'horizontal'],
216 |     },
217 |   ]"
218 | />
219 | 
220 | <CssVariablesTable
221 |   :data="[
222 |     {
223 |       cssVariable: '--reka-navigation-menu-indicator-size',
224 |       description: 'The size of the indicator.',
225 |     },
226 |     {
227 |       cssVariable: '--reka-navigation-menu-indicator-position',
228 |       description: 'The position of the indicator',
229 |     },
230 |   ]"
231 | />
232 | 
233 | ### Viewport
234 | 
235 | An optional viewport element that is used to render active content outside of the list.
236 | 
237 | <PresenceCallout />
238 | 
239 | <!-- @include: @/meta/NavigationMenuViewport.md -->
240 | 
241 | <DataAttributesTable
242 |   :data="[
243 |     {
244 |       attribute: '[data-state]',
245 |       values: ['visible', 'hidden'],
246 |     },
247 |     {
248 |       attribute: '[data-orientation]',
249 |       values: ['vertical', 'horizontal'],
250 |     },
251 |   ]"
252 | />
253 | 
254 | <CssVariablesTable
255 |   :data="[
256 |     {
257 |       cssVariable: '--reka-navigation-menu-viewport-width',
258 |       description: 'The width of the viewport when visible/hidden, computed from the active content',
259 |     },
260 |     {
261 |       cssVariable: '--reka-navigation-menu-viewport-height',
262 |       description: 'The height of the viewport when visible/hidden, computed from the active content',
263 |     },
264 |   ]"
265 | />
266 | 
267 | ## Examples
268 | 
269 | ### Vertical
270 | 
271 | You can create a vertical menu by using the `orientation` prop.
272 | 
273 | ```vue line=16
274 | <script setup lang="ts">
275 | import {
276 |   NavigationMenuContent,
277 |   NavigationMenuIndicator,
278 |   NavigationMenuItem,
279 |   NavigationMenuLink,
280 |   NavigationMenuList,
281 |   NavigationMenuRoot,
282 |   NavigationMenuSub,
283 |   NavigationMenuTrigger,
284 |   NavigationMenuViewport,
285 | } from 'reka-ui'
286 | </script>
287 | 
288 | <template>
289 |   <NavigationMenuRoot orientation="vertical">
290 |     <NavigationMenuList>
291 |       <NavigationMenuItem>
292 |         <NavigationMenuTrigger>Item one</NavigationMenuTrigger>
293 |         <NavigationMenuContent>Item one content</NavigationMenuContent>
294 |       </NavigationMenuItem>
295 |       <NavigationMenuItem>
296 |         <NavigationMenuTrigger>Item two</NavigationMenuTrigger>
297 |         <NavigationMenuContent>Item Two content</NavigationMenuContent>
298 |       </NavigationMenuItem>
299 |     </NavigationMenuList>
300 |   </NavigationMenuRoot>
301 | </template>
302 | ```
303 | 
304 | ### Flexible layouts
305 | 
306 | Use the `Viewport` part when you need extra control over where `Content` is rendered. This can be helpful when your design
307 | requires an adjusted DOM structure or if you need flexibility to achieve [advanced animation](/docs/components/navigation-menu#advanced-animation).
308 | Tab focus will be maintained automatically.
309 | 
310 | ```vue line=26
311 | <script setup lang="ts">
312 | import {
313 |   NavigationMenuContent,
314 |   NavigationMenuItem,
315 |   NavigationMenuList,
316 |   NavigationMenuRoot,
317 |   NavigationMenuTrigger,
318 |   NavigationMenuViewport,
319 | } from 'reka-ui'
320 | </script>
321 | 
322 | <template>
323 |   <NavigationMenuRoot>
324 |     <NavigationMenuList>
325 |       <NavigationMenuItem>
326 |         <NavigationMenuTrigger>Item one</NavigationMenuTrigger>
327 |         <NavigationMenuContent>Item one content</NavigationMenuContent>
328 |       </NavigationMenuItem>
329 |       <NavigationMenuItem>
330 |         <NavigationMenuTrigger>Item two</NavigationMenuTrigger>
331 |         <NavigationMenuContent>Item two content</NavigationMenuContent>
332 |       </NavigationMenuItem>
333 |     </NavigationMenuList>
334 | 
335 |     <!-- NavigationMenuContent will be rendered here when active  -->
336 |     <NavigationMenuViewport />
337 |   </NavigationMenuRoot>
338 | </template>
339 | ```
340 | 
341 | ### With indicator
342 | 
343 | You can use the optional `Indicator` part to highlight the currently active `Trigger`, this is useful when you want to provide
344 | an animated visual cue such as an arrow or highlight to accompany the `Viewport`.
345 | 
346 | ```vue line=24
347 | <script setup lang="ts">
348 | import {
349 |   NavigationMenuContent,
350 |   NavigationMenuItem,
351 |   NavigationMenuList,
352 |   NavigationMenuRoot,
353 |   NavigationMenuTrigger,
354 |   NavigationMenuViewport,
355 | } from 'reka-ui'
356 | </script>
357 | 
358 | <template>
359 |   <NavigationMenuRoot>
360 |     <NavigationMenuList>
361 |       <NavigationMenuItem>
362 |         <NavigationMenuTrigger>Item one</NavigationMenuTrigger>
363 |         <NavigationMenuContent>Item one content</NavigationMenuContent>
364 |       </NavigationMenuItem>
365 |       <NavigationMenuItem>
366 |         <NavigationMenuTrigger>Item two</NavigationMenuTrigger>
367 |         <NavigationMenuContent>Item two content</NavigationMenuContent>
368 |       </NavigationMenuItem>
369 | 
370 |       <NavigationMenuIndicator class="NavigationMenuIndicator" />
371 |     </NavigationMenuList>
372 | 
373 |     <NavigationMenuViewport />
374 |   </NavigationMenuRoot>
375 | </template>
376 | ```
377 | 
378 | ```css
379 | /* styles.css */
380 | .NavigationMenuIndicator {
381 |   background-color: grey;
382 |   position: absolute;
383 |   transition: width, transform, 250ms ease;
384 | }
385 | 
386 | .NavigationMenuIndicator[data-orientation="horizontal"] {
387 |   left: 0;
388 |   height: 3px;
389 |   transform: translateX(var(--reka-navigation-menu-indicator-position));
390 |   width: var(--reka-navigation-menu-indicator-size);
391 | }
392 | ```
393 | 
394 | ### With submenus
395 | 
396 | Create a submenu by nesting your `NavigationMenu` and using the `Sub` part in place of its `Root`.
397 | Submenus work differently to `Root` navigation menus and are similar to [`Tabs`](/docs/components/tabs) in that one item should always be active, so be
398 | sure to assign and set a `defaultValue`.
399 | 
400 | ```vue line=7,23-34
401 | <script setup lang="ts">
402 | import {
403 |   NavigationMenuContent,
404 |   NavigationMenuItem,
405 |   NavigationMenuList,
406 |   NavigationMenuRoot,
407 |   NavigationMenuSub,
408 |   NavigationMenuTrigger,
409 |   NavigationMenuViewport,
410 | } from 'reka-ui'
411 | </script>
412 | 
413 | <template>
414 |   <NavigationMenuRoot>
415 |     <NavigationMenuList>
416 |       <NavigationMenuItem>
417 |         <NavigationMenuTrigger>Item one</NavigationMenuTrigger>
418 |         <NavigationMenuContent>Item one content</NavigationMenuContent>
419 |       </NavigationMenuItem>
420 |       <NavigationMenuItem>
421 |         <NavigationMenuTrigger>Item two</NavigationMenuTrigger>
422 |         <NavigationMenuContent>
423 |           <NavigationMenuSub default-value="sub1">
424 |             <NavigationMenuList>
425 |               <NavigationMenuItem value="sub1">
426 |                 <NavigationMenuTrigger>Sub item one</NavigationMenuTrigger>
427 |                 <NavigationMenuContent> Sub item one content </NavigationMenuContent>
428 |               </NavigationMenuItem>
429 |               <NavigationMenuItem value="sub2">
430 |                 <NavigationMenuTrigger>Sub item two</NavigationMenuTrigger>
431 |                 <NavigationMenuContent> Sub item two content </NavigationMenuContent>
432 |               </NavigationMenuItem>
433 |             </NavigationMenuList>
434 |           </NavigationMenuSub>
435 |         </NavigationMenuContent>
436 |       </NavigationMenuItem>
437 |     </NavigationMenuList>
438 |   </NavigationMenuRoot>
439 | </template>
440 | ```
441 | 
442 | ### With client side routing
443 | 
444 | If you need to use the `RouterLink` component provided by your routing package then we recommend adding `asChild="true"` to `NavigationMenuLink`, or setting `as="RouterLink"`.
445 | This will ensure accessibility and consistent keyboard control is maintained:
446 | 
447 | ```vue line=12-14,19-21
448 | <script setup lang="ts">
449 | import { NavigationMenuItem, NavigationMenuList, NavigationMenuRoot } from 'reka-ui'
450 | 
451 | // RouterLink should be injected by default if using `vue-router`
452 | </script>
453 | 
454 | <template>
455 |   <NavigationMenuRoot>
456 |     <NavigationMenuList>
457 |       <NavigationMenuItem>
458 |         <NavigationMenuLink as-child>
459 |           <RouterLink to="/">
460 |             Home
461 |           </RouterLink>
462 |           <NavigationMenuLink />
463 |         </NavigationMenuLink>
464 |       </NavigationMenuItem>
465 |       <NavigationMenuItem>
466 |         <NavigationMenuLink
467 |           :as="RouterLink"
468 |           to="/about"
469 |         >
470 |           About
471 |         </NavigationMenuLink>
472 |       </NavigationMenuItem>
473 |     </NavigationMenuList>
474 |   </NavigationMenuRoot>
475 | </template>
476 | ```
477 | 
478 | ### Advanced animation
479 | 
480 | We expose `--reka-navigation-menu-viewport-[width|height]` and `data-motion['from-start'|'to-start'|'from-end'|'to-end']` attributes to allow you to animate `Viewport` size and `Content` position based on the enter/exit direction.
481 | 
482 | Combining these with `position: absolute;` allows you to create smooth overlapping animation effects when moving between items.
483 | 
484 | ```vue line=17,23,29
485 | <script setup lang="ts">
486 | import {
487 |   NavigationMenuContent,
488 |   NavigationMenuItem,
489 |   NavigationMenuList,
490 |   NavigationMenuRoot,
491 |   NavigationMenuTrigger,
492 |   NavigationMenuViewport,
493 | } from 'reka-ui'
494 | </script>
495 | 
496 | <template>
497 |   <NavigationMenuRoot>
498 |     <NavigationMenuList>
499 |       <NavigationMenuItem>
500 |         <NavigationMenuTrigger>Item one</NavigationMenuTrigger>
501 |         <NavigationMenuContent class="NavigationMenuContent">
502 |           Item one content
503 |         </NavigationMenuContent>
504 |       </NavigationMenuItem>
505 |       <NavigationMenuItem>
506 |         <NavigationMenuTrigger>Item two</NavigationMenuTrigger>
507 |         <NavigationMenuContent class="NavigationMenuContent">
508 |           Item two content
509 |         </NavigationMenuContent>
510 |       </NavigationMenuItem>
511 |     </NavigationMenuList>
512 | 
513 |     <NavigationMenuViewport class="NavigationMenuViewport" />
514 |   </NavigationMenuRoot>
515 | </template>
516 | ```
517 | 
518 | ```css line=9-20,24,25
519 | /* styles.css */
520 | .NavigationMenuContent {
521 |   position: absolute;
522 |   top: 0;
523 |   left: 0;
524 |   animation-duration: 250ms;
525 |   animation-timing-function: ease;
526 | }
527 | .NavigationMenuContent[data-motion="from-start"] {
528 |   animation-name: enterFromLeft;
529 | }
530 | .NavigationMenuContent[data-motion="from-end"] {
531 |   animation-name: enterFromRight;
532 | }
533 | .NavigationMenuContent[data-motion="to-start"] {
534 |   animation-name: exitToLeft;
535 | }
536 | .NavigationMenuContent[data-motion="to-end"] {
537 |   animation-name: exitToRight;
538 | }
539 | 
540 | .NavigationMenuViewport {
541 |   position: relative;
542 |   width: var(--reka-navigation-menu-viewport-width);
543 |   height: var(--reka-navigation-menu-viewport-height);
544 |   transition: width, height, 250ms ease;
545 | }
546 | 
547 | @keyframes enterFromRight {
548 |   from {
549 |     opacity: 0;
550 |     transform: translateX(200px);
551 |   }
552 |   to {
553 |     opacity: 1;
554 |     transform: translateX(0);
555 |   }
556 | }
557 | 
558 | @keyframes enterFromLeft {
559 |   from {
560 |     opacity: 0;
561 |     transform: translateX(-200px);
562 |   }
563 |   to {
564 |     opacity: 1;
565 |     transform: translateX(0);
566 |   }
567 | }
568 | 
569 | @keyframes exitToRight {
570 |   from {
571 |     opacity: 1;
572 |     transform: translateX(0);
573 |   }
574 |   to {
575 |     opacity: 0;
576 |     transform: translateX(200px);
577 |   }
578 | }
579 | 
580 | @keyframes exitToLeft {
581 |   from {
582 |     opacity: 1;
583 |     transform: translateX(0);
584 |   }
585 |   to {
586 |     opacity: 0;
587 |     transform: translateX(-200px);
588 |   }
589 | }
590 | ```
591 | 
592 | ## Accessibility
593 | 
594 | Adheres to the [`navigation` role requirements](https://www.w3.org/TR/wai-aria-1.2/#navigation).
595 | 
596 | ### Differences to menubar
597 | 
598 | `NavigationMenu` should not be confused with `menubar`, although this primitive shares the name `menu` in the colloquial sense to refer to a set of navigation links, it does not use the WAI-ARIA `menu` role.
599 | This is because `menu` and `menubars` behave like native operating system menus most commonly found in desktop application windows, as such they feature complex functionality like composite focus management and first-character navigation.
600 | 
601 | These features are often considered [unnecessary for website navigation](https://github.com/w3c/aria-practices/issues/353) and at worst can confuse users who are familiar with established website patterns.
602 | 
603 | See the W3C [Disclosure Navigation Menu](https://w3c.github.io/aria-practices/examples/disclosure/disclosure-navigation.html) example for more information.
604 | 
605 | ### Link usage and aria-current
606 | 
607 | It's important to use `NavigationMenuLink` for all navigational links within a menu, this not only applies to the main list
608 | but also within any content rendered via `NavigationMenuContent`. This will ensure consistent keyboard interactions and accessibility
609 | while also giving access to the `active` prop for setting `aria-current` and the active styles.
610 | See [this example](/docs/components/navigation-menu#with-client-side-routing) for more information on usage with third party routing components.
611 | 
612 | ### Keyboard Interactions
613 | 
614 | <KeyboardTable
615 |   :data="[
616 |     {
617 |       keys: ['Space', 'Enter'],
618 |       description: `
619 |         <span>
620 |           When focus is on <code>NavigationMenuTrigger</code>, opens the content.
621 |         </span>
622 |       `,
623 |     },
624 |     {
625 |       keys: ['Tab'],
626 |       description: 'Moves focus to the next focusable element.',
627 |     },
628 |     {
629 |       keys: ['ArrowDown'],
630 |       description: `
631 |         <span>
632 |           When <code>horizontal</code> and focus is on an open
633 |           <code>NavigationMenuTrigger</code>, moves focus into
634 |           <code>NavigationMenuContent</code>.
635 |           <br />
636 |           Moves focus to the next <code>NavigationMenuTrigger</code> or
637 |           <code>NavigationMenuLink</code>.
638 |         </span>
639 |       `,
640 |     },
641 |     {
642 |       keys: ['ArrowUp'],
643 |       description: `
644 |         <span>
645 |           Moves focus to the previous <code>NavigationMenuTrigger</code> or
646 |           <code>NavigationMenuLink</code>.
647 |         </span>
648 |       `,
649 |     },
650 |     {
651 |       keys: ['ArrowRight', 'ArrowLeft'],
652 |       description: `
653 |         <span>
654 |           When <code>vertical</code> and focus is on an open
655 |           <code>NavigationMenuTrigger</code>, moves focus into its
656 |           <code>NavigationMenuContent</code>.
657 |           <br />
658 |           Moves focus to the next / previous <code> NavigationMenuTrigger </code> or <code>NavigationMenuLink</code>.
659 |         </span>
660 |       `,
661 |     },
662 |     {
663 |       keys: ['Home', 'End'],
664 |       description: `
665 |         <span>
666 |           Moves focus to the first/last <code>NavigationMenu.Trigger</code> or
667 |           <code>NavigationMenu.Link</code>.
668 |         </span>
669 |       `,
670 |     },
671 |     {
672 |       keys: ['Esc'],
673 |       description: `
674 |         <span>
675 |           Closes open <code>NavigationMenu.Content</code> and moves focus to its
676 |           <code>NavigationMenu.Trigger</code>.
677 |         </span>
678 |       `,
679 |     },
680 |   ]"
681 | />
682 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/number-field.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Number Field
  4 | description: A number field allows a user to enter a number and increment or decrement the value using stepper buttons.
  5 | name: number field
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton
  7 | ---
  8 | 
  9 | # Number Field
 10 | 
 11 | <Description>
 12 | A number field allows a user to enter a number and increment or decrement the value using stepper buttons.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="NumberField" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation.',
 22 |     'Can be controlled or uncontrolled.',
 23 |     'Support button hold and wheel event.',
 24 |     'Support numbering systems in different locale.',
 25 |     'Customizable formatting.'
 26 |   ]"
 27 | />
 28 | 
 29 | ## Installation
 30 | 
 31 | Install the number package.
 32 | 
 33 | <InstallationTabs value="@internationalized/number" />
 34 | 
 35 | Install the component from your command line.
 36 | 
 37 | <InstallationTabs value="reka-ui" />
 38 | 
 39 | ## Anatomy
 40 | 
 41 | Import all parts and piece them together.
 42 | 
 43 | ```vue
 44 | <script setup>
 45 | import { NumberFieldDecrement, NumberFieldIncrement, NumberFieldInput, NumberFieldRoot } from 'reka-ui'
 46 | </script>
 47 | 
 48 | <template>
 49 |   <NumberFieldRoot>
 50 |     <NumberFieldDecrement />
 51 |     <NumberFieldInput />
 52 |     <NumberFieldIncrement />
 53 |   </NumberFieldRoot>
 54 | </template>
 55 | ```
 56 | 
 57 | ## API Reference
 58 | 
 59 | ### Root
 60 | 
 61 | Contains all the parts of a number field. An `input` will also render when used within a `form` to ensure events propagate correctly.
 62 | 
 63 | <!-- @include: @/meta/NumberFieldRoot.md -->
 64 | 
 65 | <DataAttributesTable
 66 |   :data="[
 67 |     {
 68 |       attribute: '[data-disabled]',
 69 |       values: 'Present when disabled',
 70 |     },
 71 |   ]"
 72 | />
 73 | 
 74 | ### Input
 75 | 
 76 | Input
 77 | 
 78 | The input component that renders the text value based on value and format options.
 79 | 
 80 | <!-- @include: @/meta/NumberFieldInput.md -->
 81 | 
 82 | <DataAttributesTable
 83 |   :data="[
 84 |     {
 85 |       attribute: '[data-disabled]',
 86 |       values: 'Present when disabled',
 87 |     },
 88 |   ]"
 89 | />
 90 | 
 91 | ### Increment
 92 | 
 93 | The button that increases the value.
 94 | 
 95 | <!-- @include: @/meta/NumberFieldIncrement.md -->
 96 | 
 97 | <DataAttributesTable
 98 |   :data="[
 99 |     {
100 |       attribute: '[data-pressed]',
101 |       values: 'Present when pressed',
102 |     },
103 |     {
104 |       attribute: '[data-disabled]',
105 |       values: 'Present when disabled',
106 |     },
107 |   ]"
108 | />
109 | 
110 | ### Decrement
111 | 
112 | The button that decreases the value.
113 | 
114 | <!-- @include: @/meta/NumberFieldDecrement.md -->
115 | 
116 | <DataAttributesTable
117 |   :data="[
118 |     {
119 |       attribute: '[data-pressed]',
120 |       values: 'Present when pressed',
121 |     },
122 |     {
123 |       attribute: '[data-disabled]',
124 |       values: 'Present when disabled',
125 |     },
126 |   ]"
127 | />
128 | 
129 | ## Example
130 | 
131 | ### Decimal
132 | 
133 | All options supported by `Intl.NumberFormat` are supported, including configuration of minimum and maximum fraction digits, sign display, grouping separators, etc.
134 | 
135 | ```vue line=3-7
136 | <template>
137 |   <NumberFieldRoot
138 |     :default-value="5"
139 |     :format-options="{
140 |       signDisplay: 'exceptZero',
141 |       minimumFractionDigits: 1,
142 |     }"
143 |   >
144 |     …
145 |   </NumberFieldRoot>
146 | </template>
147 | ```
148 | 
149 | ### Percentage
150 | 
151 | You can set `formatOptions.style` to `percent` to treat the value as a percentage. You need to set the step to 0.01 manually to allow an appropriate step size in this mode.
152 | 
153 | ```vue line=3-7
154 | <template>
155 |   <NumberFieldRoot
156 |     :default-value="0.05"
157 |     :step="0.01"
158 |     :format-options="{
159 |       style: 'percent',
160 |     }"
161 |   >
162 |     …
163 |   </NumberFieldRoot>
164 | </template>
165 | ```
166 | 
167 | ### Currency
168 | 
169 | You can set `formatOptions.style` to `currency` to treat the value as a currency value. The currency option must also be passed to set the currency code (e.g., USD).
170 | 
171 | If you need to allow the user to change the currency, you should include a separate dropdown next to the number field. The number field itself will not determine the currency from the user input.
172 | 
173 | ```vue line=4-9
174 | <template>
175 |   <NumberFieldRoot
176 |     :default-value="5"
177 |     :format-options="{
178 |       style: 'currency',
179 |       currency: 'EUR',
180 |       currencyDisplay: 'code',
181 |       currencySign: 'accounting',
182 |     }"
183 |   >
184 |     …
185 |   </NumberFieldRoot>
186 | </template>
187 | ```
188 | 
189 | ## Accessibility
190 | 
191 | Adheres to the [Spinbutton WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton).
192 | 
193 | ### Keyboard Interactions
194 | 
195 | <KeyboardTable
196 |   :data="[
197 |     {
198 |       keys: ['Arrow Up'],
199 |       description: 'Increase the value',
200 |     },
201 |     {
202 |       keys: ['Arrow Down'],
203 |       description: 'Decrease the value',
204 |     },
205 |     {
206 |       keys: ['Page Up'],
207 |       description: 'Increase the value by scale of 10',
208 |     },
209 |     {
210 |       keys: ['Page Down'],
211 |       description: 'Decrease the value by scale of 10',
212 |     },
213 |     {
214 |       keys: ['Home'],
215 |       description: 'Set value to minimum (if <code>min</code> is provided)',
216 |     },
217 |     {
218 |       keys: ['End'],
219 |       description: 'Set value to maximum (if <code>max</code> is provided)',
220 |     },
221 |   ]"
222 | />
223 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/pagination.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Pagination
  3 | description: Displays data in paged format and provides navigation between pages.
  4 | name: pagination
  5 | ---
  6 | 
  7 | # Pagination
  8 | 
  9 | <Description>
 10 | Displays data in paged format and provides navigation between pages.
 11 | </Description>
 12 | 
 13 | <ComponentPreview name="Pagination" />
 14 | 
 15 | ## Features
 16 | 
 17 | <Highlights
 18 |   :features="[
 19 |     'Enable quick access to first, or last page',
 20 |     'Enable to show edges constantly, or not',
 21 |   ]"
 22 | />
 23 | 
 24 | ## Installation
 25 | 
 26 | Install the component from your command line.
 27 | 
 28 | <InstallationTabs value="reka-ui" />
 29 | 
 30 | ### Anatomy
 31 | 
 32 | Import all parts and piece them together.
 33 | 
 34 | ```vue
 35 | <script setup>
 36 | import { PaginationEllipsis, PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationNext, PaginationPrev, PaginationRoot } from 'reka-ui'
 37 | </script>
 38 | 
 39 | <template>
 40 |   <PaginationRoot>
 41 |     <PaginationList v-slot="{ items }">
 42 |       <PaginationFirst />
 43 |       <PaginationPrev />
 44 |       <template v-for="(page, index) in items">
 45 |         <PaginationListItem
 46 |           v-if="page.type === 'page'"
 47 |           :key="index"
 48 |         />
 49 |         <PaginationEllipsis
 50 |           v-else
 51 |           :key="page.type"
 52 |           :index="index"
 53 |         >
 54 |           &#8230;
 55 |         </PaginationEllipsis>
 56 |       </template>
 57 |       <PaginationNext />
 58 |       <PaginationLast />
 59 |     </PaginationList>
 60 |   </PaginationRoot>
 61 | </template>
 62 | ```
 63 | 
 64 | ## API Reference
 65 | 
 66 | ### Root
 67 | 
 68 | Contains all of the paginations parts.
 69 | 
 70 | <!-- @include: @/meta/PaginationRoot.md -->
 71 | 
 72 | ### List
 73 | 
 74 | Used to show the list of pages. It also makes pagination accessible to assistive technologies.
 75 | 
 76 | <!-- @include: @/meta/PaginationList.md -->
 77 | 
 78 | ### Item
 79 | 
 80 | Used to render the button that changes the current page.
 81 | 
 82 | <!-- @include: @/meta/PaginationItem.md -->
 83 | 
 84 | <DataAttributesTable
 85 |   :data="[
 86 |     {
 87 |       attribute: '[data-selected]',
 88 |       values: ['true' , ''],
 89 |     },
 90 |     {
 91 |       attribute: '[data-type]',
 92 |       values: ['page'],
 93 |     }
 94 |   ]"
 95 | />
 96 | 
 97 | ### Ellipsis
 98 | 
 99 | Placeholder element when the list is long, and only a small amount of `siblingCount` was set and `showEdges` was set to `true`.
100 | 
101 | <!-- @include: @/meta/PaginationEllipsis.md -->
102 | 
103 | <DataAttributesTable
104 |   :data="[
105 |     {
106 |       attribute: '[data-type]',
107 |       values: ['ellipsis'],
108 |     }
109 |   ]"
110 | />
111 | 
112 | ### First
113 | 
114 | Triggers that set the page value to 1
115 | 
116 | <!-- @include: @/meta/PaginationFirst.md -->
117 | 
118 | ### Prev
119 | 
120 | Triggers that set the page value to the previous page
121 | 
122 | <!-- @include: @/meta/PaginationPrev.md -->
123 | 
124 | ### Next
125 | 
126 | Triggers that set the page value to the next page
127 | 
128 | <!-- @include: @/meta/PaginationNext.md -->
129 | 
130 | ### Last
131 | 
132 | Triggers that set the page value to the last page
133 | 
134 | <!-- @include: @/meta/PaginationLast.md -->
135 | 
136 | ## Examples
137 | 
138 | ### With ellipsis
139 | 
140 | You can add `PaginationEllipsis` as a visual cue for more previous and after items.
141 | 
142 | ```vue line=10,14
143 | <script setup lang="ts">
144 | import { PaginationEllipsis, PaginationList, PaginationListItem, PaginationRoot } from 'reka-ui'
145 | </script>
146 | 
147 | <template>
148 |   <PaginationRoot>
149 |     <PaginationList v-slot="{ items }">
150 |       <template v-for="(page, index) in items">
151 |         <PaginationListItem
152 |           v-if="page.type === 'page'"
153 |           :key="index"
154 |         />
155 |         <PaginationEllipsis
156 |           v-else
157 |           :key="page.type"
158 |           :index="index"
159 |         >
160 |           &#8230;
161 |         </PaginationEllipsis>
162 |       </template>
163 |     </PaginationList>
164 |   </PaginationRoot>
165 | </template>
166 | ```
167 | 
168 | ### With first/last button
169 | 
170 | You can add `PaginationFirst` to allow user to navigate to first page, or `PaginationLast` to navigate to last page.
171 | 
172 | ```vue line=8,10
173 | <script setup lang="ts">
174 | import { PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationRoot } from 'reka-ui'
175 | </script>
176 | 
177 | <template>
178 |   <PaginationRoot>
179 |     <PaginationList>
180 |       <PaginationFirst />
181 |       ...
182 |       <PaginationLast />
183 |     </PaginationList>
184 |   </PaginationRoot>
185 | </template>
186 | ```
187 | 
188 | ### Control page programmatically
189 | 
190 | You can control the current page by passing it a reactive value.
191 | 
192 | ```vue line=6,10,11
193 | <script setup lang="ts">
194 | import { PaginationRoot } from 'reka-ui'
195 | import { ref } from 'vue'
196 | import { Select } from './custom-select'
197 | 
198 | const currentPage = ref(1)
199 | </script>
200 | 
201 | <template>
202 |   <Select v-model="currentPage" />
203 |   <PaginationRoot v-model:page="currentPage">
204 |     ...
205 |   </PaginationRoot>
206 | </template>
207 | ```
208 | 
209 | ## Keyboard Interactions
210 | 
211 | <KeyboardTable
212 |   :data="[
213 |     {
214 |       keys: ['Tab'],
215 |       description: 'Moves focus to the next focusable element.',
216 |     },
217 |     {
218 |       keys: ['Space'],
219 |       description: `
220 |         <span>
221 |           When focus is on a any trigger, trigger selected page or arrow navigation
222 |         </span>`
223 |     },
224 |     {
225 |       keys: ['Enter'],
226 |       description:  `
227 |         <span>
228 |           When focus is on a any trigger, trigger selected page or arrow navigation
229 |         </span>`
230 |     },
231 |   ]"
232 | />
233 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/pin-input.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Pin Input
  4 | description: A sequence of one-character alphanumeric inputs.
  5 | name: pin-input
  6 | ---
  7 | 
  8 | # Pin Input
  9 | 
 10 | <Description>
 11 | A sequence of one-character alphanumeric inputs.
 12 | </Description>
 13 | 
 14 | <ComponentPreview name="PinInput" />
 15 | 
 16 | ## Features
 17 | 
 18 | <Highlights
 19 |   :features="[
 20 |     'Full keyboard navigation.',
 21 |     'Can be controlled or uncontrolled.',
 22 |     'Supports pasting from clipboard',
 23 |     'Emit event when inputs were filled.'
 24 |   ]"
 25 | />
 26 | 
 27 | ## Installation
 28 | 
 29 | Install the component from your command line.
 30 | 
 31 | <InstallationTabs value="reka-ui" />
 32 | 
 33 | ## Anatomy
 34 | 
 35 | Import all parts and piece them together.
 36 | 
 37 | ```vue
 38 | <script setup>
 39 | import { PinInputInput, PinInputRoot } from 'reka-ui'
 40 | </script>
 41 | 
 42 | <template>
 43 |   <PinInputRoot>
 44 |     <PinInputInput />
 45 |   </PinInputRoot>
 46 | </template>
 47 | ```
 48 | 
 49 | ## API Reference
 50 | 
 51 | ### Root
 52 | 
 53 | Contains all the parts of a checkbox. An `input` will also render when used within a `form` to ensure events propagate correctly.
 54 | 
 55 | <!-- @include: @/meta/PinInputRoot.md -->
 56 | 
 57 | <DataAttributesTable
 58 |   :data="[
 59 |     {
 60 |       attribute: '[data-complete]',
 61 |       values: 'Present when completed',
 62 |     },
 63 |     {
 64 |       attribute: '[data-disabled]',
 65 |       values: 'Present when disabled',
 66 |     },
 67 |   ]"
 68 | />
 69 | 
 70 | ### Input
 71 | 
 72 | Input field for Pin Input. You can add as many input as you like.
 73 | 
 74 | <!-- @include: @/meta/PinInputInput.md -->
 75 | 
 76 | <DataAttributesTable
 77 |   :data="[
 78 |     {
 79 |       attribute: '[data-complete]',
 80 |       values: 'Present when completed',
 81 |     },
 82 |     {
 83 |       attribute: '[data-disabled]',
 84 |       values: 'Present when disabled',
 85 |     },
 86 |   ]"
 87 | />
 88 | 
 89 | ## Examples
 90 | 
 91 | ### OTP mode
 92 | 
 93 | You can set the pin input to `otp` mode by setting otp to `true`.
 94 | 
 95 | ```vue{6}
 96 | <script setup lang="ts">
 97 | import { Label, PinInputInput, PinInputRoot } from 'reka-ui'
 98 | </script>
 99 | 
100 | <template>
101 |   <PinInputRoot v-model="value" otp>
102 |     …
103 |   </PinInputRoot>
104 | </template>
105 | ```
106 | 
107 | ### Numeric mode
108 | 
109 | You can set the pin input to only accept `number` type by setting type to `number`.
110 | 
111 | ```vue{6}
112 | <script setup lang="ts">
113 | import { Label, PinInputInput, PinInputRoot } from 'reka-ui'
114 | </script>
115 | 
116 | <template>
117 |   <PinInputRoot v-model="value" type="number">
118 |     …
119 |   </PinInputRoot>
120 | </template>
121 | ```
122 | 
123 | ## Accessibility
124 | 
125 | ### Keyboard Interactions
126 | 
127 | <KeyboardTable
128 |   :data="[
129 |     {
130 |       keys: ['ArrowLeft'],
131 |       description: 'Focus on previous input.',
132 |     },
133 |     {
134 |       keys: ['ArrowRight'],
135 |       description: 'Focus on next input.',
136 |     },
137 |     {
138 |       keys: ['Home'],
139 |       description: 'Focus on the first input.',
140 |     },
141 |     {
142 |       keys: ['End'],
143 |       description: 'Focus on the last input.',
144 |     },
145 |     {
146 |       keys: ['Backspace'],
147 |       description: 'Deletes the value of the current input. If the input is empty, moves to the previous input and deletes that value as well.',
148 |     },
149 |     {
150 |       keys: ['Delete'],
151 |       description: 'Deletes the value of the current input.',
152 |     },
153 |     {
154 |       keys: ['Ctrl + V'],
155 |       description: `
156 | Pastes the contents of the clipboard into the pin input. If the number of characters in the clipboard equals exceeds the number of inputs, the contents are pasted from the first input. Otherwise, the contents are pasted from the current input onwards.`,
157 |     }
158 |   ]"
159 | />
160 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/popover.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Popover
  4 | description: Displays rich content in a portal, triggered by a button.
  5 | name: popover
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/
  7 | ---
  8 | 
  9 | # Popover
 10 | 
 11 | <Description>
 12 | Displays rich content in a portal, triggered by a button.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Popover" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Can be controlled or uncontrolled.',
 22 |     'Customize side, alignment, offsets, collision handling.',
 23 |     'Optionally render a pointing arrow.',
 24 |     'Focus is fully managed and customizable.',
 25 |     'Supports modal and non-modal modes.',
 26 |     'Dismissing and layering behavior is highly customizable.',
 27 |   ]"
 28 | />
 29 | 
 30 | ## Installation
 31 | 
 32 | Install the component from your command line.
 33 | 
 34 | <InstallationTabs value="reka-ui" />
 35 | 
 36 | ## Anatomy
 37 | 
 38 | Import all parts and piece them together.
 39 | 
 40 | ```vue
 41 | <script setup>
 42 | import { PopoverAnchor, PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'
 43 | </script>
 44 | 
 45 | <template>
 46 |   <PopoverRoot>
 47 |     <PopoverTrigger />
 48 |     <PopoverAnchor />
 49 |     <PopoverPortal>
 50 |       <PopoverContent>
 51 |         <PopoverClose />
 52 |         <PopoverArrow />
 53 |       </PopoverContent>
 54 |     </PopoverPortal>
 55 |   </PopoverRoot>
 56 | </template>
 57 | ```
 58 | 
 59 | ## API Reference
 60 | 
 61 | ### Root
 62 | 
 63 | Contains all the parts of a popover.
 64 | 
 65 | <!-- @include: @/meta/PopoverRoot.md -->
 66 | 
 67 | ### Trigger
 68 | 
 69 | The button that toggles the popover. By default, the `PopoverContent` will position itself against the trigger.
 70 | 
 71 | <!-- @include: @/meta/PopoverTrigger.md -->
 72 | 
 73 | <DataAttributesTable
 74 |   :data="[
 75 |     {
 76 |       attribute: '[data-state]',
 77 |       values: ['open', 'closed'],
 78 |     },
 79 |   ]"
 80 | />
 81 | 
 82 | ### Anchor
 83 | 
 84 | An optional element to position the `PopoverContent` against. If this part is not used, the content will position alongside the <code>PopoverTrigger</code>.
 85 | 
 86 | <!-- @include: @/meta/PopoverAnchor.md -->
 87 | 
 88 | ### Portal
 89 | 
 90 | When used, portals the content part into the `body`.
 91 | 
 92 | <!-- @include: @/meta/PopoverPortal.md -->
 93 | 
 94 | ### Content
 95 | 
 96 | The component that pops out when the popover is open.
 97 | 
 98 | <PresenceCallout />
 99 | 
100 | <!-- @include: @/meta/PopoverContent.md -->
101 | 
102 | <DataAttributesTable
103 |   :data="[
104 |     {
105 |       attribute: '[data-state]',
106 |       values: ['open', 'closed'],
107 |     },
108 |     {
109 |       attribute: '[data-side]',
110 |       values: ['left', 'right', 'bottom', 'top'],
111 |     },
112 |     {
113 |       attribute: '[data-align]',
114 |       values: ['start', 'end', 'center'],
115 |     },
116 |   ]"
117 | />
118 | 
119 | <CssVariablesTable
120 |   :data="[
121 |     {
122 |       cssVariable: '--reka-popover-content-transform-origin',
123 |       description: ' The <code>transform-origin</code> computed from the content and arrow positions/offsets',
124 |     },
125 |     {
126 |       cssVariable: '--reka-popover-content-available-width',
127 |       description: 'The remaining width between the trigger and the boundary edge',
128 |     },
129 |     {
130 |       cssVariable: '--reka-popover-content-available-height',
131 |       description: 'The remaining height between the trigger and the boundary edge',
132 |     },
133 |     {
134 |       cssVariable: '--reka-popover-trigger-width',
135 |       description: 'The width of the trigger',
136 |     },
137 |     {
138 |       cssVariable: '--reka-popover-trigger-height',
139 |       description: 'The height of the trigger',
140 |     },
141 |   ]"
142 | />
143 | 
144 | ### Arrow
145 | 
146 | An optional arrow element to render alongside the popover. This can be used to help visually link the anchor with the `PopoverContent`. Must be rendered inside `PopoverContent`.
147 | 
148 | <!-- @include: @/meta/PopoverArrow.md -->
149 | 
150 | ### Close
151 | 
152 | The button that closes an open popover.
153 | 
154 | <!-- @include: @/meta/PopoverClose.md -->
155 | 
156 | ## Examples
157 | 
158 | ### Constrain the content size
159 | 
160 | You may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.
161 | 
162 | We expose several CSS custom properties such as `--reka-popover-trigger-width` and `--reka-popover-content-available-height` to support this. Use them to constrain the content dimensions.
163 | 
164 | ```vue line=10,11
165 | <script setup>
166 | import { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'
167 | </script>
168 | 
169 | <template>
170 |   <PopoverRoot>
171 |     <PopoverTrigger>…</PopoverTrigger>
172 |     <PopoverPortal>
173 |       <PopoverContent
174 |         class="PopoverContent"
175 |         :side-offset="5"
176 |       >
177 |         …
178 |       </PopoverContent>
179 |     </PopoverPortal>
180 |   </PopoverRoot>
181 | </template>
182 | ```
183 | 
184 | ```css line=3,4
185 | /* styles.css */
186 | .PopoverContent {
187 |   width: var(--reka-popover-trigger-width);
188 |   max-height: var(--reka-popover-content-available-height);
189 | }
190 | ```
191 | 
192 | ### Origin-aware animations
193 | 
194 | We expose a CSS custom property `--reka-popover-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.
195 | 
196 | ```vue line=9
197 | <script setup>
198 | import { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'
199 | </script>
200 | 
201 | <template>
202 |   <PopoverRoot>
203 |     <PopoverTrigger>…</PopoverTrigger>
204 |     <PopoverPortal>
205 |       <PopoverContent class="PopoverContent">
206 |         …
207 |       </PopoverContent>
208 |     </PopoverPortal>
209 |   </PopoverRoot>
210 | </template>
211 | ```
212 | 
213 | ```css line=3
214 | /* styles.css */
215 | .PopoverContent {
216 |   transform-origin: var(--reka-popover-content-transform-origin);
217 |   animation: scaleIn 0.5s ease-out;
218 | }
219 | 
220 | @keyframes scaleIn {
221 |   from {
222 |     opacity: 0;
223 |     transform: scale(0);
224 |   }
225 |   to {
226 |     opacity: 1;
227 |     transform: scale(1);
228 |   }
229 | }
230 | ```
231 | 
232 | ### Collision-aware animations
233 | 
234 | We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.
235 | 
236 | ```vue line=9
237 | <script setup>
238 | import { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'
239 | </script>
240 | 
241 | <template>
242 |   <PopoverRoot>
243 |     <PopoverTrigger>…</PopoverTrigger>
244 |     <PopoverPortal>
245 |       <PopoverContent class="PopoverContent">
246 |         …
247 |       </PopoverContent>
248 |     </PopoverPortal>
249 |   </PopoverRoot>
250 | </template>
251 | ```
252 | 
253 | ```css line=6-11
254 | /* styles.css */
255 | .PopoverContent {
256 |   animation-duration: 0.6s;
257 |   animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
258 | }
259 | .PopoverContent[data-side="top"] {
260 |   animation-name: slideUp;
261 | }
262 | .PopoverContent[data-side="bottom"] {
263 |   animation-name: slideDown;
264 | }
265 | 
266 | @keyframes slideDown {
267 |   from {
268 |     opacity: 0;
269 |     transform: translateY(-10px);
270 |   }
271 |   to {
272 |     opacity: 1;
273 |     transform: translateY(0);
274 |   }
275 | }
276 | 
277 | @keyframes slideUp {
278 |   from {
279 |     opacity: 0;
280 |     transform: translateY(10px);
281 |   }
282 |   to {
283 |     opacity: 1;
284 |     transform: translateY(0);
285 |   }
286 | }
287 | ```
288 | 
289 | ### With custom anchor
290 | 
291 | You can anchor the content to another element if you do not want to use the trigger as the anchor.
292 | 
293 | ```vue line=7-11
294 | <script setup>
295 | import { PopoverAnchor, PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'
296 | </script>
297 | 
298 | <template>
299 |   <PopoverRoot>
300 |     <PopoverAnchor as-child>
301 |       <div class="Row">
302 |         Row as anchor <PopoverTrigger>Trigger</PopoverTrigger>
303 |       </div>
304 |     </PopoverAnchor>
305 | 
306 |     <PopoverPortal>
307 |       <PopoverContent>…</PopoverContent>
308 |     </PopoverPortal>
309 |   </PopoverRoot>
310 | </template>
311 | ```
312 | 
313 | ```css
314 | /* styles.css */
315 | .Row {
316 |   background-color: gainsboro;
317 |   padding: 20px;
318 | }
319 | ```
320 | 
321 | ## Accessibility
322 | 
323 | Adheres to the [Dialog WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/).
324 | 
325 | ### Keyboard Interactions
326 | 
327 | <KeyboardTable
328 |   :data="[
329 |     {
330 |       keys: ['Space'],
331 |       description: 'Opens/closes the popover.',
332 |     },
333 |     {
334 |       keys: ['Enter'],
335 |       description: 'Opens/closes the popover.',
336 |     },
337 |     {
338 |       keys: ['Tab'],
339 |       description: 'Moves focus to the next focusable element',
340 |     },
341 |     {
342 |       keys: ['Shift + Tab'],
343 |       description: 'Moves focus to the previous focusable element',
344 |     },
345 |     {
346 |       keys: ['Esc'],
347 |       description: '<span> Closes the popover and moves focus to <code>PopoverTrigger</code>.</span>',
348 |     },
349 |   ]"
350 | />
351 | 
352 | ## Custom APIs
353 | 
354 | Create your own API by abstracting the primitive parts into your own component.
355 | 
356 | #### Abstract the arrow and set default configuration
357 | 
358 | This example abstracts the `PopoverArrow` part and sets a default `sideOffset` configuration.
359 | 
360 | #### Usage
361 | 
362 | ```vue
363 | <script setup lang="ts">
364 | import { Popover, PopoverContent, PopoverTrigger } from './your-popover'
365 | </script>
366 | 
367 | <template>
368 |   <Popover>
369 |     <PopoverTrigger>Popover trigger</PopoverTrigger>
370 |     <PopoverContent>Popover content</PopoverContent>
371 |   </Popover>
372 | </template>
373 | ```
374 | 
375 | #### Implementation
376 | 
377 | ```ts
378 | // your-popover.ts
379 | export { default as PopoverContent } from 'PopoverContent.vue'
380 | 
381 | export { PopoverRoot as Popover, PopoverTrigger } from 'reka-ui'
382 | ```
383 | 
384 | ```vue
385 | <!-- PopoverContent.vue -->
386 | <script setup lang="ts">
387 | import type { PopoverContentEmits, PopoverContentProps } from 'reka-ui'
388 | import { PopoverContent, PopoverPortal, useForwardPropsEmits } from 'reka-ui'
389 | 
390 | const props = defineProps<PopoverContentProps>()
391 | const emits = defineEmits<PopoverContentEmits>()
392 | 
393 | const forwarded = useForwardPropsEmits(props, emits)
394 | </script>
395 | 
396 | <template>
397 |   <PopoverPortal>
398 |     <PopoverContent v-bind="{ ...forwarded, ...$attrs }">
399 |       <slot />
400 |     </PopoverContent>
401 |   </PopoverPortal>
402 | </template>
403 | ```
404 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/progress.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Progress
 4 | description: Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.
 5 | name: progress
 6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/meter
 7 | ---
 8 | 
 9 | # Progress
10 | 
11 | <Description>
12 | Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.
13 | </Description>
14 | 
15 | <ComponentPreview name="Progress" />
16 | 
17 | ## Features
18 | 
19 | <Highlights
20 |   :features="[
21 |     'Provides context for assistive technology to read the progress of a task.',
22 |   ]"
23 | />
24 | 
25 | ## Installation
26 | 
27 | Install the component from your command line.
28 | 
29 | <InstallationTabs value="reka-ui" />
30 | 
31 | ### Anatomy
32 | 
33 | Import all parts and piece them together.
34 | 
35 | ```vue
36 | <script setup>
37 | import { ProgressIndicator, ProgressRoot } from 'reka-ui'
38 | </script>
39 | 
40 | <template>
41 |   <ProgressRoot>
42 |     <ProgressIndicator />
43 |   </ProgressRoot>
44 | </template>
45 | ```
46 | 
47 | ## Accessibility
48 | 
49 | Adheres to the [`progressbar` role requirements](https://www.w3.org/WAI/ARIA/apg/patterns/meter).
50 | 
51 | ## API Reference
52 | 
53 | ### Root
54 | 
55 | Contains all of the progress parts.
56 | 
57 | <!-- @include: @/meta/ProgressRoot.md -->
58 | 
59 | <DataAttributesTable
60 |   :data="[
61 |     {
62 |       attribute: '[data-state]',
63 |       values: ['complete', 'indeterminate', 'loading'],
64 |     },
65 |     {
66 |       attribute: '[data-value]',
67 |       values: 'The current value',
68 |     },
69 |     {
70 |       attribute: '[data-max]',
71 |       values: 'The max value',
72 |     },
73 |   ]"
74 | />
75 | 
76 | ### Indicator
77 | 
78 | Used to show the progress visually. It also makes progress accessible to assistive technologies.
79 | 
80 | <!-- @include: @/meta/ProgressIndicator.md -->
81 | 
82 | <DataAttributesTable
83 |   :data="[
84 |     {
85 |       attribute: '[data-state]',
86 |       values: ['complete', 'indeterminate', 'loading'],
87 |     },
88 |     {
89 |       attribute: '[data-value]',
90 |       values: 'The current value',
91 |     },
92 |     {
93 |       attribute: '[data-max]',
94 |       values: 'The max value',
95 |     },
96 |   ]"
97 | />
98 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/radio-group.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Radio Group
  4 | description: A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.
  5 | name: radio-group
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton
  7 | ---
  8 | 
  9 | # RadioGroup
 10 | 
 11 | <Description>
 12 | A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="RadioGroup" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation.',
 22 |     'Supports horizontal/vertical orientation.',
 23 |     'Can be controlled or uncontrolled.',
 24 |   ]"
 25 | />
 26 | 
 27 | ## Installation
 28 | 
 29 | Install the component from your command line.
 30 | 
 31 | <InstallationTabs value="reka-ui" />
 32 | 
 33 | ## Anatomy
 34 | 
 35 | Import all parts and piece them together.
 36 | 
 37 | ```vue
 38 | <script setup>
 39 | import { RadioGroupIndicator, RadioGroupItem, RadioGroupRoot } from 'reka-ui'
 40 | </script>
 41 | 
 42 | <template>
 43 |   <RadioGroupRoot>
 44 |     <RadioGroupItem>
 45 |       <RadioGroupIndicator />
 46 |     </RadioGroupItem>
 47 |   </RadioGroupRoot>
 48 | </template>
 49 | ```
 50 | 
 51 | ## API Reference
 52 | 
 53 | ### Root
 54 | 
 55 | Contains all the parts of a radio group.
 56 | 
 57 | <!-- @include: @/meta/RadioGroupRoot.md -->
 58 | 
 59 | <DataAttributesTable
 60 |   :data="[
 61 |     {
 62 |       attribute: '[data-disabled]',
 63 |       values: 'Present when disabled',
 64 |     },
 65 |   ]"
 66 | />
 67 | 
 68 | ### Item
 69 | 
 70 | An item in the group that can be checked. An `input` will also render when used within a `form` to ensure events propagate correctly.
 71 | 
 72 | <!-- @include: @/meta/RadioGroupItem.md -->
 73 | 
 74 | <DataAttributesTable
 75 |   :data="[
 76 |     {
 77 |       attribute: '[data-state]',
 78 |       values: ['checked', 'unchecked'],
 79 |     },
 80 |     {
 81 |       attribute: '[data-disabled]',
 82 |       values: 'Present when disabled',
 83 |     },
 84 |   ]"
 85 | />
 86 | 
 87 | ### Indicator
 88 | 
 89 | Renders when the radio item is in a checked state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
 90 | 
 91 | <PresenceCallout />
 92 | 
 93 | <!-- @include: @/meta/RadioGroupIndicator.md -->
 94 | 
 95 | <DataAttributesTable
 96 |   :data="[
 97 |     {
 98 |       attribute: '[data-state]',
 99 |       values: ['checked', 'unchecked'],
100 |     },
101 |     {
102 |       attribute: '[data-disabled]',
103 |       values: 'Present when disabled',
104 |     },
105 |   ]"
106 | />
107 | 
108 | ## Accessibility
109 | 
110 | Adheres to the [Radio Group WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton) and uses [roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/examples/radio/radio.html) to manage focus movement among radio items.
111 | 
112 | ### Keyboard Interactions
113 | 
114 | <KeyboardTable
115 |   :data="[
116 |     {
117 |       keys: ['Tab'],
118 |       description: 'Moves focus to either the checked radio item or the first radio item in the group.',
119 |     },
120 |     {
121 |       keys: ['Space'],
122 |       description: 'When focus is on an unchecked radio item, checks it.',
123 |     },
124 |     {
125 |       keys: ['ArrowDown'],
126 |       description: 'Moves focus and checks the next radio item in the group.',
127 |     },
128 |     {
129 |       keys: ['ArrowRight'],
130 |       description: 'Moves focus and checks the next radio item in the group.',
131 |     },
132 |     {
133 |       keys: ['ArrowUp'],
134 |       description: 'Moves focus to the previous radio item in the group.',
135 |     },
136 |     {
137 |       keys: ['ArrowLeft'],
138 |       description: 'Moves focus to the previous radio item in the group.',
139 |     },
140 |   ]"
141 | />
142 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/range-calendar.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: RangeCalendar
  4 | description: Presents a calendar view tailored for selecting date ranges.
  5 | name: range-calendar
  6 | ---
  7 | 
  8 | # Range Calendar
  9 | 
 10 | <Badge>Alpha</Badge>
 11 | 
 12 | <Description>
 13 | Presents a calendar view tailored for selecting date ranges.
 14 | </Description>
 15 | 
 16 | <ComponentPreview name="RangeCalendar" />
 17 | 
 18 | ## Features
 19 | 
 20 | <Highlights
 21 |   :features="[
 22 |     'Full keyboard navigation',
 23 |     'Can be controlled or uncontrolled',
 24 |     'Focus is fully managed',
 25 |     'Localization support',
 26 |     'Highly composable'
 27 |   ]"
 28 | />
 29 | 
 30 | ## Preface
 31 | 
 32 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
 33 | 
 34 | We highly recommend reading through the documentation for the package to get a solid feel for how it works, and you'll need to install it in your project to use the date-related components.
 35 | 
 36 | ## Installation
 37 | 
 38 | Install the date package.
 39 | 
 40 | <InstallationTabs value="@internationalized/date" />
 41 | 
 42 | Install the component from your command line.
 43 | 
 44 | <InstallationTabs value="reka-ui" />
 45 | 
 46 | ## Anatomy
 47 | 
 48 | Import all parts and piece them together.
 49 | 
 50 | ```vue
 51 | <script setup>
 52 | import {
 53 |   RangeCalendarCell,
 54 |   RangeCalendarCellTrigger,
 55 |   RangeCalendarGrid,
 56 |   RangeCalendarGridBody,
 57 |   RangeCalendarGridHead,
 58 |   RangeCalendarGridRow,
 59 |   RangeCalendarHeadCell,
 60 |   RangeCalendarHeader,
 61 |   RangeCalendarHeading,
 62 |   RangeCalendarNext,
 63 |   RangeCalendarPrev,
 64 |   RangeCalendarRoot
 65 | } from 'reka-ui'
 66 | </script>
 67 | 
 68 | <template>
 69 |   <RangeCalendarRoot>
 70 |     <RangeCalendarHeader>
 71 |       <RangeCalendarPrev />
 72 |       <RangeCalendarHeading />
 73 |       <RangeCalendarNext />
 74 |     </RangeCalendarHeader>
 75 |     <RangeCalendarGrid>
 76 |       <RangeCalendarGridHead>
 77 |         <RangeCalendarGridRow>
 78 |           <RangeCalendarHeadCell />
 79 |         </RangeCalendarGridRow>
 80 |       </RangeCalendarGridHead>
 81 |       <RangeCalendarGridBody>
 82 |         <RangeCalendarGridRow>
 83 |           <RangeCalendarCell>
 84 |             <RangeCalendarCellTrigger />
 85 |           </RangeCalendarCell>
 86 |         </RangeCalendarGridRow>
 87 |       </RangeCalendarGridBody>
 88 |     </RangeCalendarGrid>
 89 |   </RangeCalendarRoot>
 90 | </template>
 91 | ```
 92 | 
 93 | ## API Reference
 94 | 
 95 | ### Root
 96 | 
 97 | Contains all the parts of a calendar
 98 | 
 99 | <!-- @include: @/meta/RangeCalendarRoot.md -->
100 | 
101 | <DataAttributesTable
102 |   :data="[
103 |     {
104 |       attribute: '[data-readonly]',
105 |       values: 'Present when readonly',
106 |     },
107 |     {
108 |       attribute: '[data-disabled]',
109 |       values: 'Present when disabled',
110 |     },
111 |     {
112 |       attribute: '[data-invalid]',
113 |       values: 'Present when invalid',
114 |     }
115 |   ]"
116 | />
117 | 
118 | ### Header
119 | 
120 | Contains the navigation buttons and the heading segments.
121 | 
122 | <!-- @include: @/meta/RangeCalendarHeader.md -->
123 | 
124 | ### Prev Button
125 | 
126 | Calendar navigation button. It navigates the calendar one month/year/decade in the past based on the current calendar view.
127 | 
128 | <DataAttributesTable
129 |   :data="[
130 |     {
131 |       attribute: '[data-disabled]',
132 |       values: 'Present when disabled',
133 |     },
134 |   ]"
135 | />
136 | 
137 | <!-- @include: @/meta/RangeCalendarPrev.md -->
138 | 
139 | ### Next Button
140 | 
141 | Calendar navigation button. It navigates the calendar one month/year/decade in the future based on the current calendar view.
142 | 
143 | <!-- @include: @/meta/RangeCalendarNext.md -->
144 | 
145 | <DataAttributesTable
146 |   :data="[
147 |     {
148 |       attribute: '[data-disabled]',
149 |       values: 'Present when disabled',
150 |     },
151 |   ]"
152 | />
153 | 
154 | ### Heading
155 | 
156 | Heading for displaying the current month and year.
157 | 
158 | <!-- @include: @/meta/RangeCalendarHeading.md -->
159 | 
160 | <DataAttributesTable
161 |   :data="[
162 |     {
163 |       attribute: '[data-disabled]',
164 |       values: 'Present when disabled',
165 |     },
166 |   ]"
167 | />
168 | 
169 | ### Grid
170 | 
171 | Container for wrapping the calendar grid.
172 | 
173 | <!-- @include: @/meta/RangeCalendarGrid.md -->
174 | 
175 | <DataAttributesTable
176 |   :data="[
177 |     {
178 |       attribute: '[data-readonly]',
179 |       values: 'Present when readonly',
180 |     },
181 |     {
182 |       attribute: '[data-disabled]',
183 |       values: 'Present when disabled',
184 |     },
185 |   ]"
186 | />
187 | 
188 | ### Grid Head
189 | 
190 | Container for wrapping the grid head.
191 | 
192 | <!-- @include: @/meta/RangeCalendarGridHead.md -->
193 | 
194 | ### Grid Body
195 | 
196 | Container for wrapping the grid body.
197 | 
198 | <!-- @include: @/meta/RangeCalendarGridBody.md -->
199 | 
200 | ### Grid Row
201 | 
202 | Container for wrapping the grid row.
203 | 
204 | <!-- @include: @/meta/RangeCalendarGridRow.md -->
205 | 
206 | ### Head Cell
207 | 
208 | Container for wrapping the head cell. Used for displaying the week days.
209 | 
210 | <!-- @include: @/meta/RangeCalendarHeadCell.md -->
211 | 
212 | ### Cell
213 | 
214 | Container for wrapping the calendar cells.
215 | 
216 | <!-- @include: @/meta/RangeCalendarCell.md -->
217 | 
218 | <DataAttributesTable
219 |   :data="[
220 |     {
221 |       attribute: '[data-disabled]',
222 |       values: 'Present when disabled',
223 |     },
224 |   ]"
225 | />
226 | 
227 | ### Cell Trigger
228 | 
229 | Interactable container for displaying the cell dates. Clicking it selects the date.
230 | 
231 | <!-- @include: @/meta/RangeCalendarCellTrigger.md -->
232 | 
233 | <DataAttributesTable
234 |   :data="[
235 |     {
236 |       attribute: '[data-selected]',
237 |       values: 'Present when selected',
238 |     },
239 |     {
240 |       attribute: '[data-value]',
241 |       values: 'The ISO string value of the date.',
242 |     },
243 |     {
244 |       attribute: '[data-disabled]',
245 |       values: 'Present when disabled',
246 |     },
247 |     {
248 |       attribute: '[data-unavailable]',
249 |       values: 'Present when unavailable',
250 |     },
251 |     {
252 |       attribute: '[data-today]',
253 |       values: 'Present when today',
254 |     },
255 |     {
256 |       attribute: '[data-outside-view]',
257 |       values: 'Present when the date is outside the current month it is displayed in.',
258 |     },
259 |     {
260 |       attribute: '[data-outside-visible-view]',
261 |       values: 'Present when the date is outside the months that are visible on the calendar.',
262 |     },
263 |     {
264 |       attribute: '[data-selection-start]',
265 |       values: 'Present when the date is the start of the selection.',
266 |     },
267 |     {
268 |       attribute: '[data-selection-end]',
269 |       values: 'Present when the date is the end of the selection.',
270 |     },
271 |     {
272 |       attribute: '[data-highlighted]',
273 |       values: 'Present when the date is highlighted by the user as they select a range.',
274 |     },
275 |     {
276 |       attribute: '[data-highlighted-start]',
277 |       values: 'Present when the date is the start of the range that is highlighted by the user.',
278 |     },
279 |     {
280 |       attribute: '[data-highlighted-end]',
281 |       values: 'Present when the date is the end of the range that is highlighted by the user.',
282 |     },
283 |     {
284 |       attribute: '[data-focused]',
285 |       values: 'Present when focused',
286 |     }
287 |   ]"
288 | />
289 | 
290 | ## Accessibility
291 | 
292 | ### Keyboard Interactions
293 | 
294 | <KeyboardTable
295 |   :data="[
296 |     {
297 |       keys: ['Tab'],
298 |       description: 'When focus moves onto the calendar, focuses the first navigation button.'
299 |     },
300 |     {
301 |       keys: ['Space'],
302 |       description:`
303 |       <span>
304 |           When the focus is on either <Code>CalendarNext</Code> or <Code>CalendarPrev</Code>, it navigates the calendar. Otherwise, it selects the date.
305 |       </span>
306 |     ` ,
307 |     },
308 |     {
309 |       keys: ['Enter'],
310 |       description:`
311 |       <span>
312 |           When the focus is on either <Code>CalendarNext</Code> or <Code>CalendarPrev</Code>, it navigates the calendar. Otherwise, it selects the date.
313 |       </span>
314 |     ` ,
315 |     },
316 |     {
317 |       keys: ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'],
318 |       description:
319 |       `
320 |         When the focus is on <Code>CalendarCellTrigger</Code>, it navigates the dates, changing the month/year/decade if necessary.
321 |       `
322 |     }
323 |   ]"
324 | />
325 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/scroll-area.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Scroll Area
  4 | description: Augments native scroll functionality for custom, cross-browser styling.
  5 | name: scroll-area
  6 | ---
  7 | 
  8 | # ScrollArea
  9 | 
 10 | <Description>
 11 | Augments native scroll functionality for custom, cross-browser styling.
 12 | </Description>
 13 | 
 14 | <ComponentPreview name="ScrollArea" />
 15 | 
 16 | ## Features
 17 | 
 18 | <Highlights
 19 |   :features="[
 20 |     'Scrollbar sits on top of the scrollable content, taking up no space.',
 21 |     'Scrolling is native; no underlying position movements via CSS transformations.',
 22 |     'Shims pointer behaviors only when interacting with the controls, so keyboard controls are unaffected.',
 23 |     'Supports Right to Left direction.',
 24 |   ]"
 25 | />
 26 | 
 27 | ## Installation
 28 | 
 29 | Install the component from your command line.
 30 | 
 31 | <InstallationTabs value="reka-ui" />
 32 | 
 33 | ## Anatomy
 34 | 
 35 | Import all parts and piece them together.
 36 | 
 37 | ```vue
 38 | <script setup>
 39 | import { ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from 'reka-ui'
 40 | </script>
 41 | 
 42 | <template>
 43 |   <ScrollAreaRoot>
 44 |     <ScrollAreaViewport />
 45 |     <ScrollAreaScrollbar orientation="horizontal">
 46 |       <ScrollAreaThumb />
 47 |     </ScrollAreaScrollbar>
 48 |     <ScrollAreaScrollbar orientation="vertical">
 49 |       <ScrollAreaThumb />
 50 |     </ScrollAreaScrollbar>
 51 |     <ScrollAreaCorner />
 52 |   </ScrollAreaRoot>
 53 | </template>
 54 | ```
 55 | 
 56 | ## API Reference
 57 | 
 58 | ### Root
 59 | 
 60 | Contains all the parts of a scroll area.
 61 | 
 62 | <!-- @include: @/meta/ScrollAreaRoot.md -->
 63 | 
 64 | ### Viewport
 65 | 
 66 | The viewport area of the scroll area.
 67 | 
 68 | <!-- @include: @/meta/ScrollAreaViewport.md -->
 69 | 
 70 | ### Scrollbar
 71 | 
 72 | The vertical scrollbar. Add a second `Scrollbar` with an `orientation` prop to enable horizontal scrolling.
 73 | 
 74 | <PresenceCallout />
 75 | 
 76 | <!-- @include: @/meta/ScrollAreaScrollbar.md -->
 77 | 
 78 | <DataAttributesTable
 79 |   :data="[
 80 |     {
 81 |       attribute: '[data-state]',
 82 |       values: ['visible', 'hidden'],
 83 |     },
 84 |     {
 85 |       attribute: '[data-orientation]',
 86 |       values: ['vertical', 'horizontal'],
 87 |     },
 88 |   ]"
 89 | />
 90 | 
 91 | ### Thumb
 92 | 
 93 | The thumb to be used in `ScrollAreaScrollbar`.
 94 | 
 95 | <!-- @include: @/meta/ScrollAreaThumb.md -->
 96 | 
 97 | <DataAttributesTable
 98 |   :data="[
 99 |     {
100 |       attribute: '[data-state]',
101 |       values: ['visible', 'hidden'],
102 |     },
103 |   ]"
104 | />
105 | 
106 | ### Corner
107 | 
108 | The corner where both vertical and horizontal scrollbars meet.
109 | 
110 | <!-- @include: @/meta/ScrollAreaCorner.md -->
111 | 
112 | ## Accessibility
113 | 
114 | In most cases, it's best to rely on native scrolling and work with the customization options available in CSS. When that isn't enough, `ScrollArea` provides additional customizability while maintaining the browser's native scroll behavior (as well as accessibility features, like keyboard scrolling).
115 | 
116 | ### Keyboard Interactions
117 | 
118 | Scrolling via keyboard is supported by default because the component relies on native scrolling. Specific keyboard interactions may differ between platforms, so we do not specify them here or add specific event listeners to handle scrolling via key events.
119 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/select.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Select
  4 | description: Displays a list of options for the user to pick from—triggered by a button.
  5 | name: select
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/listbox
  7 | ---
  8 | 
  9 | # Select
 10 | 
 11 | <Description>
 12 | Displays a list of options for the user to pick from—triggered by a button.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Select" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Can be controlled or uncontrolled.',
 22 |     'Offers 2 positioning modes.',
 23 |     'Supports items, labels, groups of items.',
 24 |     'Focus is fully managed.',
 25 |     'Full keyboard navigation.',
 26 |     'Supports custom placeholder.',
 27 |     'Typeahead support.',
 28 |     'Supports Right to Left direction.',
 29 |   ]"
 30 | />
 31 | 
 32 | ## Installation
 33 | 
 34 | Install the component from your command line.
 35 | 
 36 | <InstallationTabs value="reka-ui" />
 37 | 
 38 | ## Anatomy
 39 | 
 40 | Import all parts and piece them together.
 41 | 
 42 | ```vue
 43 | <script setup lang="ts">
 44 | import {
 45 |   SelectContent,
 46 |   SelectGroup,
 47 |   SelectIcon,
 48 |   SelectItem,
 49 |   SelectItemIndicator,
 50 |   SelectLabel,
 51 |   SelectPortal,
 52 |   SelectRoot,
 53 |   SelectScrollDownButton,
 54 |   SelectScrollUpButton,
 55 |   SelectSeparator,
 56 |   SelectTrigger,
 57 |   SelectValue,
 58 |   SelectViewport,
 59 | } from 'reka-ui'
 60 | </script>
 61 | 
 62 | <template>
 63 |   <SelectRoot>
 64 |     <SelectTrigger>
 65 |       <SelectValue />
 66 |       <SelectIcon />
 67 |     </SelectTrigger>
 68 | 
 69 |     <SelectPortal>
 70 |       <SelectContent>
 71 |         <SelectScrollUpButton />
 72 |         <SelectViewport>
 73 |           <SelectItem>
 74 |             <SelectItemText />
 75 |             <SelectItemIndicator />
 76 |           </SelectItem>
 77 |           <SelectGroup>
 78 |             <SelectLabel />
 79 |             <SelectItem>
 80 |               <SelectItemText />
 81 |               <SelectItemIndicator />
 82 |             </SelectItem>
 83 |           </SelectGroup>
 84 |           <SelectSeparator />
 85 |         </SelectViewport>
 86 |         <SelectScrollDownButton />
 87 |         <SelectArrow />
 88 |       </SelectContent>
 89 |     </SelectPortal>
 90 |   </SelectRoot>
 91 | </template>
 92 | ```
 93 | 
 94 | ## API Reference
 95 | 
 96 | ### Root
 97 | 
 98 | Contains all the parts of a Select
 99 | 
100 | <!-- @include: @/meta/SelectRoot.md -->
101 | 
102 | ### Trigger
103 | 
104 | The button that toggles the Select The `SelectContent` will position itself by aligning over the trigger.
105 | 
106 | <!-- @include: @/meta/SelectTrigger.md -->
107 | 
108 | <DataAttributesTable
109 |   :data="[
110 |     {
111 |       attribute: '[data-state]',
112 |       values: ['open', 'closed'],
113 |     },
114 |     {
115 |       attribute: '[data-disabled]',
116 |       values: 'Present when disabled',
117 |     },
118 |     {
119 |       attribute: '[data-placeholder]',
120 |       values: 'Present when has placeholder',
121 |     },
122 |   ]"
123 | />
124 | 
125 | ### Value
126 | 
127 | The part that reflects the selected value. By default the selected item's text will be rendered. if you require more control, you can instead control the select and pass your own `children`. It should not be styled to ensure correct positioning. An optional `placeholder` prop is also available for when the select has no value.
128 | 
129 | <!-- @include: @/meta/SelectValue.md -->
130 | 
131 | ### Icon
132 | 
133 | A small icon often displayed next to the value as a visual affordance for the fact it can be open. By default renders ▼ but you can use your own icon via `asChild` or use `children`.
134 | 
135 | <!-- @include: @/meta/SelectItem.md -->
136 | 
137 | ### Portal
138 | 
139 | When used, portals the content part into the `body`.
140 | 
141 | <!-- @include: @/meta/SelectPortal.md -->
142 | 
143 | ### Content
144 | 
145 | The component that pops out when the select is open.
146 | 
147 | <PresenceCallout />
148 | 
149 | <!-- @include: @/meta/SelectContent.md -->
150 | 
151 | <DataAttributesTable
152 |   :data="[
153 |     {
154 |       attribute: '[data-state]',
155 |       values: ['open', 'closed'],
156 |     },
157 |     {
158 |       attribute: '[data-side]',
159 |       values: ['left', 'right', 'bottom', 'top'],
160 |     },
161 |     {
162 |       attribute: '[data-align]',
163 |       values: ['start', 'end', 'center'],
164 |     },
165 |   ]"
166 | />
167 | 
168 | <CssVariablesTable
169 |   :data="[
170 |     {
171 |       cssVariable: '--reka-select-content-transform-origin',
172 |       description: 'The <Code>transform-origin</Code> computed from the content and arrow positions/offsets. Only present when <Code>position=&quot;popper&quot;</Code>.',
173 |     },
174 |     {
175 |       cssVariable: '--reka-select-content-available-width',
176 |       description: 'The remaining width between the trigger and the boundary edge. Only present when <Code>position=&quot;popper&quot;</Code>.',
177 |     },
178 |     {
179 |       cssVariable: '--reka-select-content-available-height',
180 |       description: 'The remaining height between the trigger and the boundary edge. Only present when <Code>position=&quot;popper&quot;</Code>.',
181 |     },
182 |     {
183 |       cssVariable: '--reka-select-trigger-width',
184 |       description: 'The width of the trigger. Only present when <Code>position=&quot;popper&quot;</Code>.',
185 |     },
186 |     {
187 |       cssVariable: '--reka-select-trigger-height',
188 |       description: 'The height of the trigger. Only present when <Code>position=&quot;popper&quot;</Code>.',
189 |     },
190 |   ]"
191 | />
192 | 
193 | ### Viewport
194 | 
195 | The scrolling viewport that contains all of the items.
196 | 
197 | <!-- @include: @/meta/SelectViewport.md -->
198 | 
199 | ### Item
200 | 
201 | The component that contains the select items.
202 | 
203 | <!-- @include: @/meta/SelectItem.md -->
204 | 
205 | <DataAttributesTable
206 |   :data="[
207 |     {
208 |       attribute: '[data-state]',
209 |       values: ['checked', 'unchecked'],
210 |     },
211 |     {
212 |       attribute: '[data-highlighted]',
213 |       values: 'Present when highlighted',
214 |     },
215 |     {
216 |       attribute: '[data-disabled]',
217 |       values: 'Present when disabled',
218 |     },
219 |   ]"
220 | />
221 | 
222 | ### ItemText
223 | 
224 | The textual part of the item. It should only contain the text you want to see in the trigger when that item is selected. It should not be styled to ensure correct positioning.
225 | 
226 | <!-- @include: @/meta/SelectItemText.md -->
227 | 
228 | ### ItemIndicator
229 | 
230 | Renders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
231 | 
232 | <!-- @include: @/meta/SelectItemIndicator.md -->
233 | 
234 | ### ScrollUpButton
235 | 
236 | An optional button used as an affordance to show the viewport overflow as well as functionally enable scrolling upwards.
237 | 
238 | <!-- @include: @/meta/SelectScrollUpButton.md -->
239 | 
240 | ### ScrollDownButton
241 | 
242 | An optional button used as an affordance to show the viewport overflow as well as functionally enable scrolling downwards.
243 | 
244 | <!-- @include: @/meta/SelectScrollDownButton.md -->
245 | 
246 | ### Group
247 | 
248 | Used to group multiple items. use in conjunction with `SelectLabel` to ensure good accessibility via automatic labelling.
249 | 
250 | <!-- @include: @/meta/SelectGroup.md -->
251 | 
252 | ### Label
253 | 
254 | Used to render the label of a group. It won't be focusable using arrow keys.
255 | 
256 | <!-- @include: @/meta/SelectLabel.md -->
257 | 
258 | ### Separator
259 | 
260 | Used to visually separate items in the Select
261 | 
262 | <!-- @include: @/meta/SelectSeparator.md -->
263 | ### Arrow
264 | 
265 | An optional arrow element to render alongside the content. This can be used to help visually link the trigger with the `SelectContent`. Must be rendered inside `SelectContent`. Only available when `position` is set to `popper`.
266 | 
267 | <!-- @include: @/meta/SelectArrow.md -->
268 | 
269 | ## Examples
270 | 
271 | ### Change the positioning mode
272 | 
273 | By default, `Select` will behave similarly to a native MacOS menu by positioning `SelectContent` relative to the active item. If you would prefer an alternative positioning approach similar to `Popover` or `DropdownMenu` then you can set `position` to `popper` and make use of additional alignment options such as `side`, `sideOffset` and more.
274 | 
275 | ```vue line=20-23
276 | // index.vue
277 | <script setup lang="ts">
278 | import {
279 |   SelectContent,
280 |   SelectGroup,
281 |   SelectItem,
282 |   SelectItemIndicator,
283 |   SelectLabel,
284 |   SelectPortal,
285 |   SelectRoot,
286 |   SelectSeparator,
287 |   SelectTrigger,
288 | } from 'reka-ui'
289 | </script>
290 | 
291 | <template>
292 |   <SelectRoot>
293 |     <SelectTrigger>…</SelectTrigger>
294 |     <SelectPortal>
295 |       <SelectContent
296 |         position="popper"
297 |         :side-offset="5"
298 |       >
299 |         …
300 |       </SelectContent>
301 |     </SelectPortal>
302 |   </SelectRoot>
303 | </template>
304 | ```
305 | 
306 | ### Constrain the content size
307 | 
308 | When using `position="popper"` on `SelectContent`, you may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.
309 | 
310 | We expose several CSS custom properties such as `--reka-select-trigger-width` and `--reka-select-content-available-height` to support this. Use them to constrain the content dimensions.
311 | 
312 | ```vue line=21
313 | // index.vue
314 | <script setup lang="ts">
315 | import {
316 |   SelectContent,
317 |   SelectGroup,
318 |   SelectItem,
319 |   SelectItemIndicator,
320 |   SelectLabel,
321 |   SelectPortal,
322 |   SelectRoot,
323 |   SelectSeparator,
324 |   SelectTrigger,
325 | } from 'reka-ui'
326 | </script>
327 | 
328 | <template>
329 |   <SelectRoot>
330 |     <SelectTrigger>…</SelectTrigger>
331 |     <SelectPortal>
332 |       <SelectContent
333 |         class="SelectContent"
334 |         position="popper"
335 |         :side-offset="5"
336 |       >
337 |         …
338 |       </SelectContent>
339 |     </SelectPortal>
340 |   </SelectRoot>
341 | </template>
342 | ```
343 | 
344 | ```css line=3,4
345 | /* styles.css */
346 | .SelectContent {
347 |   width: var(--reka-select-trigger-width);
348 |   max-height: var(--reka-select-content-available-height);
349 | }
350 | ```
351 | 
352 | ### With disabled items
353 | 
354 | You can add special styles to disabled items via the `data-disabled` attribute.
355 | 
356 | ```vue line=23-24
357 | // index.vue
358 | <script setup lang="ts">
359 | import {
360 |   SelectContent,
361 |   SelectGroup,
362 |   SelectItem,
363 |   SelectItemIndicator,
364 |   SelectLabel,
365 |   SelectPortal,
366 |   SelectRoot,
367 |   SelectSeparator,
368 |   SelectTrigger,
369 | } from 'reka-ui'
370 | </script>
371 | 
372 | <template>
373 |   <SelectRoot>
374 |     <SelectTrigger>…</SelectTrigger>
375 |     <SelectPortal>
376 |       <SelectContent>
377 |         <SelectViewport>
378 |           <SelectItem
379 |             class="SelectItem"
380 |             disabled
381 |           >
382 |             …
383 |           </SelectItem>
384 |           <SelectItem>…</SelectItem>
385 |           <SelectItem>…</SelectItem>
386 |         </SelectViewport>
387 |       </SelectContent>
388 |     </SelectPortal>
389 |   </SelectRoot>
390 | </template>
391 | ```
392 | 
393 | ```css line=2
394 | /* styles.css */
395 | .SelectItem[data-disabled] {
396 |   color: "gainsboro";
397 | }
398 | ```
399 | 
400 | ### With a placeholder
401 | 
402 | You can use the `placeholder` prop on `Value` for when the select has no value. There's also a `data-placeholder` attribute on `Trigger` to help with styling.
403 | 
404 | ```vue line=19,20
405 | // index.vue
406 | <script setup lang="ts">
407 | import {
408 |   SelectContent,
409 |   SelectGroup,
410 |   SelectItem,
411 |   SelectItemIndicator,
412 |   SelectLabel,
413 |   SelectPortal,
414 |   SelectRoot,
415 |   SelectSeparator,
416 |   SelectTrigger,
417 | } from 'reka-ui'
418 | import './styles.css'
419 | </script>
420 | 
421 | <template>
422 |   <SelectRoot>
423 |     <SelectTrigger class="SelectTrigger">
424 |       <SelectValue placeholder="Pick an option" />
425 |       <SelectIcon />
426 |     </SelectTrigger>
427 |     <SelectPortal>
428 |       <SelectContent>…</SelectContent>
429 |     </SelectPortal>
430 |   </SelectRoot>
431 | </template>
432 | ```
433 | 
434 | ```css line=2
435 | /* styles.css */
436 | .SelectTrigger[data-placeholder] {
437 |   color: "gainsboro";
438 | }
439 | ```
440 | 
441 | ### With separators
442 | 
443 | Use the `Separator` part to add a separator between items.
444 | 
445 | ```vue line=10
446 | <template>
447 |   <SelectRoot>
448 |     <SelectTrigger>…</SelectTrigger>
449 |     <SelectPortal>
450 |       <SelectContent>
451 |         <SelectViewport>
452 |           <SelectItem>…</SelectItem>
453 |           <SelectItem>…</SelectItem>
454 |           <SelectItem>…</SelectItem>
455 |           <SelectSeparator />
456 |           <SelectItem>…</SelectItem>
457 |           <SelectItem>…</SelectItem>
458 |         </SelectViewport>
459 |       </SelectContent>
460 |     </SelectPortal>
461 |   </SelectRoot>
462 | </template>
463 | ```
464 | 
465 | ### With grouped items
466 | 
467 | Use the `Group` and `Label` parts to group items in a section.
468 | 
469 | ```vue line=7,8,12
470 | <template>
471 |   <SelectRoot>
472 |     <SelectTrigger>…</SelectTrigger>
473 |     <SelectPortal>
474 |       <SelectContent>
475 |         <SelectViewport>
476 |           <SelectGroup>
477 |             <SelectLabel>Label</SelectLabel>
478 |             <SelectItem>…</SelectItem>
479 |             <SelectItem>…</SelectItem>
480 |             <SelectItem>…</SelectItem>
481 |           </SelectGroup>
482 |         </SelectViewport>
483 |       </SelectContent>
484 |     </SelectPortal>
485 |   </SelectRoot>
486 | </template>
487 | ```
488 | 
489 | ### With complex items
490 | 
491 | You can use custom content in your items.
492 | 
493 | ```vue line=23
494 | <script setup lang="ts">
495 | import {
496 |   SelectContent,
497 |   SelectGroup,
498 |   SelectItem,
499 |   SelectItemIndicator,
500 |   SelectLabel,
501 |   SelectPortal,
502 |   SelectRoot,
503 |   SelectSeparator,
504 |   SelectTrigger,
505 | } from 'reka-ui'
506 | </script>
507 | 
508 | <template>
509 |   <SelectRoot>
510 |     <SelectTrigger>…</SelectTrigger>
511 |     <SelectPortal>
512 |       <SelectContent>
513 |         <SelectViewport>
514 |           <SelectItem>
515 |             <SelectItemText>
516 |               <img src="…">
517 |               Adolfo Hess
518 |             </SelectItemText>
519 |             <SelectItemIndicator>…</SelectItemIndicator>
520 |           </SelectItem>
521 |           <SelectItem>…</SelectItem> <SelectItem>…</SelectItem>
522 |         </SelectViewport>
523 |       </SelectContent>
524 |     </SelectPortal>
525 |   </SelectRoot>
526 | </template>
527 | ```
528 | 
529 | ### Controlling the value displayed in the trigger
530 | 
531 | By default the trigger display the selected item's text (no longer automatically render `ItemText`'s content like in v1).
532 | 
533 | If you need to render other than plain text, you can control the component using `v-model` props (or accessing `SelectValue`'s slotProps) and passing `slot` to `SelectValue`. Remember to make sure what you put in there is accessible.
534 | 
535 | ```vue line=2,4,10-12
536 | <script setup>
537 | const countries = { 'france': '🇫🇷', 'united-kingdom': '🇬🇧', 'spain': '🇪🇸' }
538 | 
539 | const value = ref('france')
540 | </script>
541 | 
542 | <template>
543 |   <SelectRoot v-model="value">
544 |     <SelectTrigger>
545 |       <SelectValue :aria-label="value">
546 |         {{ countries[value] }}
547 |       </SelectValue>
548 |       <SelectIcon />
549 |     </SelectTrigger>
550 |     <SelectPortal>
551 |       <SelectContent>
552 |         <SelectViewport>
553 |           <SelectItem value="france">
554 |             <SelectItemText>France</SelectItemText>
555 |             <SelectItemIndicator>…</SelectItemIndicator>
556 |           </SelectItem>
557 |           <SelectItem value="united-kingdom">
558 |             <SelectItemText>United Kingdom</SelectItemText>
559 |             <SelectItemIndicator>…</SelectItemIndicator>
560 |           </SelectItem>
561 |           <SelectItem value="spain">
562 |             <SelectItemText>Spain</SelectItemText>
563 |             <SelectItemIndicator>…</SelectItemIndicator>
564 |           </SelectItem>
565 |         </SelectViewport>
566 |       </SelectContent>
567 |     </SelectPortal>
568 |   </SelectRoot>
569 | </template>
570 | ```
571 | 
572 | ### With custom scrollbar
573 | 
574 | The native scrollbar is hidden by default as we recommend using the `ScrollUpButton` and `ScrollDownButton` parts for the best UX. If you do not want to use these parts, compose your select with our [Scroll Area](scroll-area) primitive.
575 | 
576 | ```vue line=25,27,32-34
577 | // index.vue
578 | <script setup lang="ts">
579 | import {
580 |   ScrollAreaRoot,
581 |   ScrollAreaScrollbar,
582 |   ScrollAreaThumb,
583 |   ScrollAreaViewport,
584 |   SelectContent,
585 |   SelectGroup,
586 |   SelectItem,
587 |   SelectItemIndicator,
588 |   SelectLabel,
589 |   SelectPortal,
590 |   SelectRoot,
591 |   SelectSeparator,
592 |   SelectTrigger,
593 | } from 'reka-ui'
594 | </script>
595 | 
596 | <template>
597 |   <SelectRoot>
598 |     <SelectTrigger>…</SelectTrigger>
599 |     <SelectPortal>
600 |       <SelectContent>
601 |         <ScrollAreaRoot
602 |           class="ScrollAreaRoot"
603 |           type="auto"
604 |         >
605 |           <SelectViewport as-child>
606 |             <ScrollAreaViewport class="ScrollAreaViewport">
607 |               <StyledItem>…</StyledItem> <StyledItem>…</StyledItem>
608 |               <StyledItem>…</StyledItem>
609 |             </ScrollAreaViewport>
610 |           </SelectViewport>
611 |           <ScrollAreaScrollbar
612 |             class="ScrollAreaScrollbar"
613 |             orientation="vertical"
614 |           >
615 |             <ScrollAreaThumb class="ScrollAreaThumb" />
616 |           </ScrollAreaScrollbar>
617 |         </ScrollAreaRoot>
618 |       </SelectContent>
619 |     </SelectPortal>
620 |   </SelectRoot>
621 | </template>
622 | ```
623 | 
624 | ```css
625 | /* styles.css */
626 | .ScrollAreaRoot {
627 |   width: 100%;
628 |   height: 100%;
629 | }
630 | 
631 | .ScrollAreaViewport {
632 |   width: 100%;
633 |   height: 100%;
634 | }
635 | 
636 | .ScrollAreaScrollbar {
637 |   width: 4px;
638 |   padding: 5px 2px;
639 | }
640 | 
641 | .ScrollAreaThumb {
642 |   background: rgba(0, 0, 0, 0.3);
643 |   borderradius: 3px;
644 | }
645 | ```
646 | 
647 | ## Accessibility
648 | 
649 | Adheres to the [ListBox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/listbox).
650 | 
651 | See the W3C [Select-Only Combobox](https://www.w3.org/TR/wai-aria-practices/examples/combobox/combobox-select-only.html) example for more information.
652 | 
653 | ### Keyboard Interactions
654 | 
655 | <KeyboardTable
656 |   :data="[
657 |     {
658 |       keys: ['Space'],
659 |       description: '<span> When focus is on <Code>SelectTrigger</Code>, opens the select and focuses the selected item. <br /> When focus is on an item, selects the focused item. </span>',
660 |     },
661 |     {
662 |       keys: ['Enter'],
663 |       description: '<span> When focus is on <Code>SelectTrigger</Code>, opens the select and focuses the first item. <br /> When focus is on an item, selects the focused item. </span>',
664 |     },
665 |     {
666 |       keys: ['ArrowDown'],
667 |       description: '<span> When focus is on <Code>SelectTrigger</Code>, opens the Select <br /> When focus is on an item, moves focus to the next item. </span>',
668 |     },
669 |     {
670 |       keys: ['ArrowUp'],
671 |       description: '<span> When focus is on <Code>SelectTrigger</Code>, opens the Select <br /> When focus is on an item, moves focus to the previous item. </span>',
672 |     },
673 |     {
674 |       keys: ['Esc'],
675 |       description: '<span> Closes the select and moves focus to <Code>SelectTrigger</Code>. </span>',
676 |     },
677 |   ]"
678 | />
679 | 
680 | ### Labelling
681 | 
682 | Use our [Label](label) component in order to offer a visual and accessible label for the Select
683 | 
684 | ```vue line=19,22,26,28
685 | <script setup lang="ts">
686 | import { Icon } from '@iconify/vue'
687 | import {
688 |   Label,
689 |   SelectContent,
690 |   SelectGroup,
691 |   SelectItem,
692 |   SelectItemIndicator,
693 |   SelectLabel,
694 |   SelectPortal,
695 |   SelectRoot,
696 |   SelectSeparator,
697 |   SelectTrigger,
698 | } from 'reka-ui'
699 | import { ref } from 'vue'
700 | </script>
701 | 
702 | <template>
703 |   <Label>
704 |     Country
705 |     <SelectRoot>…</SelectRoot>
706 |   </Label>
707 | 
708 |   <!-- or -->
709 | 
710 |   <Label for="country">Country</Label>
711 |   <SelectRoot>
712 |     <SelectTrigger id="country">
713 |       …
714 |     </SelectTrigger>
715 |     <SelectPortal>
716 |       <SelectContent>…</SelectContent>
717 |     </SelectPortal>
718 |   </SelectRoot>
719 | </template>
720 | ```
721 | 
722 | ## Custom APIs
723 | 
724 | Create your own API by abstracting the primitive parts into your own component.
725 | 
726 | ### Abstract down to `Select` and `SelectItem`
727 | 
728 | This example abstracts most of the parts.
729 | 
730 | #### Usage
731 | 
732 | ```vue
733 | <script setup lang="ts">
734 | import { Select, SelectItem } from './your-select'
735 | </script>
736 | 
737 | <template>
738 |   <Select default-value="2">
739 |     <SelectItem value="1">
740 |       Item 1
741 |     </SelectItem>
742 |     <SelectItem value="2">
743 |       Item 2
744 |     </SelectItem>
745 |     <SelectItem value="3">
746 |       Item 3
747 |     </SelectItem>
748 |   </Select>
749 | </template>
750 | ```
751 | 
752 | #### Implementation
753 | 
754 | ```ts
755 | // your-select.ts
756 | export { default as Select } from 'Select.vue'
757 | export { default as SelectItem } from 'SelectItem.vue'
758 | ```
759 | 
760 | ```vue
761 | <!-- Select.vue -->
762 | <script setup lang="ts">
763 | import type { SelectRootEmits, SelectRootProps } from 'reka-ui'
764 | import { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'
765 | import { SelectContent, SelectIcon, SelectPortal, SelectRoot, SelectScrollDownButton, SelectScrollUpButton, SelectTrigger, SelectValue, SelectViewport, useForwardPropsEmits } from 'reka-ui'
766 | 
767 | const props = defineProps<SelectRootProps>()
768 | const emits = defineEmits<SelectRootEmits>()
769 | 
770 | const forward = useForwardPropsEmits(props, emits)
771 | </script>
772 | 
773 | <template>
774 |   <SelectRoot v-bind="forward">
775 |     <SelectTrigger>
776 |       <SelectValue />
777 |       <SelectIcon>
778 |         <ChevronDownIcon />
779 |       </SelectIcon>
780 |     </SelectTrigger>
781 | 
782 |     <SelectPortal>
783 |       <SelectContent>
784 |         <SelectScrollUpButton>
785 |           <ChevronUpIcon />
786 |         </SelectScrollUpButton>
787 |         <SelectViewport>
788 |           <slot />
789 |         </SelectViewport>
790 |         <SelectScrollDownButton>
791 |           <ChevronDownIcon />
792 |         </SelectScrollDownButton>
793 |       </SelectContent>
794 |     </SelectPortal>
795 |   </SelectRoot>
796 | </template>
797 | ```
798 | 
799 | ```vue
800 | <!-- SelectItem.vue -->
801 | <script setup lang="ts">
802 | import type { SelectItemProps } from 'reka-ui'
803 | import { CheckIcon } from '@radix-icons/vue'
804 | import { SelectItem, SelectItemIndicator, SelectItemText } from 'reka-ui'
805 | 
806 | const props = defineProps<SelectItemProps>()
807 | </script>
808 | 
809 | <template>
810 |   <SelectItem v-bind="props">
811 |     <SelectItemText>
812 |       <slot />
813 |     </SelectItemText>
814 |     <SelectItemIndicator>
815 |       <CheckIcon />
816 |     </SelectItemIndicator>
817 |   </SelectItem>
818 | </template>
819 | ```
820 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/separator.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Separator
 4 | description: Visually or semantically separates content.
 5 | name: separator
 6 | aria: https://www.w3.org/TR/wai-aria-1.2/#separator
 7 | ---
 8 | 
 9 | # Separator
10 | 
11 | <Description>
12 | Visually or semantically separates content.
13 | </Description>
14 | 
15 | <ComponentPreview name="Separator" />
16 | 
17 | ## Features
18 | 
19 | <Highlights :features="['Supports horizontal and vertical orientations.']" />
20 | 
21 | ## Installation
22 | 
23 | Install the component from your command line.
24 | 
25 | <InstallationTabs value="reka-ui" />
26 | 
27 | ## Anatomy
28 | 
29 | Import all parts and piece them together.
30 | 
31 | ```vue
32 | <script setup>
33 | import { Separator } from 'reka-ui'
34 | </script>
35 | 
36 | <template>
37 |   <Separator />
38 | </template>
39 | ```
40 | 
41 | ## API Reference
42 | 
43 | ### Root
44 | 
45 | The separator.
46 | 
47 | <!-- @include: @/meta/Separator.md -->
48 | 
49 | <DataAttributesTable
50 |   :data="[
51 |     {
52 |       attribute: '[data-orientation]',
53 |       values: ['vertical', 'horizontal'],
54 |     },
55 |   ]"
56 | />
57 | 
58 | ## Accessibility
59 | 
60 | Adheres to the [`separator` role requirements](https://www.w3.org/TR/wai-aria-1.2/#separator).
61 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/slider.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Slider
  4 | description: An input where the user selects a value from within a given range.
  5 | name: slider
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb
  7 | ---
  8 | 
  9 | # Slider
 10 | 
 11 | <Description>
 12 | An input where the user selects a value from within a given range.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Slider" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Can be controlled or uncontrolled.',
 22 |     'Supports multiple thumbs.',
 23 |     'Supports a minimum value between thumbs.',
 24 |     'Supports touch or click on track to update value.',
 25 |     'Supports Right to Left direction.',
 26 |     'Full keyboard navigation.',
 27 |   ]"
 28 | />
 29 | 
 30 | ## Installation
 31 | 
 32 | Install the component from your command line.
 33 | 
 34 | <InstallationTabs value="reka-ui" />
 35 | 
 36 | ## Anatomy
 37 | 
 38 | Import all parts and piece them together.
 39 | 
 40 | ```vue
 41 | <script setup>
 42 | import { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'
 43 | </script>
 44 | 
 45 | <template>
 46 |   <SliderRoot>
 47 |     <SliderTrack>
 48 |       <SliderRange />
 49 |     </SliderTrack>
 50 |     <SliderThumb />
 51 |   </SliderRoot>
 52 | </template>
 53 | ```
 54 | 
 55 | ## API Reference
 56 | 
 57 | ### Root
 58 | 
 59 | Contains all the parts of a slider. It will render an `input` for each thumb when used within a `form` to ensure events propagate correctly.
 60 | 
 61 | <!-- @include: @/meta/SliderRoot.md -->
 62 | 
 63 | <DataAttributesTable
 64 |   :data="[
 65 |     {
 66 |       attribute: '[data-disabled]',
 67 |       values: 'Present when disabled',
 68 |     },
 69 |     {
 70 |       attribute: '[data-orientation]',
 71 |       values: ['vertical', 'horizontal'],
 72 |     },
 73 |   ]"
 74 | />
 75 | 
 76 | ### Track
 77 | 
 78 | The track that contains the `SliderRange`.
 79 | 
 80 | <!-- @include: @/meta/SliderTrack.md -->
 81 | 
 82 | <DataAttributesTable
 83 |   :data="[
 84 |     {
 85 |       attribute: '[data-disabled]',
 86 |       values: 'Present when disabled',
 87 |     },
 88 |     {
 89 |       attribute: '[data-orientation]',
 90 |       values: ['vertical', 'horizontal'],
 91 |     },
 92 |   ]"
 93 | />
 94 | 
 95 | ### Range
 96 | 
 97 | The range part. Must live inside `SliderTrack`.
 98 | 
 99 | <!-- @include: @/meta/SliderRange.md -->
100 | 
101 | <DataAttributesTable
102 |   :data="[
103 |     {
104 |       attribute: '[data-disabled]',
105 |       values: 'Present when disabled',
106 |     },
107 |     {
108 |       attribute: '[data-orientation]',
109 |       values: ['vertical', 'horizontal'],
110 |     },
111 |   ]"
112 | />
113 | 
114 | ### Thumb
115 | 
116 | A draggable thumb. You can render multiple thumbs.
117 | 
118 | <!-- @include: @/meta/SliderThumb.md -->
119 | 
120 | <DataAttributesTable
121 |   :data="[
122 |     {
123 |       attribute: '[data-disabled]',
124 |       values: 'Present when disabled',
125 |     },
126 |     {
127 |       attribute: '[data-orientation]',
128 |       values: ['vertical', 'horizontal'],
129 |     },
130 |   ]"
131 | />
132 | 
133 | ## Examples
134 | 
135 | ### Vertical orientation
136 | 
137 | Use the `orientation` prop to create a vertical slider.
138 | 
139 | ```vue line=10
140 | // index.vue
141 | <script setup>
142 | import { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'
143 | </script>
144 | 
145 | <template>
146 |   <SliderRoot
147 |     class="SliderRoot"
148 |     :default-value="[50]"
149 |     orientation="vertical"
150 |   >
151 |     <SliderTrack class="SliderTrack">
152 |       <SliderRange class="SliderRange" />
153 |     </SliderTrack>
154 |     <SliderThumb class="SliderThumb" />
155 |   </SliderRoot>
156 | </template>
157 | ```
158 | 
159 | ```css line=7,18,26
160 | /* styles.css */
161 | .SliderRoot {
162 |   position: relative;
163 |   display: flex;
164 |   align-items: center;
165 | }
166 | .SliderRoot[data-orientation="vertical"] {
167 |   flex-direction: column;
168 |   width: 20px;
169 |   height: 100px;
170 | }
171 | 
172 | .SliderTrack {
173 |   position: relative;
174 |   flex-grow: 1;
175 |   background-color: grey;
176 | }
177 | .SliderTrack[data-orientation="vertical"] {
178 |   width: 3px;
179 | }
180 | 
181 | .SliderRange {
182 |   position: absolute;
183 |   background-color: black;
184 | }
185 | .SliderRange[data-orientation="vertical"] {
186 |   width: 100%;
187 | }
188 | 
189 | .SliderThumb {
190 |   display: block;
191 |   width: 20px;
192 |   height: 20px;
193 |   background-color: black;
194 | }
195 | ```
196 | 
197 | ### Create a range
198 | 
199 | Add multiple thumbs and values to create a range slider.
200 | 
201 | ```vue line=7,11-12
202 | // index.vue
203 | <script setup>
204 | import { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'
205 | </script>
206 | 
207 | <template>
208 |   <SliderRoot :default-value="[25, 75]">
209 |     <SliderTrack>
210 |       <SliderRange />
211 |     </SliderTrack>
212 |     <SliderThumb />
213 |     <SliderThumb />
214 |   </SliderRoot>
215 | </template>
216 | ```
217 | 
218 | ### Define step size
219 | 
220 | Use the `step` prop to increase the stepping interval.
221 | 
222 | ```vue line=9
223 | // index.vue
224 | <script setup>
225 | import { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'
226 | </script>
227 | 
228 | <template>
229 |   <SliderRoot
230 |     :default-value="[50]"
231 |     :step="10"
232 |   >
233 |     <SliderTrack>
234 |       <SliderRange />
235 |     </SliderTrack>
236 |     <SliderThumb />
237 |   </SliderRoot>
238 | </template>
239 | ```
240 | 
241 | ### Prevent thumb overlap
242 | 
243 | Use `minStepsBetweenThumbs` to avoid thumbs with equal values.
244 | 
245 | ```vue line=10
246 | // index.vue
247 | <script setup>
248 | import { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'
249 | </script>
250 | 
251 | <template>
252 |   <SliderRoot
253 |     :default-value="[25, 75]"
254 |     :step="10"
255 |     :min-steps-between-thumbs="1"
256 |   >
257 |     <SliderTrack>
258 |       <SliderRange />
259 |     </SliderTrack>
260 |     <SliderThumb />
261 |     <SliderThumb />
262 |   </SliderRoot>
263 | </template>
264 | ```
265 | 
266 | ## Accessibility
267 | 
268 | Adheres to the [Slider WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb).
269 | 
270 | ### Keyboard Interactions
271 | 
272 | <KeyboardTable
273 |   :data="[
274 |     {
275 |       keys: ['ArrowRight'],
276 |       description: 'Increases the value by the <Code>step</Code> amount.',
277 |     },
278 |     {
279 |       keys: ['ArrowLeft'],
280 |       description: 'Decreases the value by the <Code>step</Code> amount.',
281 |     },
282 |     {
283 |       keys: ['ArrowUp'],
284 |       description: 'Increases the value by the <Code>step</Code> amount.',
285 |     },
286 |     {
287 |       keys: ['ArrowDown'],
288 |       description: 'Decreases the value by the <Code>step</Code> amount.',
289 |     },
290 |     {
291 |       keys: ['PageUp'],
292 |       description: 'Increases the value by a larger <Code>step</Code>.',
293 |     },
294 |     {
295 |       keys: ['PageDown'],
296 |       description: 'Decreases the value by a larger <Code>step</Code>.',
297 |     },
298 |     {
299 |       keys: ['Shift + ArrowUp'],
300 |       description: 'Increases the value by a larger <Code>step</Code>.',
301 |     },
302 |     {
303 |       keys: ['Shift + ArrowDown'],
304 |       description: 'Decreases the value by a larger <Code>step</Code>.',
305 |     },
306 |     {
307 |       keys: ['Home'],
308 |       description: 'Sets the value to its minimum.',
309 |     },
310 |     {
311 |       keys: ['End'],
312 |       description: 'Sets the value to its maximum.',
313 |     },
314 |   ]"
315 | />
316 | 
317 | #### Inverted sliders
318 | 
319 | When the slider is <Code>inverted</Code>, some controls are inverted as well, depending on the <Code>orientation</Code>.
320 | 
321 | - When the slider is <Code>horizontal</Code> (the default), <kbd>ArrowRight</kbd>, <kbd>ArrowLeft</kbd>, <kbd>Home</kbd>, and <kbd>End</kbd> are inverted.
322 | - When the slider is <Code>vertical</Code>, <kbd>ArrowUp</kbd>, <kbd>ArrowDown</kbd>, <kbd>PageUp</kbd>, <kbd>PageDown</kbd>, <kbd>Shift + ArrowUp</kbd>, and <kbd>Shift + ArrowDown</kbd> are inverted.
323 | 
324 | ## Custom APIs
325 | 
326 | Create your own API by abstracting the primitive parts into your own component.
327 | 
328 | ### Abstract all parts
329 | 
330 | This example abstracts all of the `Slider` parts so it can be used as a self closing element.
331 | 
332 | #### Usage
333 | 
334 | ```vue
335 | <script setup lang="ts">
336 | import { Slider } from './your-slider'
337 | </script>
338 | 
339 | <template>
340 |   <Slider :default-value="[25]" />
341 | </template>
342 | ```
343 | 
344 | #### Implementation
345 | 
346 |  ```ts
347 | // your-slider.ts
348 | export { default as Slider } from 'Slider.vue'
349 | ```
350 | 
351 | ```vue
352 |  <!-- Slider.vue -->
353 | <script setup lang="ts">
354 | import type { SliderRootEmits, SliderRootProps } from 'reka-ui'
355 | import { SliderRoot, SliderRange, SliderThumb, SliderTrack, useForwardPropsEmits } from 'reka-ui'
356 | 
357 | const props = defineProps<SliderRootProps>()
358 | const emits = defineEmits<SliderRootEmits>()
359 | 
360 | const forward = useForwardPropsEmits(props, emits)
361 | </script>
362 | 
363 | <template>
364 |   <SliderRoot v-slot="{ modelValue }" v-bind="forward">
365 |     <SliderTrack>
366 |       <SliderRange />
367 |     </SliderTrack>
368 | 
369 |     <SliderThumb
370 |       v-for="(_, i) in modelValue"
371 |       :key="i"
372 |     />
373 |   </SliderRoot>
374 | </template>
375 | ```
376 | 
377 | ## Caveats
378 | 
379 | ### Mouse events are not fired
380 | 
381 | Because of [a limitation](https://github.com/unovue/reka-ui/blob/v2/packages/core/src/Slider/SliderImpl.vue#L48-L49) we faced during implementation, the following example won't work as expected and the `@mousedown` and `@mousedown` event handlers won't be fired:
382 | 
383 | ```vue
384 | <SliderRoot
385 |   @mousedown="() => { console.log('onMouseDown')  }"
386 |   @mouseup="() => { console.log('onMouseUp')  }"
387 | >
388 |   …
389 | </SliderRoot>
390 | ```
391 | 
392 | We recommend using pointer events instead (eg. `@pointerdown`, `@pointerup`). Regardless of the above limitation, these events are better suited for cross-platform/device handling as they are fired for all pointer input types (mouse, touch, pen, etc.).
393 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/splitter.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Splitter
  3 | description: A component that divides your layout into resizable sections.
  4 | name: splitter
  5 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/
  6 | ---
  7 | 
  8 | # Splitter
  9 | 
 10 | <Description>
 11 | A component that divides your layout into resizable sections.
 12 | </Description>
 13 | 
 14 | <ComponentPreview name="Splitter" />
 15 | 
 16 | ## Features
 17 | 
 18 | <Highlights
 19 |   :features="[
 20 |     'Supports keyboard interaction.',
 21 |     'Supports horizontal/vertical layout.',
 22 |     'Supports nested layout.',
 23 |     'Supports Right to Left direction.',
 24 |     'Can resize across another panel.',
 25 |     'Can be mounted conditionally.'
 26 |   ]"
 27 | />
 28 | 
 29 | ## Installation
 30 | 
 31 | Install the component from your command line.
 32 | 
 33 | <InstallationTabs value="reka-ui" />
 34 | 
 35 | ## Anatomy
 36 | 
 37 | Import all parts and piece them together.
 38 | 
 39 | ```vue
 40 | <script setup>
 41 | import { SplitterGroup, SplitterPanel, SplitterResizeHandle } from 'reka-ui'
 42 | </script>
 43 | 
 44 | <template>
 45 |   <SplitterGroup>
 46 |     <SplitterPanel />
 47 |     <SplitterResizeHandle />
 48 |   </SplitterGroup>
 49 | </template>
 50 | ```
 51 | 
 52 | ## API Reference
 53 | 
 54 | ### Group
 55 | 
 56 | Contains all the parts of a Splitter.
 57 | 
 58 | <!-- @include: @/meta/SplitterGroup.md -->
 59 | 
 60 | <DataAttributesTable
 61 |   :data="[
 62 |     {
 63 |       attribute: '[data-orientation]',
 64 |       values: ['vertical', 'horizontal'],
 65 |     },
 66 |     {
 67 |       attribute: '[data-state]',
 68 |       values: ['collapsed', 'expanded', 'Present when collapsbile'],
 69 |     },
 70 |   ]"
 71 | />
 72 | 
 73 | ### Panel
 74 | 
 75 | A collapsible section.
 76 | 
 77 | <!-- @include: @/meta/SplitterPanel.md -->
 78 | 
 79 | ### Resize Handle
 80 | 
 81 | Handle that use for resizing.
 82 | 
 83 | <!-- @include: @/meta/SplitterResizeHandle.md -->
 84 | 
 85 | <DataAttributesTable
 86 |   :data="[
 87 |     {
 88 |       attribute: '[data-state]',
 89 |       values: ['drag', 'hover', 'inactive'],
 90 |     },
 91 |     {
 92 |       attribute: '[data-disabled]',
 93 |       values: 'Present when disabled',
 94 |     },
 95 |     {
 96 |       attribute: '[data-orientation]',
 97 |       values: ['vertical', 'horizontal'],
 98 |     }
 99 |   ]"
100 | />
101 | 
102 | ## Examples
103 | 
104 | ### Collapsible
105 | 
106 | Use the `collapsible` prop to allow the panel to collapse into `collapsedSize` when `minSize` is reached.
107 | 
108 | (`collapsedSize` and `minSize` props are required.)
109 | 
110 | ```vue line=4-6
111 | <template>
112 |   <SplitterGroup>
113 |     <SplitterPanel
114 |       collapsible
115 |       :collapsed-size="10"
116 |       :min-size="35"
117 |     >
118 |       Panel A
119 |     </SplitterPanel>
120 |     <SplitterResizeHandle />
121 |     <SplitterPanel>
122 |       Panel B
123 |     </SplitterPanel>
124 |   </SplitterGroup>
125 | </template>
126 | ```
127 | 
128 | ### Persist in localStorage
129 | 
130 | Use the `autoSaveId` prop to save the layout data into `localStorage`.
131 | 
132 | ```vue line=2
133 | <template>
134 |   <SplitterGroup auto-save-id="any-id">
135 |     …
136 |   </SplitterGroup>
137 | </template>
138 | ```
139 | 
140 | ### Persist layout with SSR
141 | 
142 | By default, Splitter uses `localStorage` to persist layouts. With server rendering, this can cause a flicker when the default layout (rendered on the server) is replaced with the persisted layout (in `localStorage`). The way to avoid this flicker is to also persist the layout with a cookie like so:
143 | 
144 | ```vue line=3,,8-9,11,15
145 | <!-- with Nuxt -->
146 | <script setup lang="ts">
147 | const layout = useCookie<number[]>('splitter:layout')
148 | </script>
149 | 
150 | <template>
151 |   <SplitterGroup
152 |     direction="horizontal"
153 |     @layout="layout = $event"
154 |   >
155 |     <SplitterPanel :default-size="layout[0]">
156 |       …
157 |     </SplitterPanel>
158 |     <SplitterResizeHandle />
159 |     <SplitterPanel :default-size="layout[1]">
160 |       …
161 |     </SplitterPanel>
162 |   </SplitterGroup>
163 | </template>
164 | ```
165 | 
166 | ### Collapse/Expand programmatically
167 | 
168 | Sometimes panels need to resize or collapse/expand in response to user actions. `SplitterPanel` exposes the `collapse` and `expand` methods to achieve this.
169 | 
170 | ```vue line=2,7,14
171 | <script setup lang="ts">
172 | const panelRef = ref<InstanceType<typeof SplitterPanel>>()
173 | </script>
174 | 
175 | <template>
176 |   <button
177 |     @click="panelRef?.isCollapsed ? panelRef?.expand() : panelRef?.collapse() "
178 |   >
179 |     {{ panelRef?.isCollapsed ? 'Expand' : 'Collapse' }}
180 |   </button>
181 | 
182 |   <SplitterGroup>
183 |     <SplitterPanel
184 |       ref="panelRef"
185 |       collapsible
186 |       :collapsed-size="10"
187 |       :min-size="35"
188 |     >
189 |       …
190 |     </SplitterPanel>
191 |     <SplitterResizeHandle />
192 |     <SplitterPanel>
193 |       …
194 |     </SplitterPanel>
195 |   </SplitterGroup>
196 | </template>
197 | ```
198 | 
199 | ### Custom handle
200 | 
201 | Customize the handle by passing any element as the slot.
202 | 
203 |  ```vue line=6-8
204 | <template>
205 |    <SplitterGroup>
206 |      <SplitterPanel>
207 |        …
208 |      </SplitterPanel>
209 |      <SplitterResizeHandle>
210 |        <Icon icon="radix-icons-drag-handle-dots-2" />
211 |      </SplitterResizeHandle>
212 |      <SplitterPanel>
213 |        …
214 |      </SplitterPanel>
215 |    </SplitterGroup>
216 | </template>
217 | ```
218 | 
219 | ### SSR
220 | 
221 | Splitter component heavily relies on unique `id`, however for Vue<3.4 we don't have a reliable way of generating [SSR-friendly `id`](https://github.com/vuejs/rfcs/discussions/557).
222 | 
223 | Thus, if you are using Nuxt or other SSR framework, you are required to manually add the `id` for all Splitter components. Alternatively, you can wrap the component with `<ClientOnly>`.
224 | 
225 | ```vue
226 | <template>
227 |   <SplitterGroup id="group-1">
228 |     <SplitterPanel id="group-1-panel-1">
229 |       …
230 |     </SplitterPanel>
231 |     <SplitterResizeHandle id="group-1-resize-1">
232 |       <Icon icon="radix-icons-drag-handle-dots-2" />
233 |     </SplitterResizeHandle>
234 |     <SplitterPanel id="group-1-panel-2">
235 |       …
236 |     </SplitterPanel>
237 |   </SplitterGroup>
238 | </template>
239 | ```
240 | 
241 | ## Accessibility
242 | 
243 | Adheres to the [Window Splitter WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter).
244 | 
245 | ### Keyboard Interactions
246 | 
247 | <KeyboardTable :data="[
248 |     {
249 |       keys: ['Enter'],
250 |       description: 'If the primary pane is not collapsed, collapses the pane. If the pane is collapsed, restores the splitter to its previous position.',
251 |     },
252 |     {
253 |       keys: ['ArrowDown'],
254 |       description: 'Moves a horizontal splitter down.',
255 |     },
256 |     {
257 |       keys: ['ArrowUp'],
258 |       description: 'Moves a horizontal splitter up.',
259 |     },
260 |     {
261 |       keys: ['ArrowRight'],
262 |       description: 'Moves a vertical splitter to the right.',
263 |     },
264 |     {
265 |       keys: ['ArrowLeft'],
266 |       description: 'Moves a vertical splitter to the left.',
267 |     },
268 |     {
269 |       keys: ['Home'],
270 |       description: 'Moves splitter to the position that gives the primary pane its smallest allowed size. ',
271 |     },
272 |     {
273 |       keys: ['End'],
274 |       description: 'Moves splitter to the position that gives the primary pane its largest allowed size.',
275 |     }]" />
276 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/stepper.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Stepper
  3 | description: A set of steps that are used to indicate progress through a multi-step process.
  4 | name: stepper
  5 | ---
  6 | 
  7 | # Stepper
  8 | 
  9 | <Description>
 10 | A set of steps that are used to indicate progress through a multi-step process.
 11 | </Description>
 12 | 
 13 | <ComponentPreview name="Stepper" />
 14 | 
 15 | ## Features
 16 | 
 17 | <Highlights
 18 |   :features="[
 19 |     'Can be controlled or uncontrolled.',
 20 |     'Supports horizontal/vertical orientation.',
 21 |     'Supports linear/non-linear activation.',
 22 |     'Full keyboard navigation.',
 23 |   ]"
 24 | />
 25 | 
 26 | ## Installation
 27 | 
 28 | Install the component from your command line.
 29 | 
 30 | <InstallationTabs value="reka-ui" />
 31 | 
 32 | ## Anatomy
 33 | 
 34 | Import all parts and piece them together.
 35 | 
 36 | ```vue
 37 | <script setup>
 38 | import { StepperDescription, StepperIndicator, StepperItem, StepperRoot, StepperTitle, StepperTrigger } from 'reka-ui'
 39 | </script>
 40 | 
 41 | <template>
 42 |   <StepperRoot>
 43 |     <StepperItem>
 44 |       <StepperTrigger />
 45 |       <StepperIndicator />
 46 | 
 47 |       <StepperTitle />
 48 |       <StepperDescription />
 49 | 
 50 |       <StepperSeparator />
 51 |     </StepperItem>
 52 |   </StepperRoot>
 53 | </template>
 54 | ```
 55 | 
 56 | ## API Reference
 57 | 
 58 | ### Root
 59 | 
 60 | Contains all the stepper component parts.
 61 | 
 62 | <!-- @include: @/meta/StepperRoot.md -->
 63 | 
 64 | <DataAttributesTable
 65 |   :data="[
 66 |     {
 67 |       attribute: '[data-orientation]',
 68 |       values: ['vertical', 'horizontal'],
 69 |     },
 70 |     {
 71 |       attribute: '[data-linear]',
 72 |       values: 'Present when linear'
 73 |     },
 74 |   ]"
 75 | />
 76 | 
 77 | ### Item
 78 | 
 79 | The step item component.
 80 | 
 81 | <!-- @include: @/meta/StepperItem.md -->
 82 | 
 83 | <DataAttributesTable
 84 |   :data="[
 85 |     {
 86 |       attribute: '[data-state]',
 87 |       values: ['active', 'inactive', 'completed'],
 88 |     },
 89 |     {
 90 |       attribute: '[data-disabled]',
 91 |       values: 'Present when disabled',
 92 |     },
 93 |     {
 94 |       attribute: '[data-orientation]',
 95 |       values: ['vertical', 'horizontal'],
 96 |     },
 97 |   ]"
 98 | />
 99 | 
100 | ### Trigger
101 | 
102 | The trigger that toggles the step.
103 | 
104 | <!-- @include: @/meta/StepperTrigger.md -->
105 | 
106 | <DataAttributesTable
107 |   :data="[
108 |     {
109 |       attribute: '[data-state]',
110 |       values: ['active', 'inactive', 'completed'],
111 |     },
112 |     {
113 |       attribute: '[data-disabled]',
114 |       values: 'Present when disabled',
115 |     },
116 |     {
117 |       attribute: '[data-orientation]',
118 |       values: ['vertical', 'horizontal'],
119 |     },
120 |   ]"
121 | />
122 | 
123 | ### Indicator
124 | 
125 | The indicator for the step.
126 | 
127 | <!-- @include: @/meta/StepperIndicator.md -->
128 | 
129 | ### Title
130 | 
131 | An accessible title to be announced when the stepper trigger is focused.
132 | 
133 | If you want to hide the title, wrap it inside our Visually Hidden utility like this `<VisuallyHidden asChild>`.
134 | 
135 | <!-- @include: @/meta/StepperTitle.md -->
136 | 
137 | ### Description
138 | 
139 | An optional accessible description to be announced when the stepper trigger is focused.
140 | 
141 | If you want to hide the description, wrap it inside our Visually Hidden utility like this `<VisuallyHidden asChild>`. If you want to remove the description entirely, remove this part and pass `aria-describedby="undefined"` to `StepperTrigger`.
142 | 
143 | <!-- @include: @/meta/StepperItem.md -->
144 | 
145 | ## Examples
146 | 
147 | ### Vertical
148 | 
149 | You can create vertical steps by using the `orientation` prop.
150 | 
151 | ```vue line=8
152 | <script setup>
153 | import { StepperDescription, StepperIndicator, StepperItem, StepperRoot, StepperTitle } from 'reka-ui'
154 | </script>
155 | 
156 | <template>
157 |   <StepperRoot
158 |     :default-value="1"
159 |     orientation="vertical"
160 |   >
161 |     <StepperItem>
162 |       <StepperIndicator />
163 |       <StepperTitle />
164 |       <StepperDescription />
165 |     </StepperItem>
166 |     <StepperItem>
167 |       <StepperIndicator />
168 |       <StepperTitle />
169 |       <StepperDescription />
170 |     </StepperItem>
171 |   </StepperRoot>
172 | </template>
173 | ```
174 | 
175 | ### With controls
176 | 
177 | You can add additional controls for the stepper using buttons and access the typed component instance using `useTemplateRef`.
178 | 
179 | ```vue line=8
180 | <script setup lang="ts">
181 | const stepper = useTemplateRef('stepper')
182 | </script>
183 | 
184 | <template>
185 |   <StepperRoot
186 |     ref="stepper"
187 |     :default-value="1"
188 |   >
189 |     <StepperItem>
190 |       <StepperIndicator />
191 |       <StepperTitle />
192 |       <StepperDescription />
193 |     </StepperItem>
194 |     <StepperItem>
195 |       <StepperIndicator />
196 |       <StepperTitle />
197 |       <StepperDescription />
198 |     </StepperItem>
199 |   </StepperRoot>
200 | 
201 |   <div class="flex gap-2 justify-between mt-4">
202 |     <button
203 |       :disabled="!stepper?.hasPrev()"
204 |       @click="stepper?.prevStep()"
205 |     >
206 |       Prev
207 |     </button>
208 | 
209 |     <button
210 |       :disabled="!stepper?.hasNext()"
211 |       @click="stepper?.nextStep()"
212 |     >
213 |       Next
214 |     </button>
215 |   </div>
216 | </template>
217 | ```
218 | 
219 | ## Accessibility
220 | 
221 | ### Keyboard Interactions
222 | 
223 | <KeyboardTable
224 |   :data="[
225 |     {
226 |       keys: ['Tab'],
227 |       description: '<span> When focus moves onto the steps, focuses the first step .</span>',
228 |     },
229 |     {
230 |       keys: ['ArrowDown'],
231 |       description: '<span> Moves focus to the next step depending on <Code>orientation</Code>.</span>',
232 |     },
233 |     {
234 |       keys: ['ArrowRight'],
235 |       description: '<span> Moves focus to the next step depending on <Code>orientation</Code> .</span>',
236 |     },
237 |     {
238 |       keys: ['ArrowUp'],
239 |       description: '<span> Moves focus to the previous step depending on <Code>orientation</Code> .</span>',
240 |     },
241 |     {
242 |       keys: ['ArrowLeft'],
243 |       description: '<span> Moves focus to the previous step depending on <Code>orientation</Code> .</span>',
244 |     },
245 |     {
246 |     keys: ['Enter', 'Space'],
247 |     description: '<span>Selects the focused step.</span>',
248 |     },
249 |   ]"
250 | />
251 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/switch.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Switch
  4 | description: A control that allows the user to toggle between checked and not checked.
  5 | name: switch
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/switch
  7 | ---
  8 | 
  9 | # Switch
 10 | 
 11 | <Description>
 12 | A control that allows the user to toggle between checked and not checked.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Switch" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="['Full keyboard navigation.', 'Can be controlled or uncontrolled.']"
 21 | />
 22 | 
 23 | ## Installation
 24 | 
 25 | Install the component from your command line.
 26 | 
 27 | <InstallationTabs value="reka-ui" />
 28 | 
 29 | ## Anatomy
 30 | 
 31 | Import all parts and piece them together.
 32 | 
 33 | ```vue
 34 | <script setup>
 35 | import { SwitchRoot, SwitchThumb } from 'reka-ui'
 36 | </script>
 37 | 
 38 | <template>
 39 |   <SwitchRoot>
 40 |     <SwitchThumb />
 41 |   </SwitchRoot>
 42 | </template>
 43 | ```
 44 | 
 45 | ## API Reference
 46 | 
 47 | ### Root
 48 | 
 49 | Contains all the parts of a switch. An `input` will also render when used within a `form` to ensure events propagate correctly.
 50 | 
 51 | <!-- @include: @/meta/SwitchRoot.md -->
 52 | 
 53 | <DataAttributesTable
 54 |   :data="[
 55 |     {
 56 |       attribute: '[data-state]',
 57 |       values: ['checked', 'unchecked'],
 58 |     },
 59 |     {
 60 |       attribute: '[data-disabled]',
 61 |       values: 'Present when disabled',
 62 |     },
 63 |   ]"
 64 | />
 65 | 
 66 | ### Thumb
 67 | 
 68 | The thumb that is used to visually indicate whether the switch is on or off.
 69 | 
 70 | <!-- @include: @/meta/SwitchThumb.md -->
 71 | 
 72 | <DataAttributesTable
 73 |   :data="[
 74 |     {
 75 |       attribute: '[data-state]',
 76 |       values: ['checked', 'unchecked'],
 77 |     },
 78 |     {
 79 |       attribute: '[data-disabled]',
 80 |       values: 'Present when disabled',
 81 |     },
 82 |   ]"
 83 | />
 84 | 
 85 | ## Accessibility
 86 | 
 87 | Adheres to the [`switch` role requirements](https://www.w3.org/WAI/ARIA/apg/patterns/switch).
 88 | 
 89 | ### Keyboard Interactions
 90 | 
 91 | <KeyboardTable
 92 |   :data="[
 93 |     {
 94 |       keys: ['Space'],
 95 |       description: 'Toggles the component\'s state.',
 96 |     },
 97 |     {
 98 |       keys: ['Enter'],
 99 |       description: 'Toggles the component\'s state.',
100 |     },
101 |   ]"
102 | />
103 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/tabs.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Tabs
  4 | description: A set of layered sections of content—known as tab panels—that are displayed one at a time.
  5 | name: tabs
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel
  7 | ---
  8 | 
  9 | # Tabs
 10 | 
 11 | <Description>
 12 | A set of layered sections of content—known as tab panels—that are displayed one at a time.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="Tabs" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Can be controlled or uncontrolled.',
 22 |     'Supports horizontal/vertical orientation.',
 23 |     'Supports automatic/manual activation.',
 24 |     'Full keyboard navigation.',
 25 |   ]"
 26 | />
 27 | 
 28 | ## Installation
 29 | 
 30 | Install the component from your command line.
 31 | 
 32 | <InstallationTabs value="reka-ui" />
 33 | 
 34 | ## Anatomy
 35 | 
 36 | Import all parts and piece them together.
 37 | 
 38 | ```vue
 39 | <script setup>
 40 | import { TabsContent, TabsIndicator, TabsList, TabsRoot, TabsTrigger } from 'reka-ui'
 41 | </script>
 42 | 
 43 | <template>
 44 |   <TabsRoot>
 45 |     <TabsList>
 46 |       <TabsIndicator />
 47 |       <TabsTrigger />
 48 |     </TabsList>
 49 |     <TabsContent />
 50 |   </TabsRoot>
 51 | </template>
 52 | ```
 53 | 
 54 | ## API Reference
 55 | 
 56 | ### Root
 57 | 
 58 | Contains all the tabs component parts.
 59 | 
 60 | <!-- @include: @/meta/TabsRoot.md -->
 61 | 
 62 | <DataAttributesTable
 63 |   :data="[
 64 |     {
 65 |       attribute: '[data-orientation]',
 66 |       values: ['vertical', 'horizontal'],
 67 |     },
 68 |   ]"
 69 | />
 70 | 
 71 | ### List
 72 | 
 73 | Contains the triggers that are aligned along the edge of the active content.
 74 | 
 75 | <!-- @include: @/meta/TabsList.md -->
 76 | 
 77 | <DataAttributesTable
 78 |   :data="[
 79 |     {
 80 |       attribute: '[data-orientation]',
 81 |       values: ['vertical', 'horizontal'],
 82 |     },
 83 |   ]"
 84 | />
 85 | 
 86 | ### Trigger
 87 | 
 88 | The button that activates its associated content.
 89 | 
 90 | <!-- @include: @/meta/TabsTrigger.md -->
 91 | 
 92 | <DataAttributesTable
 93 |   :data="[
 94 |     {
 95 |       attribute: '[data-state]',
 96 |       values: ['active', 'inactive'],
 97 |     },
 98 |     {
 99 |       attribute: '[data-disabled]',
100 |       values: 'Present when disabled',
101 |     },
102 |     {
103 |       attribute: '[data-orientation]',
104 |       values: ['vertical', 'horizontal'],
105 |     },
106 |   ]"
107 | />
108 | 
109 | ### Indicator
110 | 
111 | The indicator that highlights the current active tab.
112 | 
113 | <!-- @include: @/meta/TabsIndicator.md -->
114 | 
115 | <CssVariablesTable
116 |   :data="[
117 |     {
118 |       cssVariable: '--reka-tabs-indicator-size',
119 |       description: 'The size of the indicator.',
120 |     },
121 |     {
122 |       cssVariable: '--reka-tabs-indicator-position',
123 |       description: 'The position of the indicator',
124 |     },
125 |   ]"
126 | />
127 | 
128 | ### Content
129 | 
130 | Contains the content associated with each trigger.
131 | 
132 | <PresenceCallout />
133 | 
134 | <!-- @include: @/meta/TabsContent.md -->
135 | 
136 | <DataAttributesTable
137 |   :data="[
138 |     {
139 |       attribute: '[data-state]',
140 |       values: ['active', 'inactive'],
141 |     },
142 |     {
143 |       attribute: '[data-orientation]',
144 |       values: ['vertical', 'horizontal'],
145 |     },
146 |   ]"
147 | />
148 | 
149 | ## Examples
150 | 
151 | ### Vertical
152 | 
153 | You can create vertical tabs by using the `orientation` prop.
154 | 
155 | ```vue line=8
156 | <script setup>
157 | import { TabsContent, TabsList, TabsRoot, TabsTrigger } from 'reka-ui'
158 | </script>
159 | 
160 | <template>
161 |   <TabsRoot
162 |     default-value="tab1"
163 |     orientation="vertical"
164 |   >
165 |     <TabsList aria-label="tabs example">
166 |       <TabsTrigger value="tab1">
167 |         One
168 |       </TabsTrigger>
169 |       <TabsTrigger value="tab2">
170 |         Two
171 |       </TabsTrigger>
172 |       <TabsTrigger value="tab3">
173 |         Three
174 |       </TabsTrigger>
175 |     </TabsList>
176 |     <TabsContent value="tab1">
177 |       Tab one content
178 |     </TabsContent>
179 |     <TabsContent value="tab2">
180 |       Tab two content
181 |     </TabsContent>
182 |     <TabsContent value="tab3">
183 |       Tab three content
184 |     </TabsContent>
185 |   </TabsRoot>
186 | </template>
187 | ```
188 | 
189 | ## Accessibility
190 | 
191 | Adheres to the [Tabs WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel).
192 | 
193 | ### Keyboard Interactions
194 | 
195 | <KeyboardTable
196 |   :data="[
197 |     {
198 |       keys: ['Tab'],
199 |       description: '<span> When focus moves onto the tabs, focuses the active trigger. When a trigger is focused, moves focus to the active content.</span>',
200 |     },
201 |     {
202 |       keys: ['ArrowDown'],
203 |       description: '<span> Moves focus to the next trigger depending on <Code>orientation</Code> and activates its associated content.</span>',
204 |     },
205 |     {
206 |       keys: ['ArrowRight'],
207 |       description: '<span> Moves focus to the next trigger depending on <Code>orientation</Code> and activates its associated content.</span>',
208 |     },
209 |     {
210 |       keys: ['ArrowUp'],
211 |       description: '<span> Moves focus to the previous trigger depending on <Code>orientation</Code> and activates its associated content.</span>',
212 |     },
213 |     {
214 |       keys: ['ArrowLeft'],
215 |       description: '<span> Moves focus to the previous trigger depending on <Code>orientation</Code> and activates its associated content.</span>',
216 |     },
217 |     {
218 |       keys: ['Home'],
219 |       description: '<span> Moves focus to the first trigger and activates its associated content.</span>',
220 |     },
221 |     {
222 |       keys: ['End'],
223 |       description: '<span> Moves focus to the last trigger and activates its associated content.</span>',
224 |     },
225 |   ]"
226 | />
227 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/tags-input.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Tags Input
  3 | description: Tags input render tags inside an input, followed by an actual text input.
  4 | name: tags-input
  5 | ---
  6 | 
  7 | # Tags Input
  8 | 
  9 | <Description>
 10 | Tag inputs render tags inside an input, followed by an actual text input.
 11 | </Description>
 12 | 
 13 | <ComponentPreview name="TagsInput" />
 14 | 
 15 | ## Features
 16 | 
 17 | <Highlights
 18 |   :features="[
 19 |     'Can be controlled or uncontrolled.',
 20 |     'Full keyboard navigation.',
 21 |     'Limit the number of tags.',
 22 |     'Accept value from clipboard.',
 23 |     'Clear button to reset all tags values.'
 24 |   ]"
 25 | />
 26 | 
 27 | ## Installation
 28 | 
 29 | Install the component from your command line.
 30 | 
 31 | <InstallationTabs value="reka-ui" />
 32 | 
 33 | ## Anatomy
 34 | 
 35 | Import all parts and piece them together.
 36 | 
 37 | ```vue
 38 | <script setup>
 39 | import { TagsInputClear, TagsInputDelete, TagsInputInput, TagsInputItem, TagsInputRoot, TagsInputText } from 'reka-ui'
 40 | </script>
 41 | 
 42 | <template>
 43 |   <TagsInputRoot>
 44 |     <TagsInputItem>
 45 |       <TagsInputItemText />
 46 |       <TagsInputItemDelete />
 47 |     </TagsInputItem>
 48 | 
 49 |     <TagsInputInput />
 50 |     <TagsInputClear />
 51 |   </TagsInputRoot>
 52 | </template>
 53 | ```
 54 | 
 55 | ## API Reference
 56 | 
 57 | ### Root
 58 | 
 59 | Contains all the tags input component parts.
 60 | 
 61 | <!-- @include: @/meta/TagsInputRoot.md -->
 62 | 
 63 | <DataAttributesTable
 64 |   :data="[
 65 |     {
 66 |       attribute: '[data-disabled]',
 67 |       values: 'Present when disabled',
 68 |     },
 69 |     {
 70 |       attribute: '[data-focused]',
 71 |       values: 'Present when focus on input',
 72 |     },
 73 |     {
 74 |       attribute: '[data-invalid]',
 75 |       values: 'Present when input value is invalid',
 76 |     },
 77 |   ]"
 78 | />
 79 | 
 80 | ### Item
 81 | 
 82 | The component that contains the tag.
 83 | 
 84 | <!-- @include: @/meta/TagsInputItem.md -->
 85 | 
 86 | <DataAttributesTable
 87 |   :data="[
 88 |     {
 89 |       attribute: '[data-state]',
 90 |       values: ['active', 'inactive'],
 91 |     },
 92 |     {
 93 |       attribute: '[data-disabled]',
 94 |       values: 'Present when disabled',
 95 |     },
 96 |   ]"
 97 | />
 98 | 
 99 | ### ItemText
100 | 
101 | The textual part of the tag. Important for accessibility.
102 | 
103 | <!-- @include: @/meta/TagsInputItemText.md -->
104 | 
105 | ### ItemDelete
106 | 
107 | The button that delete the associate tag.
108 | 
109 | <!-- @include: @/meta/TagsInputItemDelete.md -->
110 | 
111 | <DataAttributesTable
112 |   :data="[
113 |     {
114 |       attribute: '[data-state]',
115 |       values: ['active', 'inactive'],
116 |     },
117 |     {
118 |       attribute: '[data-disabled]',
119 |       values: 'Present when disabled',
120 |     },
121 |   ]"
122 | />
123 | 
124 | ### Input
125 | 
126 | The input element for the tags input.
127 | 
128 | <!-- @include: @/meta/TagsInputInput.md -->
129 | 
130 | <DataAttributesTable
131 |   :data="[
132 |     {
133 |       attribute: '[data-invalid]',
134 |       values: 'Present when input value is invalid',
135 |     },
136 |   ]"
137 | />
138 | 
139 | ### Clear
140 | 
141 | The button that remove all tags.
142 | 
143 | <!-- @include: @/meta/TagsInputClear.md -->
144 | 
145 | <DataAttributesTable
146 |   :data="[
147 |     {
148 |       attribute: '[data-disabled]',
149 |       values: 'Present when disabled',
150 |     },
151 |   ]"
152 | />
153 | 
154 | ## Examples
155 | 
156 | ### Paste behavior
157 | 
158 | You can automatically add tags on paste by passing the `add-on-paste` prop.
159 | 
160 | ```vue line=8
161 | <script setup lang="ts">
162 | import { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'reka-ui'
163 | </script>
164 | 
165 | <template>
166 |   <TagsInputRoot
167 |     v-model="modelValue"
168 |     add-on-paste
169 |   >
170 |     …
171 |   </TagsInputRoot>
172 | </template>
173 | ```
174 | 
175 | ### Multiple delimiters
176 | 
177 | You can pass `RegExp` as `delimiter` to allow multiple characters to trigger addition of a new tag. When `add-on-paste` is passed it will be also used to split tags for `@paste` event.
178 | 
179 | ```vue line=4-5,11
180 | <script setup lang="ts">
181 | import { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'reka-ui'
182 | 
183 | // split by space, comma, semicolon, tab, or newline
184 | const delimiter = /[ ,;\t\n\r]+/
185 | </script>
186 | 
187 | <template>
188 |   <TagsInputRoot
189 |     v-model="modelValue"
190 |     :delimiter="delimiter"
191 |     add-on-paste
192 |   >
193 |     …
194 |   </TagsInputRoot>
195 | </template>
196 | ```
197 | 
198 | ## Accessibility
199 | 
200 | ### Keyboard Interactions
201 | 
202 | <KeyboardTable
203 |   :data="[
204 |     {
205 |       keys: ['Delete'],
206 |       description: '<span> When tag is active, remove it and set the tag on right active.</span>',
207 |     },
208 |     {
209 |       keys: ['Backspace'],
210 |       description: '<span> When tag is active, remove it and set the tag on left active. If there are no tags to the left, either the next tags gets focus, or the input.</span>',
211 |     },
212 |     {
213 |       keys: ['ArrowRight'],
214 |       description: '<span> Set the next tag active.</span>',
215 |     },
216 |     {
217 |       keys: ['ArrowLeft'],
218 |       description: '<span> Set the previous tag active.</span>',
219 |     },
220 |     {
221 |       keys: ['Home'],
222 |       description: '<span> Set the first tag active</span>',
223 |     },
224 |     {
225 |       keys: ['End'],
226 |       description: '<span> Set the last tag active</span>',
227 |     },
228 |   ]"
229 | />
230 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/time-field.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Time Field
  3 | description: Enables users to input specific times within a designated field.
  4 | name: time-field
  5 | ---
  6 | 
  7 | # Time Field
  8 | 
  9 | <Badge>Alpha</Badge>
 10 | 
 11 | <Description>
 12 | Enables users to input specific times within a designated field.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="TimeField" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation',
 22 |     'Can be controlled or uncontrolled',
 23 |     'Focus is fully managed',
 24 |     'Localization support',
 25 |     'Highly composable',
 26 |     'Accessible by default',
 27 |   ]"
 28 | />
 29 | 
 30 | ## Preface
 31 | 
 32 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
 33 | 
 34 | We highly recommend reading through the documentation for the package to get a solid feel for how it works, and you'll need to install it in your project to use the date-related components.
 35 | 
 36 | ## Installation
 37 | 
 38 | Install the date package.
 39 | 
 40 | <InstallationTabs value="@internationalized/date" />
 41 | 
 42 | Install the component from your command line.
 43 | 
 44 | <InstallationTabs value="reka-ui" />
 45 | 
 46 | ## Anatomy
 47 | 
 48 | Import all parts and piece them together.
 49 | 
 50 | ```vue
 51 | <script setup>
 52 | import {
 53 |   TimeFieldInput,
 54 |   TimeFieldRoot,
 55 | } from 'reka-ui'
 56 | </script>
 57 | 
 58 | <template>
 59 |   <TimeFieldRoot>
 60 |     <TimeFieldInput />
 61 |   </TimeFieldRoot>
 62 | </template>
 63 | ```
 64 | 
 65 | ## API Reference
 66 | 
 67 | ### Root
 68 | 
 69 | Contains all the parts of a time field
 70 | 
 71 | <!-- @include: @/meta/TimeFieldRoot.md -->
 72 | 
 73 | <DataAttributesTable
 74 |   :data="[
 75 |     {
 76 |       attribute: '[data-readonly]',
 77 |       values: 'Present when readonly',
 78 |     },
 79 |     {
 80 |       attribute: '[data-disabled]',
 81 |       values: 'Present when disabled',
 82 |     },
 83 |     {
 84 |       attribute: '[data-invalid]',
 85 |       values: 'Present when invalid',
 86 |     }
 87 |   ]"
 88 | />
 89 | 
 90 | ### Input
 91 | 
 92 | Contains the time field segments
 93 | 
 94 | <!-- @include: @/meta/TimeFieldInput.md -->
 95 | 
 96 | <DataAttributesTable
 97 |   :data="[
 98 |     {
 99 |       attribute: '[data-disabled]',
100 |       values: 'Present when disabled',
101 |     },
102 |     {
103 |       attribute: '[data-invalid]',
104 |       values: 'Present when invalid',
105 |     },
106 |     {
107 |       attribute: '[data-placeholder]',
108 |       values: 'Present when no value is set',
109 |     },
110 |   ]"
111 | />
112 | 
113 | ## Accessibility
114 | 
115 | ### Keyboard Interactions
116 | 
117 | <KeyboardTable
118 |   :data="[
119 |     {
120 |       keys: ['Tab'],
121 |       description: 'When focus moves onto the time field, focuses the first segment.'
122 |     },
123 |     {
124 |       keys: ['ArrowLeft', 'ArrowRight'],
125 |       description:
126 |       `
127 |          Navigates between the time field segments.
128 |       `
129 |     },
130 |     {
131 |       keys: ['ArrowUp', 'ArrowDown'],
132 |       description: 'Increments/changes the value of the segment.'
133 |     },
134 |     {
135 |       keys: ['0-9'],
136 |       description: `
137 |           When the focus is on a numeric <Code>TimeFieldInput</Code>, it types in the number and focuses the next segment if the next input would result in an invalid value.
138 |       `
139 |     },
140 |     {
141 |       keys: ['Backspace'],
142 |       description: 'Deletes a digit from the focused numeric segments.'
143 |     },
144 |     {
145 |       keys: ['A', 'P'],
146 |       description: 'When the focus is on the day period, it sets it to AM or PM.'
147 |     }
148 |   ]"
149 | />
150 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/toast.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Toast
  3 | description: A succinct message that is displayed temporarily.
  4 | name: toast
  5 | aria: https://www.w3.org/TR/wai-aria/#aria-live
  6 | ---
  7 | 
  8 | # Toast
  9 | 
 10 | <Description>
 11 | A succinct message that is displayed temporarily.
 12 | </Description>
 13 | 
 14 | <ComponentPreview name="Toast" />
 15 | 
 16 | <Highlights
 17 |   :features="[
 18 |     'Automatically closes.',
 19 |     'Pauses closing on hover, focus and window blur.',
 20 |     'Supports hotkey to jump to toast viewport.',
 21 |     'Supports closing via swipe gesture.',
 22 |     'Exposes CSS variables for swipe gesture animations.',
 23 |     'Can be controlled or uncontrolled.',
 24 |   ]"
 25 | />
 26 | 
 27 | ## Installation
 28 | 
 29 | Install the component from your command line.
 30 | 
 31 | <InstallationTabs value="reka-ui" />
 32 | 
 33 | ## Anatomy
 34 | 
 35 | Import the component.
 36 | 
 37 | ```vue
 38 | <script setup lang="ts">
 39 | import { ToastAction, ToastClose, ToastDescription, ToastProvider, ToastRoot, ToastTitle, ToastViewport } from 'reka-ui'
 40 | </script>
 41 | 
 42 | <template>
 43 |   <ToastProvider>
 44 |     <ToastRoot>
 45 |       <ToastTitle />
 46 |       <ToastDescription />
 47 |       <ToastAction />
 48 |       <ToastClose />
 49 |     </ToastRoot>
 50 | 
 51 |     <ToastViewport />
 52 |   </ToastProvider>
 53 | </template>
 54 | ```
 55 | 
 56 | ## API Reference
 57 | 
 58 | ### Provider
 59 | 
 60 | The provider that wraps your toasts and toast viewport. It usually wraps the application.
 61 | 
 62 | <!-- @include: @/meta/ToastProvider.md -->
 63 | 
 64 | ### Viewport
 65 | 
 66 | The fixed area where toasts appear. Users can jump to the viewport by pressing a hotkey. It is up to you to ensure the discoverability of the hotkey for keyboard users.
 67 | 
 68 | <!-- @include: @/meta/ToastViewport.md -->
 69 | 
 70 | ### Root
 71 | 
 72 | The toast that automatically closes. It should not be held open to [acquire a user response](/docs/components/toast#action).
 73 | 
 74 | <PresenceCallout />
 75 | 
 76 | <!-- @include: @/meta/ToastRoot.md -->
 77 | 
 78 | <DataAttributesTable
 79 |   :data="[
 80 |     {
 81 |       attribute: '[data-state]',
 82 |       values: ['open', 'closed'],
 83 |     },
 84 |     {
 85 |       attribute: '[data-swipe]',
 86 |       values: ['start', 'move', 'cancel', 'end'],
 87 |     },
 88 |     {
 89 |       attribute: '[data-swipe-direction]',
 90 |       values: ['up', 'down', 'left', 'right'],
 91 |     },
 92 |   ]"
 93 | />
 94 | 
 95 | <CssVariablesTable
 96 |   :data="[
 97 |     {
 98 |       cssVariable: '--reka-toast-swipe-move-x',
 99 |       description: 'The offset position of the toast when horizontally swiping',
100 |     },
101 |     {
102 |       cssVariable: '--reka-toast-swipe-move-y',
103 |       description: 'The offset position of the toast when vertically swiping',
104 |     },
105 |     {
106 |       cssVariable: '--reka-toast-swipe-end-x',
107 |       description:
108 |         'The offset end position of the toast after horizontally swiping',
109 |     },
110 |     {
111 |       cssVariable: '--reka-toast-swipe-end-y',
112 |       description:
113 |         'The offset end position of the toast after vertically swiping',
114 |     },
115 |   ]"
116 | />
117 | 
118 | ### Portal
119 | 
120 | When used, portals the content part into the `body`.
121 | 
122 | <!-- @include: @/meta/ToastPortal.md -->
123 | 
124 | ### Title
125 | 
126 | An optional title for the toast
127 | 
128 | <!-- @include: @/meta/ToastTitle.md -->
129 | 
130 | ### Description
131 | 
132 | The toast message.
133 | 
134 | <!-- @include: @/meta/ToastDescription.md -->
135 | 
136 | ### Action
137 | 
138 | An action that is safe to ignore to ensure users are not expected to complete tasks with unexpected side effects as a result of a [time limit](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-required-behaviors.html).
139 | 
140 | When obtaining a user response is necessary, portal an ["AlertDialog"](/docs/components/alert-dialog) styled as a toast into the viewport instead.
141 | 
142 | <!-- @include: @/meta/ToastAction.md -->
143 | 
144 | ### Close
145 | 
146 | A button that allows users to dismiss the toast before its duration has elapsed.
147 | 
148 | <!-- @include: @/meta/ToastClose.md -->
149 | 
150 | ## Examples
151 | 
152 | ### Custom hotkey
153 | 
154 | Override the default hotkey using the `event.code` value for each key from [keycode.info](https://keycode.info/).
155 | 
156 | ```vue line=4
157 | <template>
158 |   <ToastProvider>
159 |     ...
160 |     <ToastViewport :hotkey="['altKey', 'KeyT']" />
161 |   </ToastProvider>
162 | </template>
163 | ```
164 | 
165 | ### Custom duration
166 | 
167 | Customise the duration of a toast to override the provider value.
168 | 
169 | ```vue line=2
170 | <template>
171 |   <ToastRoot :duration="3000">
172 |     <ToastDescription>Saved!</ToastDescription>
173 |   </ToastRoot>
174 | </template>
175 | ```
176 | 
177 | ### Duplicate toasts
178 | 
179 | When a toast must appear every time a user clicks a button, use state to render multiple instances of the same toast (see below). Alternatively, you can abstract the parts to create your own [imperative API](/docs/components/toast#imperative-api).
180 | 
181 | ```vue line=3,8
182 | <template>
183 |   <div>
184 |     <form @submit="count++">
185 |       ...
186 |       <button>save</button>
187 |     </form>
188 | 
189 |     <ToastRoot v-for="(_, index) in count" :key="index">
190 |       <ToastDescription>Saved!</ToastDescription>
191 |     </ToastRoot>
192 |   </div>
193 | </template>
194 | ```
195 | 
196 | ### Animating swipe gesture
197 | 
198 | Combine `--reka-toast-swipe-move-[x|y]` and `--reka-toast-swipe-end-[x|y]` CSS variables with `data-swipe="[start|move|cancel|end]"` attributes to animate a swipe to close gesture. Here's an example:
199 | 
200 | ```vue line=2
201 | <template>
202 |   <ToastProvider swipe-direction="right">
203 |     <ToastRoot class="ToastRoot">
204 |       ...
205 |     </ToastRoot>
206 |     <ToastViewport />
207 |   </ToastProvider>
208 | </template>
209 | ```
210 | 
211 | ```css line=2,3,5,9,15
212 | /* styles.css */
213 | .ToastRoot[data-swipe='move'] {
214 |   transform: translateX(var(--reka-toast-swipe-move-x));
215 | }
216 | .ToastRoot[data-swipe='cancel'] {
217 |   transform: translateX(0);
218 |   transition: transform 200ms ease-out;
219 | }
220 | .ToastRoot[data-swipe='end'] {
221 |   animation: slideRight 100ms ease-out;
222 | }
223 | 
224 | @keyframes slideRight {
225 |   from {
226 |     transform: translateX(var(--reka-toast-swipe-end-x));
227 |   }
228 |   to {
229 |     transform: translateX(100%);
230 |   }
231 | }
232 | ```
233 | 
234 | ## Accessibility
235 | 
236 | Adheres to the [`aria-live` requirements](https://www.w3.org/TR/wai-aria/#aria-live).
237 | 
238 | ### Sensitivity
239 | 
240 | Control the sensitivity of the toast for screen readers using the `type` prop.
241 | 
242 | For toasts that are the result of a user action, choose `foreground`. Toasts generated from background tasks should use `background`.
243 | 
244 | #### Foreground
245 | 
246 | Foreground toasts are announced immediately. Assistive technologies may choose to clear previously queued messages when a foreground toast appears. Try to avoid stacking distinct foreground toasts at the same time.
247 | 
248 | #### Background
249 | 
250 | Background toasts are announced at the next graceful opportunity, for example, when the screen reader has finished reading its current sentence. They do not clear queued messages so overusing them can be perceived as a laggy user experience for screen reader users when used in response to a user interaction.
251 | 
252 | ```vue line=2,7
253 | <template>
254 |   <ToastRoot type="foreground">
255 |     <ToastDescription>File removed successfully.</ToastDescription>
256 |     <ToastClose>Dismiss</ToastClose>
257 |   </ToastRoot>
258 | 
259 |   <ToastRoot type="background">
260 |     <ToastDescription>We've just released Reka UI 2.0.</ToastDescription>
261 |     <ToastClose>Dismiss</ToastClose>
262 |   </ToastRoot>
263 | </template>
264 | ```
265 | 
266 | ### Alternative action
267 | 
268 | Use the `altText` prop on the `Action` to instruct an alternative way of actioning the toast to screen reader users.
269 | 
270 | You can direct the user to a permanent place in your application where they can action it or implement your own custom hotkey logic. If implementing the latter, use `foreground` type to announce immediately and increase the duration to give the user ample time.
271 | 
272 | ```vue line=5,11,13
273 | <template>
274 |   <ToastRoot type="background">
275 |     <ToastTitle>Upgrade Available!</ToastTitle>
276 |     <ToastDescription>We've just released Reka UI 2.0.</ToastDescription>
277 |     <ToastAction alt-text="Goto account settings to upgrade">
278 |       Upgrade
279 |     </ToastAction>
280 |     <ToastClose>Dismiss</ToastClose>
281 |   </ToastRoot>
282 | 
283 |   <ToastRoot type="foreground" :duration="10000">
284 |     <ToastDescription>File removed successfully.</ToastDescription>
285 |     <ToastAction alt-text="Undo (Alt+U)">
286 |       Undo <kbd>Alt</kbd>+<kbd>U</kbd>
287 |     </ToastAction>
288 |     <ToastClose>Dismiss</ToastClose>
289 |   </ToastRoot>
290 | </template>
291 | ```
292 | 
293 | ### Close icon button
294 | 
295 | When providing an icon (or font icon), remember to label it correctly for screen reader users.
296 | 
297 | ```vue line=4-5
298 | <template>
299 |   <ToastRoot type="foreground">
300 |     <ToastDescription>Saved!</ToastDescription>
301 |     <ToastClose aria-label="Close">
302 |       <span aria-hidden="true">×</span>
303 |     </ToastClose>
304 |   </ToastRoot>
305 | </template>
306 | ```
307 | 
308 | ### Keyboard Interactions
309 | 
310 | <KeyboardTable
311 |   :data="[
312 |     {
313 |       keys: ['F8'],
314 |       description: 'Focuses toasts viewport.',
315 |     },
316 |     {
317 |       keys: ['Tab'],
318 |       description: 'Moves focus to the next focusable element.',
319 |     },
320 |     {
321 |       keys: ['Shift + Tab'],
322 |       description: 'Moves focus to the previous focusable element.',
323 |     },
324 |     {
325 |       keys: ['Space'],
326 |       description: `
327 |         <span>
328 |           When focus is on a <Code>ToastAction</Code> or
329 |           <Code>ToastClose</Code>, closes the toast
330 |         </span>`
331 |     },
332 |     {
333 |       keys: ['Enter'],
334 |       description: `
335 |         <span>
336 |           When focus is on a <Code>ToastAction</Code> or
337 |           <Code>ToastClose</Code>, closes the toast
338 |         </span>`
339 |     },
340 |     {
341 |       keys: ['Esc'],
342 |       description: `
343 |         <span>
344 |           When focus is on a <Code>Toast</Code>, closes the toast
345 |         </span> `
346 |     },
347 |   ]"
348 | />
349 | 
350 | ## Custom APIs
351 | 
352 | ### Abstract parts
353 | 
354 | Create your own API by abstracting the primitive parts into your own component.
355 | 
356 | #### Usage
357 | 
358 | ```vue
359 | <script setup lang="ts">
360 | import Toast from './your-toast.vue'
361 | </script>
362 | 
363 | <template>
364 |   <Toast
365 |     title="Upgrade available"
366 |     content="We've just released Radix 3.0!"
367 |   >
368 |     <button @click="handleUpgrade">
369 |       Upgrade
370 |     </button>
371 |   </Toast>
372 | </template>
373 | ```
374 | 
375 | #### Implementation
376 | 
377 | ```vue
378 | // your-toast.vue
379 | <script setup lang="ts">
380 | import { ToastAction, ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'reka-ui'
381 | 
382 | defineProps<{
383 |   title: string
384 |   content: string
385 | }>()
386 | </script>
387 | 
388 | <template>
389 |   <ToastRoot>
390 |     <ToastTitle v-if="title">
391 |       {{ title }}
392 |     </ToastTitle>
393 |     <ToastDescription v-if="content">
394 |       {{ content }}
395 |     </ToastDescription>
396 |     <ToastAction
397 |       as-child
398 |       alt-text="toast"
399 |     >
400 |       <slot />
401 |     </ToastAction>
402 |     <ToastClose aria-label="Close">
403 |       <span aria-hidden="true">×</span>
404 |     </ToastClose>
405 |   </ToastRoot>
406 | </template>
407 | ```
408 | 
409 | ### Imperative API
410 | 
411 | Create your own imperative API to allow [toast duplication](/docs/components/toast#duplicate-toasts) if preferred.
412 | 
413 | #### Usage
414 | 
415 | ```vue
416 | <script setup lang="ts">
417 | import Toast from './your-toast.vue'
418 | 
419 | const savedRef = ref<InstanceType<typeof Toast>>()
420 | </script>
421 | 
422 | <template>
423 |   <div>
424 |     <form @submit="savedRef.publish()">
425 |       ...
426 |     </form>
427 |     <Toast ref="savedRef">
428 |       Saved successfully!
429 |     </Toast>
430 |   </div>
431 | </template>
432 | ```
433 | 
434 | #### Implementation
435 | 
436 | ```vue
437 | // your-toast.vue
438 | <script setup lang="ts">
439 | import { ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'reka-ui'
440 | import { ref } from 'vue'
441 | 
442 | const count = ref(0)
443 | 
444 | function publish() {
445 |   count.value++
446 | }
447 | 
448 | defineExpose({
449 |   publish
450 | })
451 | </script>
452 | 
453 | <template>
454 |   <ToastRoot
455 |     v-for="index in count"
456 |     :key="index"
457 |   >
458 |     <ToastDescription>
459 |       <slot />
460 |     </ToastDescription>
461 |     <ToastClose>Dismiss</ToastClose>
462 |   </ToastRoot>
463 | </template>
464 | ```
465 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/toggle-group.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Toggle Group
  4 | description: A set of two-state buttons that can be toggled on or off.
  5 | name: toggle-group
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/button
  7 | ---
  8 | 
  9 | # ToggleGroup
 10 | 
 11 | <Description>
 12 | A set of two-state buttons that can be toggled on or off.
 13 | </Description>
 14 | 
 15 | <ComponentPreview name="ToggleGroup" />
 16 | 
 17 | ## Features
 18 | 
 19 | <Highlights
 20 |   :features="[
 21 |     'Full keyboard navigation.',
 22 |     'Supports horizontal/vertical orientation.',
 23 |     'Support single and multiple pressed buttons.',
 24 |     'Can be controlled or uncontrolled.',
 25 |   ]"
 26 | />
 27 | 
 28 | ## Installation
 29 | 
 30 | Install the component from your command line.
 31 | 
 32 | <InstallationTabs value="reka-ui" />
 33 | 
 34 | ## Anatomy
 35 | 
 36 | Import the component.
 37 | 
 38 | ```vue
 39 | <script setup>
 40 | import { ToggleGroupItem, ToggleGroupRoot } from 'reka-ui'
 41 | </script>
 42 | 
 43 | <template>
 44 |   <ToggleGroupRoot>
 45 |     <ToggleGroupItem />
 46 |   </ToggleGroupRoot>
 47 | </template>
 48 | ```
 49 | 
 50 | ## API Reference
 51 | 
 52 | ### Root
 53 | 
 54 | Contains all the parts of a toggle group.
 55 | 
 56 | <!-- @include: @/meta/ToggleGroupRoot.md -->
 57 | 
 58 | <DataAttributesTable
 59 |   :data="[
 60 |     {
 61 |       attribute: '[data-orientation]',
 62 |       values: ['vertical', 'horizontal'],
 63 |     },
 64 |   ]"
 65 | />
 66 | 
 67 | ### Item
 68 | 
 69 | An item in the group.
 70 | 
 71 | <!-- @include: @/meta/ToggleGroupItem.md -->
 72 | 
 73 | <DataAttributesTable
 74 |   :data="[
 75 |     {
 76 |       attribute: '[data-state]',
 77 |       values: ['on', 'off'],
 78 |     },
 79 |     {
 80 |       attribute: '[data-disabled]',
 81 |       values: 'Present when disabled',
 82 |     },
 83 |     {
 84 |       attribute: '[data-orientation]',
 85 |       values: ['vertical', 'horizontal'],
 86 |     },
 87 |   ]"
 88 | />
 89 | 
 90 | ## Examples
 91 | 
 92 | ### Ensuring there is always a value
 93 | 
 94 | You can control the component to ensure a value.
 95 | 
 96 | ```vue line=5,10-13
 97 | <script setup>
 98 | import { ToggleGroupItem, ToggleGroupRoot } from 'reka-ui'
 99 | import { ref } from 'vue'
100 | 
101 | const value = ref('left')
102 | </script>
103 | 
104 | <template>
105 |   <ToggleGroupRoot
106 |     :model-value="value"
107 |     @update:model-value="(val) => {
108 |       if (val) value = val
109 |     }"
110 |   >
111 |     <ToggleGroupItem value="left">
112 |       <TextAlignLeftIcon />
113 |     </ToggleGroupItem>
114 |     <ToggleGroupItem value="center">
115 |       <TextAlignCenterIcon />
116 |     </ToggleGroupItem>
117 |     <ToggleGroupItem value="right">
118 |       <TextAlignRightIcon />
119 |     </ToggleGroupItem>
120 |   </ToggleGroupRoot>
121 | </template>
122 | ```
123 | 
124 | ## Accessibility
125 | 
126 | Uses [roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/examples/radio/radio.html) to manage focus movement among items.
127 | 
128 | ### Keyboard Interactions
129 | 
130 | <KeyboardTable
131 |   :data="[
132 |     {
133 |       keys: ['Tab'],
134 |       description:
135 |         'Moves focus to either the pressed item or the first item in the group.',
136 |     },
137 |     {
138 |       keys: ['Space'],
139 |       description: 'Activates/deactivates the item.',
140 |     },
141 |     {
142 |       keys: ['Enter'],
143 |       description: 'Activates/deactivates the item.',
144 |     },
145 |     {
146 |       keys: ['ArrowDown'],
147 |       description: 'Moves focus to the next item in the group.',
148 |     },
149 |     {
150 |       keys: ['ArrowRight'],
151 |       description: 'Moves focus to the next item in the group.',
152 |     },
153 |     {
154 |       keys: ['ArrowUp'],
155 |       description: 'Moves focus to the previous item in the group.',
156 |     },
157 |     {
158 |       keys: ['ArrowLeft'],
159 |       description: 'Moves focus to the previous item in the group.',
160 |     },
161 |     {
162 |       keys: ['Home'],
163 |       description: 'Moves focus to the first item.',
164 |     },
165 |     {
166 |       keys: ['End'],
167 |       description: 'Moves focus to the last item.',
168 |     },
169 |   ]"
170 | />
171 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/toggle.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Toggle
 4 | description: A two-state button that can be either on or off.
 5 | name: toggle
 6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/button
 7 | ---
 8 | 
 9 | # Toggle
10 | 
11 | <Description>
12 | A two-state button that can be either on or off.
13 | </Description>
14 | 
15 | <ComponentPreview name="Toggle" />
16 | 
17 | ## Features
18 | 
19 | <Highlights
20 |   :features="['Full keyboard navigation.', 'Can be controlled or uncontrolled.']"
21 | />
22 | 
23 | ## Installation
24 | 
25 | Install the component from your command line.
26 | 
27 | <InstallationTabs value="reka-ui" />
28 | 
29 | ## Anatomy
30 | 
31 | Import the component.
32 | 
33 | ```vue
34 | <script setup>
35 | import { Toggle } from 'reka-ui'
36 | </script>
37 | 
38 | <template>
39 |   <Toggle />
40 | </template>
41 | ```
42 | 
43 | ## API Reference
44 | 
45 | ### Root
46 | 
47 | The toggle.
48 | 
49 | <!-- @include: @/meta/Toggle.md -->
50 | 
51 | <DataAttributesTable
52 |   :data="[
53 |     {
54 |       attribute: '[data-state]',
55 |       values: ['on', 'off'],
56 |     },
57 |     {
58 |       attribute: '[data-disabled]',
59 |       values: 'Present when disabled',
60 |     },
61 |   ]"
62 | />
63 | 
64 | ## Accessibility
65 | 
66 | ### Keyboard Interactions
67 | 
68 | <KeyboardTable
69 |   :data="[
70 |     {
71 |       keys: ['Space'],
72 |       description: 'Activates/deactivates the toggle.',
73 |     },
74 |     {
75 |       keys: ['Enter'],
76 |       description: 'Activates/deactivates the toggle.',
77 |     },
78 |   ]"
79 | />
80 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/toolbar.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Toolbar
  4 | description: A container for grouping a set of controls, such as buttons, toggle groups or dropdown menus.
  5 | name: toolbar
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/toolbar
  7 | ---
  8 | 
  9 | # Toolbar
 10 | 
 11 | <Description>
 12 | A container for grouping a set of controls, such as buttons, Toolbar groups or
 13 | dropdown menus.
 14 | </Description>
 15 | 
 16 | <ComponentPreview name="Toolbar" />
 17 | 
 18 | ## Features
 19 | 
 20 | <Highlights :features="['Full keyboard navigation.']" />
 21 | 
 22 | ## Installation
 23 | 
 24 | Install the component from your command line.
 25 | 
 26 | <InstallationTabs value="reka-ui" />
 27 | 
 28 | ## Anatomy
 29 | 
 30 | Import the component.
 31 | 
 32 | ```vue
 33 | <script setup lang="ts">
 34 | import {
 35 |   ToolbarButton,
 36 |   ToolbarLink,
 37 |   ToolbarRoot,
 38 |   ToolbarSeparator,
 39 |   ToolbarToggleGroup,
 40 |   ToolbarToggleItem,
 41 | } from 'reka-ui'
 42 | </script>
 43 | 
 44 | <template>
 45 |   <ToolbarRoot>
 46 |     <ToolbarButton />
 47 |     <ToolbarSeparator />
 48 |     <ToolbarLink />
 49 |     <ToolbarToggleGroup>
 50 |       <ToolbarToggleItem />
 51 |     </ToolbarToggleGroup>
 52 |   </ToolbarRoot>
 53 | </template>
 54 | ```
 55 | 
 56 | ## API Reference
 57 | 
 58 | ### Root
 59 | 
 60 | Contains all the toolbar component parts.
 61 | 
 62 | <!-- @include: @/meta/ToolbarRoot.md -->
 63 | 
 64 | <DataAttributesTable
 65 |   :data="[
 66 |     {
 67 |       attribute: '[data-orientation]',
 68 |       values: ['vertical', 'horizontal'],
 69 |     },
 70 |   ]"
 71 | />
 72 | 
 73 | ### Button
 74 | 
 75 | A button item.
 76 | 
 77 | <!-- @include: @/meta/ToolbarButton.md -->
 78 | 
 79 | <DataAttributesTable
 80 |   :data="[
 81 |     {
 82 |       attribute: '[data-orientation]',
 83 |       values: ['vertical', 'horizontal'],
 84 |     },
 85 |   ]"
 86 | />
 87 | 
 88 | ### Link
 89 | 
 90 | A link item.
 91 | 
 92 | <!-- @include: @/meta/ToolbarLink.md -->
 93 | 
 94 | ### ToggleGroup
 95 | 
 96 | A set of two-state buttons that can be toggled on or off.
 97 | 
 98 | <!-- @include: @/meta/ToolbarToggleGroup.md -->
 99 | 
100 | <DataAttributesTable
101 |   :data="[
102 |     {
103 |       attribute: '[data-orientation]',
104 |       values: ['vertical', 'horizontal'],
105 |     },
106 |   ]"
107 | />
108 | 
109 | ### ToggleItem
110 | 
111 | An item in the group.
112 | 
113 | <!-- @include: @/meta/ToolbarToggleItem.md -->
114 | 
115 | <DataAttributesTable
116 |   :data="[
117 |     {
118 |       attribute: '[data-state]',
119 |       values: ['on', 'off'],
120 |     },
121 |     {
122 |       attribute: '[data-disabled]',
123 |       values: 'Present when disabled',
124 |     },
125 |     {
126 |       attribute: '[data-orientation]',
127 |       values: ['vertical', 'horizontal'],
128 |     },
129 |   ]"
130 | />
131 | 
132 | ### Separator
133 | 
134 | Used to visually separate items in the toolbar
135 | 
136 | <!-- @include: @/meta/ToolbarSeparator.md -->
137 | 
138 | <DataAttributesTable
139 |   :data="[
140 |     {
141 |       attribute: '[data-orientation]',
142 |       values: ['vertical', 'horizontal'],
143 |     },
144 |   ]"
145 | />
146 | 
147 | ## Examples
148 | 
149 | ### Use with other primitives
150 | 
151 | All our primitives which expose a `Trigger` part, such as `Dialog`, `AlertDialog`, `Popover`, `DropdownMenu` can be composed within a toolbar by using the [`asChild` prop](/docs/guides/composition).
152 | 
153 | Here is an example using our `DropdownMenu` primitive.
154 | 
155 | ```vue line=20-22
156 | <script setup lang="ts">
157 | import {
158 |   DropdownMenuContent,
159 |   DropdownMenuRoot,
160 |   DropdownMenuTrigger,
161 |   ToolbarButton,
162 |   ToolbarLink,
163 |   ToolbarRoot,
164 |   ToolbarSeparator,
165 |   ToolbarToggleGroup,
166 |   ToolbarToggleItem,
167 | } from 'reka-ui'
168 | </script>
169 | 
170 | <template>
171 |   <ToolbarRoot>
172 |     <ToolbarButton>Action 1</ToolbarButton>
173 |     <ToolbarSeparator />
174 |     <DropdownMenuRoot>
175 |       <ToolbarButton as-child>
176 |         <DropdownMenuTrigger>Trigger</DropdownMenuTrigger>
177 |       </ToolbarButton>
178 |       <DropdownMenuContent>…</DropdownMenuContent>
179 |     </DropdownMenuRoot>
180 |   </ToolbarRoot>
181 | </template>
182 | ```
183 | 
184 | ## Accessibility
185 | 
186 | Uses [roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/examples/radio/radio.html) to manage focus movement among items.
187 | 
188 | ### Keyboard Interactions
189 | 
190 | <KeyboardTable
191 |   :data="[
192 |     {
193 |       keys: ['Tab'],
194 |       description: 'Moves focus to the first item in the group.',
195 |     },
196 |     {
197 |       keys: ['Space'],
198 |       description: 'Activates/deactivates the item.',
199 |     },
200 |     {
201 |       keys: ['Enter'],
202 |       description: 'Activates/deactivates the item.',
203 |     },
204 |     {
205 |       keys: ['ArrowDown'],
206 |       description: '<span> Moves focus to the next item depending on <Code>orientation</Code>.</span>',
207 |     },
208 |     {
209 |       keys: ['ArrowRight'],
210 |       description: '<span> Moves focus to the next item depending on <Code>orientation</Code>.</span>',
211 |     },
212 |     {
213 |       keys: ['ArrowUp'],
214 |       description: '<span> Moves focus to the previous item depending on <Code>orientation</Code> .</span>',
215 |     },
216 |     {
217 |       keys: ['ArrowLeft'],
218 |       description: '<span> Moves focus to the previous item depending on <Code>orientation</Code> .</span>',
219 |     },
220 |     {
221 |       keys: ['Home'],
222 |       description: '<span>Moves focus to the first item.</span>',
223 |     },
224 |     {
225 |       keys: ['End'],
226 |       description: '<span>Moves focus to the last item.</span>',
227 |     },
228 |   ]"
229 | />
230 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/tooltip.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Tooltip
  3 | description: A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.
  4 | name: tooltip
  5 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/tooltip
  6 | ---
  7 | 
  8 | # Tooltip
  9 | 
 10 | <Description>
 11 | A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.
 12 | </Description>
 13 | 
 14 | <ComponentPreview name="Tooltip" />
 15 | 
 16 | ## Features
 17 | 
 18 | <Highlights
 19 |   :features="[
 20 |     'Provider to control display delay globally.',
 21 |     'Opens when the trigger is focused or hovered.',
 22 |     'Closes when the trigger is activated or when pressing escape.',
 23 |     'Supports custom timings.']"
 24 | />
 25 | 
 26 | ## Anatomy
 27 | 
 28 | Import all parts and piece them together.
 29 | 
 30 | ```vue
 31 | <script setup lang="ts">
 32 | import { TooltipArrow, TooltipContent, TooltipPortal, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'
 33 | </script>
 34 | 
 35 | <template>
 36 |   <TooltipProvider>
 37 |     <TooltipRoot>
 38 |       <TooltipTrigger />
 39 |       <TooltipPortal>
 40 |         <TooltipContent>
 41 |           <TooltipArrow />
 42 |         </TooltipContent>
 43 |       </TooltipPortal>
 44 |     </TooltipRoot>
 45 |   </TooltipProvider>
 46 | </template>
 47 | ```
 48 | 
 49 | ## API Reference
 50 | 
 51 | ### Provider
 52 | 
 53 | Wraps your app to provide global functionality to your tooltips.
 54 | 
 55 | <!-- @include: @/meta/TooltipProvider.md -->
 56 | 
 57 | ### Root
 58 | 
 59 | Contains all the parts of a tooltip.
 60 | 
 61 | <!-- @include: @/meta/TooltipRoot.md -->
 62 | 
 63 | ### Trigger
 64 | 
 65 | The button that toggles the tooltip. By default, the `TooltipContent` will position itself against the trigger.
 66 | 
 67 | <!-- @include: @/meta/TooltipTrigger.md -->
 68 | 
 69 | <DataAttributesTable
 70 |   :data="[
 71 |     {
 72 |       attribute: '[data-state]',
 73 |       values: ['closed', 'delayed-open', 'instant-open'],
 74 |     },
 75 |   ]"
 76 | />
 77 | 
 78 | ### Portal
 79 | 
 80 | When used, portals the content part into the `body`.
 81 | 
 82 | <!-- @include: @/meta/TooltipPortal.md -->
 83 | 
 84 | ### Content
 85 | 
 86 | The component that pops out when the tooltip is open.
 87 | 
 88 | <PresenceCallout />
 89 | 
 90 | <!-- @include: @/meta/TooltipContent.md -->
 91 | 
 92 | <DataAttributesTable
 93 |   :data="[
 94 |     {
 95 |       attribute: '[data-state]',
 96 |       values: ['closed', 'delayed-open', 'instant-open'],
 97 |     },
 98 |     {
 99 |       attribute: '[data-side]',
100 |       values: ['left', 'right', 'bottom', 'top'],
101 |     },
102 |     {
103 |       attribute: '[data-align]',
104 |       values: ['start', 'end', 'center'],
105 |     },
106 |   ]"
107 | />
108 | 
109 | <CssVariablesTable
110 |   :data="[
111 |     {
112 |       cssVariable: '--reka-tooltip-content-transform-origin',
113 |       description: ' The <Code>transform-origin</Code> computed from the content and arrow positions/offsets',
114 |     },
115 |     {
116 |       cssVariable: '--reka-tooltip-content-available-width',
117 |       description: 'The remaining width between the trigger and the boundary edge',
118 |     },
119 |     {
120 |       cssVariable: '--reka-tooltip-content-available-height',
121 |       description: 'The remaining height between the trigger and the boundary edge',
122 |     },
123 |     {
124 |       cssVariable: '--reka-tooltip-trigger-width',
125 |       description: 'The width of the trigger',
126 |     },
127 |     {
128 |       cssVariable: '--reka-tooltip-trigger-height',
129 |       description: 'The height of the trigger',
130 |     },
131 |   ]"
132 | />
133 | 
134 | ### Arrow
135 | 
136 | An optional arrow element to render alongside the tooltip. This can be used to help visually link the trigger with the `TooltipContent`. Must be rendered inside `TooltipContent`.
137 | 
138 | <!-- @include: @/meta/TooltipArrow.md -->
139 | 
140 | ## Examples
141 | 
142 | ### Configure globally
143 | 
144 | Use the `Provider` to control `delayDuration` and `skipDelayDuration` globally.
145 | 
146 | ```vue line=7-8
147 | <script setup>
148 | import { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'
149 | </script>
150 | 
151 | <template>
152 |   <TooltipProvider
153 |     :delay-duration="800"
154 |     :skip-delay-duration="500"
155 |   >
156 |     <TooltipRoot>
157 |       <TooltipTrigger>…</TooltipTrigger>
158 |       <TooltipContent>…</TooltipContent>
159 |     </TooltipRoot>
160 |     <TooltipRoot>
161 |       <TooltipTrigger>…</TooltipTrigger>
162 |       <TooltipContent>…</TooltipContent>
163 |     </TooltipRoot>
164 |   </TooltipProvider>
165 | </template>
166 | ```
167 | 
168 | ### Show instantly
169 | 
170 | Use the `delayDuration` prop to control the time it takes for the tooltip to open.
171 | 
172 | ```vue line=6
173 | <script setup>
174 | import { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'
175 | </script>
176 | 
177 | <template>
178 |   <TooltipRoot :delay-duration="0">
179 |     <TooltipTrigger>…</TooltipTrigger>
180 |     <TooltipContent>…</TooltipContent>
181 |   </TooltipRoot>
182 | </template>
183 | ```
184 | 
185 | ### Displaying a tooltip from a disabled button
186 | 
187 | Since disabled buttons don't fire events, you need to:
188 | 
189 | - Render the `Trigger` as `span`.
190 | - Ensure the `button` has no `pointerEvents`.
191 | 
192 | ```vue line=7-11
193 | <script setup>
194 | import { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'
195 | </script>
196 | 
197 | <template>
198 |   <TooltipRoot>
199 |     <TooltipTrigger as-child>
200 |       <span tabindex="0">
201 |         <button
202 |           disabled
203 |           style="{ pointerEvents: 'none' }"
204 |         >…</button>
205 |       </span>
206 |     </TooltipTrigger>
207 |     <TooltipContent>…</TooltipContent>
208 |   </TooltipRoot>
209 | </template>
210 | ```
211 | 
212 | ### Constrain the content size
213 | 
214 | You may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.
215 | 
216 | We expose several CSS custom properties such as `--reka-tooltip-trigger-width` and `--reka-tooltip-content-available-height` to support this. Use them to constrain the content dimensions.
217 | 
218 | ```vue line=10
219 | <script setup>
220 | import { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'
221 | </script>
222 | 
223 | <template>
224 |   <TooltipRoot>
225 |     <TooltipTrigger>…</TooltipTrigger>
226 |     <TooltipPortal>
227 |       <TooltipContent
228 |         class="TooltipContent"
229 |         :side-offset="5"
230 |       >
231 |         …
232 |       </TooltipContent>
233 |     </TooltipPortal>
234 |   </TooltipRoot>
235 | </template>
236 | ```
237 | 
238 | ```css line=3,4
239 | /* styles.css */
240 | .TooltipContent {
241 |   width: var(--reka-tooltip-trigger-width);
242 |   max-height: var(--reka-tooltip-content-available-height);
243 | }
244 | ```
245 | 
246 | ### Origin-aware animations
247 | 
248 | We expose a CSS custom property `--reka-tooltip-content-transform-origin`. Use it to animate the content from its computed origin based on `side`, `sideOffset`, `align`, `alignOffset` and any collisions.
249 | 
250 | ```vue line=8
251 | <script setup>
252 | import { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'
253 | </script>
254 | 
255 | <template>
256 |   <TooltipRoot>
257 |     <TooltipTrigger>…</TooltipTrigger>
258 |     <TooltipContent class="TooltipContent">
259 |       …
260 |     </TooltipContent>
261 |   </TooltipRoot>
262 | </template>
263 | ```
264 | 
265 | ```css line=3-4
266 | /* styles.css */
267 | .TooltipContent {
268 |   transform-origin: var(--reka-tooltip-content-transform-origin);
269 |   animation: scaleIn 0.5s ease-out;
270 | }
271 | 
272 | @keyframes scaleIn {
273 |   from {
274 |     opacity: 0;
275 |     transform: scale(0);
276 |   }
277 |   to {
278 |     opacity: 1;
279 |     transform: scale(1);
280 |   }
281 | }
282 | ```
283 | 
284 | ### Collision-aware animations
285 | 
286 | We expose `data-side` and `data-align` attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.
287 | 
288 | ```vue line=8
289 | <script setup>
290 | import { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'
291 | </script>
292 | 
293 | <template>
294 |   <TooltipRoot>
295 |     <TooltipTrigger>…</TooltipTrigger>
296 |     <TooltipContent class="TooltipContent">
297 |       …
298 |     </TooltipContent>
299 |   </TooltipRoot>
300 | </template>
301 | ```
302 | 
303 | ```css line=6,9
304 | /* styles.css */
305 | .TooltipContent {
306 |   animation-duration: 0.6s;
307 |   animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
308 | }
309 | .TooltipContent[data-side="top"] {
310 |   animation-name: slideUp;
311 | }
312 | .TooltipContent[data-side="bottom"] {
313 |   animation-name: slideDown;
314 | }
315 | 
316 | @keyframes slideDown {
317 |   from {
318 |     opacity: 0;
319 |     transform: translateY(-10px);
320 |   }
321 |   to {
322 |     opacity: 1;
323 |     transform: translateY(0);
324 |   }
325 | }
326 | 
327 | @keyframes slideUp {
328 |   from {
329 |     opacity: 0;
330 |     transform: translateY(10px);
331 |   }
332 |   to {
333 |     opacity: 1;
334 |     transform: translateY(0);
335 |   }
336 | }
337 | ```
338 | 
339 | ## Accessibility
340 | 
341 | ### Keyboard Interactions
342 | 
343 | <KeyboardTable
344 | :data="[
345 | {
346 | keys: ['Tab'],
347 | description: 'Opens/closes the tooltip without delay.',
348 | },
349 | {
350 | keys: ['Space'],
351 | description: 'If open, closes the tooltip without delay.',
352 | },
353 | {
354 | keys: ['Enter'],
355 | description: 'If open, closes the tooltip without delay.',
356 | },
357 | {
358 | keys: ['Escape'],
359 | description: 'If open, closes the tooltip without delay.',
360 | },
361 | ]"
362 | />
363 | 
364 | ## Custom APIs
365 | 
366 | Create your own API by abstracting the primitive parts into your own component.
367 | 
368 | ### Abstract parts and introduce a content prop
369 | 
370 | This example abstracts all of the `Tooltip` parts and introduces a new `content` prop.
371 | 
372 | #### Usage
373 | 
374 | ```vue
375 | <script setup lang="ts">
376 | import { Tooltip } from './your-tooltip'
377 | </script>
378 | 
379 | <template>
380 |   <Tooltip content="Tooltip content">
381 |     <button>Tooltip trigger</button>
382 |   </Tooltip>
383 | </template>
384 | ```
385 | 
386 | #### Implementation
387 | 
388 | Use the [`asChild` prop](/docs/guides/composition) to convert the trigger part into a slottable area. It will replace the trigger with the child that gets passed to it.
389 | 
390 | ```vue line=13-15
391 | <!-- your-tooltip.vue  -->
392 | <script setup lang="ts">
393 | import type { TooltipRootEmits, TooltipRootProps } from 'reka-ui'
394 | import { TooltipArrow, TooltipContent, TooltipRoot, TooltipTrigger, useForwardPropsEmits } from 'reka-ui'
395 | 
396 | const props = defineProps<TooltipRootProps & { content?: string }>()
397 | const emits = defineEmits<TooltipRootEmits>()
398 | 
399 | const forward = useForwardPropsEmits(props, emits)
400 | </script>
401 | 
402 | <template>
403 |   <TooltipRoot v-bind="forward">
404 |     <TooltipTrigger as-child>
405 |       <slot />
406 |     </TooltipTrigger>
407 |     <TooltipContent
408 |       side="top"
409 |       align="center"
410 |     >
411 |       {{ content }}
412 |       <TooltipArrow
413 |         :width="11"
414 |         :height="5"
415 |       />
416 |     </TooltipContent>
417 |   </TooltipRoot>
418 | </template>
419 | ```
420 | 


--------------------------------------------------------------------------------
/docs/content/docs/components/tree.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Tree
  4 | description: A tree view widget displays a hierarchical list of items that can be expanded or collapsed to show or hide their child items, such as in a file system navigator.
  5 | name: tree
  6 | aria: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/
  7 | ---
  8 | 
  9 | # Tree
 10 | 
 11 | <Badge>Alpha</Badge>
 12 | 
 13 | <Description>
 14 | A tree view widget displays a hierarchical list of items that can be expanded or collapsed to show or hide their child items, such as in a file system navigator.
 15 | </Description>
 16 | 
 17 | <ComponentPreview name="Tree" />
 18 | 
 19 | ## Features
 20 | 
 21 | <Highlights
 22 |   :features="[
 23 |     'Can be controlled or uncontrolled.',
 24 |     'Focus is fully managed.',
 25 |     'Full keyboard navigation.',
 26 |     'Supports Right to Left direction.',
 27 |     'Supports multiple selection.',
 28 |     'Different selection behavior.',
 29 |   ]"
 30 | />
 31 | 
 32 | ## Installation
 33 | 
 34 | Install the component from your command line.
 35 | 
 36 | <InstallationTabs value="reka-ui" />
 37 | 
 38 | ## Anatomy
 39 | 
 40 | Import all parts and piece them together.
 41 | 
 42 | ```vue
 43 | <script setup>
 44 | import { TreeItem, TreeRoot, TreeVirtualizer } from 'reka-ui'
 45 | </script>
 46 | 
 47 | <template>
 48 |   <TreeRoot>
 49 |     <TreeItem />
 50 | 
 51 |     <!-- or with virtual -->
 52 |     <TreeVirtualizer>
 53 |       <TreeItem />
 54 |     </TreeVirtualizer>
 55 |   </TreeRoot>
 56 | </template>
 57 | ```
 58 | 
 59 | ## API Reference
 60 | 
 61 | ### Root
 62 | 
 63 | Contains all the parts of a tree.
 64 | 
 65 | <!-- @include: @/meta/TreeRoot.md -->
 66 | 
 67 | ### Item
 68 | 
 69 | The item component.
 70 | 
 71 | <!-- @include: @/meta/TreeItem.md -->
 72 | 
 73 | <DataAttributesTable
 74 |   :data="[
 75 |     {
 76 |       attribute: '[data-indent]',
 77 |       values: 'Number',
 78 |     },
 79 |     {
 80 |       attribute: '[data-expanded]',
 81 |       values: 'Present when expanded',
 82 |     },
 83 |     {
 84 |       attribute: '[data-selected]',
 85 |       values: 'Present when selected',
 86 |     },
 87 |   ]"
 88 | />
 89 | 
 90 | ### Virtualizer
 91 | 
 92 | Virtual container to achieve list virtualization.
 93 | 
 94 | <!-- @include: @/meta/TreeVirtualizer.md -->
 95 | 
 96 | ## Examples
 97 | 
 98 | ### Selecting multiple items
 99 | 
100 | The `Tree` component allows you to select multiple items. You can enable this by providing an array of values instead of a single value and set `multiple="true"`.
101 | 
102 | ```vue line=12,17-18
103 | <script setup lang="ts">
104 | import { TreeRoot } from 'reka-ui'
105 | import { ref } from 'vue'
106 | 
107 | const people = [
108 |   { id: 1, name: 'Durward Reynolds' },
109 |   { id: 2, name: 'Kenton Towne' },
110 |   { id: 3, name: 'Therese Wunsch' },
111 |   { id: 4, name: 'Benedict Kessler' },
112 |   { id: 5, name: 'Katelyn Rohan' },
113 | ]
114 | const selectedPeople = ref([people[0], people[1]])
115 | </script>
116 | 
117 | <template>
118 |   <TreeRoot
119 |     v-model="selectedPeople"
120 |     multiple
121 |   >
122 |     ...
123 |   </TreeRoot>
124 | </template>
125 | ```
126 | 
127 | ### Virtual List
128 | 
129 | Rendering a long list of item can slow down the app, thus using virtualization would significantly improve the performance.
130 | 
131 | See the [virtualization guide](../guides/virtualization.md) for more general info on virtualization.
132 | 
133 | ```vue line=8-15
134 | <script setup lang="ts">
135 | import { TreeItem, TreeRoot, TreeVirtualizer } from 'reka-ui'
136 | import { ref } from 'vue'
137 | </script>
138 | 
139 | <template>
140 |   <TreeRoot :items>
141 |     <TreeVirtualizer
142 |       v-slot="{ item }"
143 |       :text-content="(opt) => opt.name"
144 |     >
145 |       <TreeItem v-bind="item.bind">
146 |         {{ person.name }}
147 |       </TreeItem>
148 |     </TreeVirtualizer>
149 |   </TreeRoot>
150 | </template>
151 | ```
152 | 
153 | ### With Checkbox
154 | 
155 | Some `Tree` component might want to show `toggled/indeterminate` checkbox. We can change the behavior of the `Tree` component by using a few props and `preventDefault` event.
156 | 
157 | We set `propagateSelect` to `true` because we want the parent checkbox to select/deselect it's descendants. Then, we add a checkbox that triggers `select` event.
158 | 
159 | ```vue line=10-11,17-25,27-30
160 | <script setup lang="ts">
161 | import { TreeItem, TreeRoot } from 'reka-ui'
162 | import { ref } from 'vue'
163 | </script>
164 | 
165 | <template>
166 |   <TreeRoot
167 |     v-slot="{ flattenItems }"
168 |     :items
169 |     multiple
170 |     propagate-select
171 |   >
172 |     <TreeItem
173 |       v-for="item in flattenItems"
174 |       :key="item._id"
175 |       v-bind="item.bind"
176 |       v-slot="{ handleSelect, isSelected, isIndeterminate }"
177 |       @select="(event) => {
178 |         if (event.detail.originalEvent.type === 'click')
179 |           event.preventDefault()
180 |       }"
181 |       @toggle="(event) => {
182 |         if (event.detail.originalEvent.type === 'keydown')
183 |           event.preventDefault()
184 |       }"
185 |     >
186 |       <Icon
187 |         v-if="item.hasChildren"
188 |         icon="radix-icons:chevron-down"
189 |       />
190 | 
191 |       <button
192 |         tabindex="-1"
193 |         @click.stop
194 |         @change="handleSelect"
195 |       >
196 |         <Icon
197 |           v-if="isSelected"
198 |           icon="radix-icons:check"
199 |         />
200 |         <Icon
201 |           v-else-if="isIndeterminate"
202 |           icon="radix-icons:dash"
203 |         />
204 |         <Icon
205 |           v-else
206 |           icon="radix-icons:box"
207 |         />
208 |       </button>
209 | 
210 |       <div class="pl-2">
211 |         {{ item.value.title }}
212 |       </div>
213 |     </TreeItem>
214 |   </TreeRoot>
215 | </template>
216 | ```
217 | 
218 | ### Nested Tree Node
219 | 
220 | The default example shows flatten tree items and nodes, this enables [Virtualization](/docs/components/tree.html#virtual-list) and custom feature such as Drag & Drop easier. However, you can also build it to have nested DOM node.
221 | 
222 | In `Tree.vue`,
223 | 
224 | ```vue
225 | <script setup lang="ts">
226 | import { TreeItem } from 'reka-ui'
227 | 
228 | interface TreeNode {
229 |   title: string
230 |   icon: string
231 |   children?: TreeNode[]
232 | }
233 | 
234 | withDefaults(defineProps<{
235 |   treeItems: TreeNode[]
236 |   level?: number
237 | }>(), { level: 0 })
238 | </script>
239 | 
240 | <template>
241 |   <li
242 |     v-for=" tree in treeItems"
243 |     :key="tree.title"
244 |   >
245 |     <TreeItem
246 |       v-slot="{ isExpanded }"
247 |       as-child
248 |       :level="level"
249 |       :value="tree"
250 |     >
251 |       <button>…</button>
252 | 
253 |       <ul v-if="isExpanded && tree.children">
254 |         <Tree
255 |           :tree-items="tree.children"
256 |           :level="level + 1"
257 |         />
258 |       </ul>
259 |     </TreeItem>
260 |   </li>
261 | </template>
262 | ```
263 | 
264 | In `CustomTree.vue`
265 | 
266 | ```vue
267 | <template>
268 |   <TreeRoot
269 |     :items="items"
270 |     :get-key="(item) => item.title"
271 |   >
272 |     <Tree :tree-items="items" />
273 |   </TreeRoot>
274 | </template>
275 | ```
276 | 
277 | ### Custom children schema
278 | 
279 | By default, `<TreeRoot />` expects you to provide the list of node's children by passing a list of `children` for every node. You can override that by providing the `getChildren` prop.
280 | 
281 | <Callout type="info">
282 | 
283 | If the node doesn't have any children, `getChildren` should return `undefined` instead of an empty array.
284 | 
285 | </Callout>
286 | 
287 | ```vue line=22
288 | <script setup lang="ts">
289 | import { TreeRoot } from 'reka-ui'
290 | import { ref } from 'vue'
291 | 
292 | interface FileNode {
293 |   title: string
294 |   icon: string
295 | }
296 | 
297 | interface DirectoryNode {
298 |   title: string
299 |   icon: string
300 |   directories?: DirectoryNode[]
301 |   files?: FileNode[]
302 | }
303 | </script>
304 | 
305 | <template>
306 |   <TreeRoot
307 |     :items="items"
308 |     :get-key="(item) => item.title"
309 |     :get-children="(item) => (!item.files) ? item.directories : (!item.directories) ? item.files : [...item.directories, ...item.files]"
310 |   >
311 |     ...
312 |   </TreeRoot>
313 | </template>
314 | ```
315 | 
316 | ### Draggable/Sortable Tree
317 | 
318 | For more complex draggable `Tree` component, in this example we will be using [pragmatic-drag-and-drop](https://github.com/atlassian/pragmatic-drag-and-drop), as the core package for handling dnd.
319 | 
320 | [Stackblitz Demo](https://stackblitz.com/edit/github-8f3fzs?file=src%2FTreeDND.vue)
321 | 
322 | ## Accessibility
323 | 
324 | Adheres to the [Tree WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/treeview/).
325 | 
326 | ### Keyboard Interactions
327 | 
328 | <KeyboardTable
329 |   :data="[
330 |     {
331 |       keys: ['Enter'],
332 |       description: 'When highlight on <code>TreeItem</code>, selects the focused item.',
333 |     },
334 |     {
335 |       keys: ['ArrowDown'],
336 |       description: 'When focus is on <code>TreeItem</code>, moves focus to the next item.',
337 |     },
338 |     {
339 |       keys: ['ArrowUp'],
340 |       description: 'When focus is on <code>TreeItem</code>, moves focus to the previous item.',
341 |     },
342 |     {
343 |       keys: ['ArrowRight'],
344 |       description: 'When focus is on a closed <code>TreeItem</code> (node), it opens the node without moving focus. When on an open node, it moves focus to the first child node. When on an end node, it does nothing.',
345 |     },
346 |     {
347 |       keys: ['ArrowLeft'],
348 |       description: 'When focus is on an open <code>TreeItem</code> (node), closes the node. When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node. When focus is on a root node that is also either an end node or a closed node, does nothing.',
349 |     },
350 |     {
351 |       keys: ['Home', 'PageUp'],
352 |       description: '<span>Moves focus first <code>TreeItem</code></span>',
353 |     },
354 |     {
355 |       keys: ['End', 'PageDown'],
356 |       description: '<span>Moves focus last <code>TreeItem</code></span>',
357 |     },
358 |   ]"
359 | />
360 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/animation.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Animation/Transition
  3 | description: Animate Reka UI with CSS keyframes, native Vue Transition or JavaScript animation library of your choice.
  4 | ---
  5 | 
  6 | # Animation
  7 | 
  8 | <Description>
  9 | Animate Reka UI with CSS keyframes, native Vue Transition or JavaScript animation library of your choice.
 10 | </Description>
 11 | 
 12 | Adding animation to Reka UI should feel similar to any other component, but there are some caveats noted here in regards to exiting animations with JS animation libraries.
 13 | 
 14 | ## Animating with CSS animation
 15 | 
 16 | The simplest way to animate Primitives is with CSS.
 17 | 
 18 | You can use CSS animation to animate both mount and unmount phases. The latter is possible because the Reka UI will suspend unmount while your animation plays out.
 19 | 
 20 | ```css
 21 | @keyframes fadeIn {
 22 |   from {
 23 |     opacity: 0;
 24 |   }
 25 |   to {
 26 |     opacity: 1;
 27 |   }
 28 | }
 29 | 
 30 | @keyframes fadeOut {
 31 |   from {
 32 |     opacity: 1;
 33 |   }
 34 |   to {
 35 |     opacity: 0;
 36 |   }
 37 | }
 38 | 
 39 | .DialogOverlay[data-state="open"],
 40 | .DialogContent[data-state="open"] {
 41 |   animation: fadeIn 300ms ease-out;
 42 | }
 43 | 
 44 | .DialogOverlay[data-state="closed"],
 45 | .DialogContent[data-state="closed"] {
 46 |   animation: fadeOut 300ms ease-in;
 47 | }
 48 | ```
 49 | 
 50 | ## Animating with Vue Transition
 51 | 
 52 | Other than using CSS animation, you might prefer to use the native Vue `<Transition>`. Great news! It should be as easy as wrapping component (that has `forceMount` prop), and you are done!
 53 | 
 54 | ```vue line=11,13,14,19,25-33
 55 | <script setup lang="ts">
 56 | import { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'reka-ui'
 57 | </script>
 58 | 
 59 | <template>
 60 |   <DialogRoot v-model:open="open">
 61 |     <DialogTrigger>
 62 |       Edit profile
 63 |     </DialogTrigger>
 64 |     <DialogPortal>
 65 |       <Transition name="fade">
 66 |         <DialogOverlay />
 67 |       </Transition>
 68 |       <Transition name="fade">
 69 |         <DialogContent>
 70 |           <h1>Hello from inside the Dialog!</h1>
 71 |           <DialogClose>Close</DialogClose>
 72 |         </DialogContent>
 73 |       </Transition>
 74 |     </DialogPortal>
 75 |   </DialogRoot>
 76 | </template>
 77 | 
 78 | <style>
 79 | .fade-enter-active,
 80 | .fade-leave-active {
 81 |   transition: opacity 0.3s ease;
 82 | }
 83 | 
 84 | .fade-enter-from,
 85 | .fade-leave-to {
 86 |   opacity: 0;
 87 | }
 88 | </style>
 89 | ```
 90 | 
 91 | ## ⭐️ Animating with Motion Vue
 92 | 
 93 | [Motion Vue](https://motion.dev/docs/vue) is the recommended animation library for Reka UI. This lightweight, powerful library integrates seamlessly with components and offers extensive flexibility for creating smooth, performant animations.
 94 | 
 95 | ```vue line=3,12,14-18,22-26,29,31
 96 | <script setup lang="ts">
 97 | import { AnimatePresence, Motion } from 'motion-v'
 98 | import { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'reka-ui'
 99 | </script>
100 | 
101 | <template>
102 |   <DialogRoot>
103 |     <DialogTrigger>
104 |       Edit profile
105 |     </DialogTrigger>
106 |     <DialogPortal>
107 |       <AnimatePresence multiple>
108 |         <DialogOverlay as-child>
109 |           <Motion
110 |             :initial="{ opacity: 0, scale: 0 }"
111 |             :animate="{ opacity: 1, scale: 1 }"
112 |             :exit="{ opacity: 0, scale: 0.6 }"
113 |           />
114 |         </DialogOverlay>
115 | 
116 |         <DialogContent as-child>
117 |           <Motion
118 |             :initial="{ opacity: 0, top: '0%' }"
119 |             :animate="{ opacity: 1, top: '50%' }"
120 |             :exit="{ opacity: 0, top: '30%' }"
121 |           >
122 |             <h1>Hello from inside the Dialog!</h1>
123 |             <DialogClose>Close</DialogClose>
124 |           </Motion>
125 |         </DialogContent>
126 |       </AnimatePresence>
127 |     </DialogPortal>
128 |   </DialogRoot>
129 | </template>
130 | ```
131 | 
132 | <Callout type="tip">
133 | 
134 | Check out this [Stackblitz Demo](https://stackblitz.com/edit/x7y44ngl?file=src%2FApp.vue) 🤩
135 | 
136 | </Callout>
137 | 
138 | ## Delegating unmounting for JavaScript Animation
139 | 
140 | When many stateful Primitives are hidden from view, they are actually removed from the DOM. JavaScript animation libraries need control of the unmounting phase, so we provide the `forceMount` prop on many components to allow consumers to delegate the mounting and unmounting of children based on the animation state determined by those libraries.
141 | 
142 | For example, if you want to use [@vueuse/motion](https://motion.vueuse.org/) to animate a `Dialog`, you would do so by conditionally rendering the dialog `Overlay` and `Content` parts based on the animation state from one of its composable like `useSpring`:
143 | 
144 | ```vue line=32,34,41
145 | <script setup lang="ts">
146 | import { useSpring } from '@vueuse/motion'
147 | import { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'reka-ui'
148 | import { reactive, ref, watch } from 'vue'
149 | 
150 | const stages = {
151 |   initial: { opacity: 0, scale: 0, top: 0, },
152 |   enter: { opacity: 1, scale: 1, top: 50, },
153 |   leave: { opacity: 0, scale: 0.6, top: 30, },
154 | }
155 | 
156 | const styles = reactive(stages.initial)
157 | const { set } = useSpring(styles, {
158 |   damping: 8,
159 |   stiffness: 200,
160 | })
161 | 
162 | const open = ref(false)
163 | watch(open, () => {
164 |   if (open.value)
165 |     set(stages.enter)
166 |   else
167 |     set(stages.leave)
168 | })
169 | </script>
170 | 
171 | <template>
172 |   <DialogRoot v-model:open="open">
173 |     <DialogTrigger>
174 |       Edit profile
175 |     </DialogTrigger>
176 |     <DialogPortal v-if="styles.opacity !== 0">
177 |       <DialogOverlay
178 |         force-mount
179 |         :style="{
180 |           opacity: styles.opacity,
181 |           transform: `scale(${styles.scale})`,
182 |         }"
183 |       />
184 |       <DialogContent
185 |         force-mount
186 |         :style="{
187 |           opacity: styles.opacity,
188 |           top: `${styles.top}%`,
189 |         }"
190 |       >
191 |         <h1>Hello from inside the Dialog!</h1>
192 |         <DialogClose>Close</DialogClose>
193 |       </DialogContent>
194 |     </DialogPortal>
195 |   </DialogRoot>
196 | </template>
197 | ```
198 | 
199 | <Callout type="tip">
200 | 
201 | Check out this [Stackblitz Demo](https://stackblitz.com/edit/macsaz-xuwbw3im?file=src%2FApp.vue)
202 | 
203 | </Callout>
204 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/composition.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Composition
 4 | description: Use the `asChild` prop to compose Reka's functionality onto alternative element types or your own Vue components.
 5 | ---
 6 | 
 7 | # Composition
 8 | 
 9 | <Description>
10 | 
11 | Use the `asChild` prop to compose Reka's functionality onto alternative
12 | element types or your own Vue components.
13 | 
14 | </Description>
15 | 
16 | All Reka UI parts that render a DOM element accept an `asChild` prop. When `asChild` is set to `true`, Reka UI will not render a default DOM element, instead passing the props and behavior required to make it functional to the first child of the slots.
17 | 
18 | ## Changing the element type
19 | 
20 | In the majority of cases you shouldn’t need to modify the element type as Reka has been designed to provide the most appropriate defaults. However, there are cases where it is helpful to do so.
21 | 
22 | A good example is with `TooltipTrigger`. By default this part is rendered as a `button`, though you may want to add a tooltip to a link (`a` tag) as well. Let's see how you can achieve this using `asChild`:
23 | 
24 | ```vue{7}
25 | <script setup lang="ts">
26 | import { TooltipRoot, TooltipTrigger, TooltipPortal } from "reka-ui";
27 | </script>
28 | 
29 | <template>
30 |   <TooltipRoot>
31 |     <TooltipTrigger asChild>
32 |       <a href="https://reka-ui.com/">Reka UI</a>
33 |     </TooltipTrigger>
34 |     <TooltipPortal>…</TooltipPortal>
35 |   </TooltipRoot>
36 | </template>
37 | ```
38 | 
39 | <Callout type="warning">
40 | 
41 | If you do decide to change the underlying element type, it is your responsibility to ensure it remains accessible and functional. In the case of `TooltipTrigger` for example, it must be a focusable element that can respond to pointer and keyboard events. If you were to switch it to a `div`, it would no longer be accessible.
42 | 
43 | </Callout>
44 | 
45 | In reality, you will rarely modify the underlying DOM element like we've seen above. Instead it's more common to use your own Vue components. This is especially true for most `Trigger` parts, as you usually want to compose the functionality with the custom buttons and links in your design system.
46 | 
47 | ## Composing with your own Vue components
48 | 
49 | This works exactly the same as above, you pass `asChild` to the part and then wrap your own component with it.
50 | However, there are a few gotchas to be aware of.
51 | 
52 | ## Composing multiple primitives
53 | 
54 | `asChild` can be used as deeply as you need to. This means it is a great way to compose multiple primitive's behavior together.
55 | Here is an example of how you can compose `TooltipTrigger` and `DialogTrigger` together with your own button:
56 | 
57 | ```vue{9,10}
58 | <script setup lang="ts">
59 | import { TooltipRoot, TooltipTrigger, TooltipPortal, DialogRoot, DialogTrigger, DialogPortal } from "reka-ui";
60 | import MyButton from from "@/components/MyButton.vue"
61 | </script>
62 | 
63 | <template>
64 |   <DialogRoot>
65 |     <TooltipRoot>
66 |       <TooltipTrigger asChild>
67 |         <DialogTrigger asChild>
68 |           <MyButton>Open dialog</MyButton>
69 |         </DialogTrigger>
70 |       </TooltipTrigger>
71 |       <TooltipPortal>…</TooltipPortal>
72 |     </TooltipRoot>
73 | 
74 |     <DialogPortal>...</DialogPortal>
75 |   </DialogRoot>
76 | </template>
77 | ```
78 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/controlled-state.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Controlled State
  3 | description: How to work with controlled vs. uncontrolled state in Reka UI.
  4 | ---
  5 | 
  6 | # Controlled State
  7 | 
  8 | <Description>
  9 | How to work with controlled vs. uncontrolled state in Reka UI.
 10 | </Description>
 11 | 
 12 | Reka UI provides flexible state management for components, allowing developers to use either **controlled** or **uncontrolled** state. Understanding when to use each approach ensures better integration with Vue's reactivity system.
 13 | 
 14 | ---
 15 | 
 16 | ## Controlled vs. Uncontrolled State
 17 | 
 18 | ### Controlled State
 19 | A **controlled** component receives its state as a prop and requires explicit updates via event listeners. The parent component manages and synchronizes the state.
 20 | 
 21 | #### Example: Controlled `SwitchRoot`
 22 | 
 23 | ```vue
 24 | <script setup>
 25 | import { SwitchRoot, SwitchThumb } from 'reka-ui'
 26 | import { ref } from 'vue'
 27 | 
 28 | const isActive = ref(false)
 29 | 
 30 | function handleUpdate(value) {
 31 |   isActive.value = value
 32 | }
 33 | </script>
 34 | 
 35 | <template>
 36 |   <SwitchRoot :model-value="isActive" @update:model-value="handleUpdate">
 37 |     <SwitchThumb />
 38 |   </SwitchRoot>
 39 | </template>
 40 | ```
 41 | 
 42 | **How it works:**
 43 | - The `SwitchRoot` component’s state is managed by the `isActive` ref.
 44 | - The `@update:modelValue` event ensures updates propagate correctly.
 45 | 
 46 | <Callout type="tip" title="Use controlled state when:">
 47 | 
 48 | - You need to sync state with Vuex, Pinia, or an API.
 49 | - Multiple components rely on the same state.
 50 | - You want fine-grained control over updates.
 51 | 
 52 | </Callout>
 53 | 
 54 | #### Using v-model with Controlled Components
 55 | 
 56 | Vue’s `v-model` syntax provides a convenient way to bind values to controlled components in Reka UI. It automatically handles passing the value and listening for updates.
 57 | 
 58 | Example: Using `v-model` with `SwitchRoot`
 59 | 
 60 | ```vue
 61 | <script setup>
 62 | import { SwitchRoot, SwitchThumb } from 'reka-ui'
 63 | import { ref } from 'vue'
 64 | 
 65 | const isActive = ref(false)
 66 | </script>
 67 | 
 68 | <template>
 69 |   <SwitchRoot v-model="isActive">
 70 |     <SwitchThumb />
 71 |   </SwitchRoot>
 72 | </template>
 73 | ```
 74 | 
 75 | ### Uncontrolled State
 76 | An **uncontrolled** component manages its own state internally, without requiring a parent-controlled prop. Instead of `modelValue`, Reka UI components use `defaultValue` to initialize state.
 77 | 
 78 | #### Example: Uncontrolled `SwitchRoot`
 79 | ```vue
 80 | <template>
 81 |   <SwitchRoot default-value="true">
 82 |     <SwitchThumb />
 83 |   </SwitchRoot>
 84 | </template>
 85 | ```
 86 | 
 87 | **How it works:**
 88 | - The `SwitchRoot` initializes its state with `defaultValue`.
 89 | - State changes occur internally without external control.
 90 | 
 91 | <Callout type="tip" title="Use uncontrolled state when:">
 92 | 
 93 | - The component does not need to sync with external logic.
 94 | - You want a simpler setup without explicit state management.
 95 | - The state is local and does not impact other components.
 96 | 
 97 | </Callout>
 98 | 
 99 | ## Common Mistakes & Fixes
100 | 
101 | ### 1. Forgetting `@update:modelValue`
102 | 
103 | ```vue
104 | <!-- ❌ Incorrect: -->
105 | <SwitchRoot :modelValue="isActive" />
106 | 
107 | <!-- ✅ Correct: -->
108 | <SwitchRoot :modelValue="isActive" @update:modelValue="(val) => isActive = val" />
109 | ```
110 | 
111 | ### 2. Using `modelValue` Instead of `defaultValue`
112 | 
113 | ```vue
114 | <!-- ❌ Incorrect: -->
115 | <SwitchRoot :modelValue="true" />
116 | 
117 | <!-- ✅ Correct: -->
118 | <SwitchRoot defaultValue="true" />
119 | ```
120 | 
121 | ### 3. Not Providing a Setter for Computed Props
122 | 
123 | ```ts
124 | // ❌ Incorrect:
125 | const isActive = computed(() => store.state.toggleState)
126 | 
127 | // ✅ Correct:
128 | const isActive = computed({
129 |   get: () => store.state.toggleState,
130 |   set: val => store.commit('setToggleState', val)
131 | })
132 | ```
133 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/dates.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Dates & Times
 3 | description: How to work with dates and times in Reka UI.
 4 | ---
 5 | 
 6 | # Dates & Times
 7 | 
 8 | <Description>
 9 | How to work with dates and times in Reka UI.
10 | </Description>
11 | 
12 | <Callout type="tip">
13 | 
14 | The inner-workings of our date-related components are heavily inspired by the research and work done
15 | by the [React Aria](https://react-spectrum.adobe.com/react-aria/) team at Adobe, who have created
16 | robust date components that excel in terms of accessibility, user experience, and flexibility.
17 | 
18 | </Callout>
19 | 
20 | The component depends on the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html) package, which solves a lot of the problems that come with working with dates and times in JavaScript.
21 | 
22 | We highly recommend reading through the documentation for the package to get a solid feel for how it
23 | works, and you'll need to install it in your project to use the date-related components.
24 | 
25 | <InstallationTabs value="@internationalized/date" />
26 | 
27 | ## Date Objects
28 | 
29 | We use the `DateValue` objects provided by `@internationalized/date` to
30 | represent dates in the various components. These objects are immutable, and provide information about
31 | the type of date they represent:
32 | 
33 | - `CalendarDate`: A date with no time component, such as `2023-10-11`.
34 | - `CalendarDateTime`: A date with a time component, but without a timezone, such as
35 |   `2023-10-11T12:30:00`.
36 | - `ZonedDateTime`: A date with a time component and a timezone, such as
37 |   `2023-10-11T21:00:00:00-04:00[America/New_York]`.
38 | 
39 | The benefit of using these objects is that we can be very specific about the type of date we want,
40 | and the behavior of the builder will adapt to that type.
41 | 
42 | Additionally, you don't have to worry about wrangling timezones, daylight savings time, or any other
43 | date-related nuance.
44 | 
45 | ## Utility Functions
46 | 
47 | This package also provides a number of utility functions which solves a lot of the problems that come with working with dates and times in JavaScript.
48 | 
49 | Specially designed to work well with [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/index.html).
50 | 
51 | ### How to use?
52 | 
53 | ```ts
54 | import type { DateValue } from '@internationalized/date'
55 | import { CalendarDate } from '@internationalized/date'
56 | 
57 | import {
58 |   createDateRange,
59 |   createDecade,
60 |   createMonth,
61 |   createYear,
62 |   createYearRange,
63 |   getDaysInMonth,
64 |   hasTime,
65 |   isAfter,
66 |   isAfterOrSame,
67 |   isBefore,
68 |   isBeforeOrSame,
69 |   isBetween,
70 |   isBetweenInclusive,
71 |   isCalendarDateTime,
72 |   isZonedDateTime,
73 |   parseStringToDateValue,
74 |   toDate,
75 | } from 'reka-ui/date'
76 | 
77 | const date = new CalendarDate(1995, 8, 18)
78 | const minDate = new CalendarDate(1995, 8, 1)
79 | const maxDate = new CalendarDate(1995, 8, 31)
80 | 
81 | parseStringToDateValue('1995-08-18', date) // returns a DateValue object
82 | toDate(date) // returns a Date object
83 | isCalendarDateTime(date) // returns false
84 | isZonedDateTime(date) // returns false
85 | hasTime(date) // returns false
86 | getDaysInMonth(date) // returns 31
87 | isAfter(date, minDate) // returns true
88 | isBeforeOrSame(date, maxDate) // returns true
89 | isAfterOrSame(date, minDate) // returns true
90 | isBefore(date, maxDate) // returns true
91 | isBetweenInclusive(date, minDate, maxDate) // returns true
92 | isBetween(date, minDate, maxDate) // returns true
93 | createMonth({ dateObj: new CalendarDate(1995, 8, 18), weekStartsOn: 0, locale: 'en', fixedWeeks: true }) // returns a grid of days as DateValue for the month, also containing the dateObj, plus an array of days for the month
94 | createYear({ dateObj: new CalendarDate(1995, 8, 18), numberOfMonths: 2, pagedNavigation: true }) // returns an array of months as DateValue, centered around the dateObj taking into account the numberOfMonths and pagedNavigation when returning the months
95 | createDecade({ dateObj: new CalendarDate(1995, 8, 18), startIndex: -10, endIndex: 10 }) // returns a decade centered around the dateObj
96 | createDateRange({ start: new CalendarDate(1995, 8, 18), end: new CalendarDate(2005, 8, 18) }) // returns an array of dates as DateValue between the start and end date
97 | createYearRange({ start: new CalendarDate(1995, 8, 18), end: new CalendarDate(2005, 8, 18) }) // returns an array of years as DateValue between the start and end date
98 | ```
99 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/i18n.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Internationalization (RTL)
  3 | description: Reka UI support both LTR/RTL directions. Learn more about how to integrate internationalization.
  4 | ---
  5 | 
  6 | # Internationalization & RTL
  7 | 
  8 | <Description>
  9 | Reka UI support both LTR/RTL directions. Learn more about how to integrate internationalization.
 10 | </Description>
 11 | 
 12 | ## Multi-Direction Support
 13 | 
 14 | ### Introduction
 15 | 
 16 | This documentation provides guidance on how to utilize multi-directional support in Reka UI with SSR support. Reka UI rely on [`Floating UI`](https://floating-ui.com/) to position floating elements, which requires to be fed the current direction of the web app.
 17 | 
 18 | Reka components are LTR by default, but you are in control of what direction (only LTR, RTL, or both) you want to support. This section provides best practices to easily support RTL direction.
 19 | 
 20 | ### RTL
 21 | 
 22 | [`ConfigProvider`](/docs/utilities/config-provider) is a wrapper component to provide global configurations, including the directionality of the web app.
 23 | 
 24 | When creating localized apps that require right-to-left (RTL) reading direction, you need to wrap your application with the `ConfigProvider` component to ensure all of the primitives adjust their behavior based on the `dir` prop.
 25 | 
 26 | To make all Reka UI RTL, wrap your entire App in `ConfigProvider` and pass the `dir` prop with the value `rtl`.
 27 | 
 28 | Add the following code to your `app.vue` or main layout component:
 29 | 
 30 | ```vue
 31 | <script setup lang="ts">
 32 | import { ConfigProvider } from 'reka-ui'
 33 | </script>
 34 | 
 35 | <template>
 36 |   <ConfigProvider dir="rtl">
 37 |     <slot />
 38 |   </ConfigProvider>
 39 | </template>
 40 | ```
 41 | 
 42 | All Reka components that are wrapped in the provider inherit the `dir` attribute.
 43 | 
 44 | ### Dynamic Direction
 45 | 
 46 | To dynamically change the direction of Reka UI, we could leverage the [`useTextDirection`](https://vueuse.org/core/useTextDirection/) composable and combine it with our `ConfigProvider`.
 47 | 
 48 | But first, we need to install the [`@vueuse/core`](https://vueuse.org/) package.
 49 | 
 50 | <InstallationTabs value="@vueuse/core" />
 51 | 
 52 | Then in your root Vue file:
 53 | 
 54 | ```vue
 55 | <script setup lang="ts">
 56 | import { useTextDirection } from '@vueuse/core'
 57 | import { ConfigProvider } from 'reka-ui'
 58 | import { computed } from 'vue'
 59 | 
 60 | const textDirection = useTextDirection()
 61 | const dir = computed(() => textDirection.value === 'rtl' ? 'rtl' : 'ltr')
 62 | </script>
 63 | 
 64 | <template>
 65 |   <ConfigProvider :dir="dir">
 66 |     <slot />
 67 |   </ConfigProvider>
 68 | </template>
 69 | ```
 70 | 
 71 | To support SSR - when the server has no access to the `html` and its direction, set `initialValue` in `useTextDirection`.
 72 | 
 73 | ```vue{5}
 74 | <script setup lang="ts">
 75 | import { ConfigProvider } from 'reka-ui'
 76 | import { useTextDirection } from '@vueuse/core'
 77 | 
 78 | const textDirection = useTextDirection({ initialValue: 'rtl' })
 79 | const dir = computed(() => textDirection.value === 'rtl' ? 'rtl' : 'ltr')
 80 | </script>
 81 | 
 82 | <template>
 83 |   <ConfigProvider :dir="dir">
 84 |     <slot />
 85 |   </ConfigProvider>
 86 | </template>
 87 | ```
 88 | 
 89 | <Callout type="info">
 90 | 
 91 | The `dir` prop doesn't support `auto` as a value, so we need an intermediate Ref to explicitly define the direction.
 92 | 
 93 | </Callout>
 94 | 
 95 | `textDirection` is a [`Ref`](https://vuejs.org/api/reactivity-core.html#ref), and by changing the value of it to either "ltr" or "rtl", the `dir` attribute on the `html` tag changes as well.
 96 | 
 97 | ## Internationalization
 98 | 
 99 | Some languages are written from LTR and others are written in RTL. In a multi-language web app, you need to configure directionality alongside the translations. This is a simplified guide on how to achieve that using `reka-ui` primitives.
100 | 
101 | But first, let's install some required packages.
102 | 
103 | ### Dependencies
104 | 
105 | We rely on [`VueI18n`](https://vue-i18n.intlify.dev/) to manage different translations we want to support.
106 | 
107 | <InstallationTabs value="vue-i18n@latest" />
108 | 
109 | Go ahead and add some translations for the word "hello" in different languages at `main.ts`.
110 | 
111 | ```ts{4-26,29}
112 | import { createApp } from 'vue'
113 | import './style.css'
114 | import App from './App.vue'
115 | import { createI18n } from 'vue-i18n'
116 | 
117 | const messages = {
118 |   en: {
119 |     hello: 'Hello',
120 |   },
121 |   fa: {
122 |     hello: 'درود',
123 |   },
124 |   ar: {
125 |     hello: 'مرحبا',
126 |   },
127 |   ja: {
128 |     hello: 'こんにちは',
129 |   }
130 | }
131 | 
132 | const i18n = createI18n({
133 |   legacy: false, // you must set `false` to use the Composition API
134 |   locale: 'en', // set default locale
135 |   availableLocales: ['en', 'fa', 'ar', 'ja'],
136 |   messages,
137 | })
138 | 
139 | createApp(App)
140 |   .use(i18n)
141 |   .mount('#app')
142 | ```
143 | 
144 | ### Language Selector
145 | 
146 | After setting the translations and adding the `vue-i18n` plugin, we need a language selector in your `app.vue`. By changing the language using this `reka-ui` select primitive:
147 | 1. The translations are reactive to the new language
148 | 2. The direction of the web app is reactive to the new language
149 | 
150 | ```vue
151 | <script setup lang="ts">
152 | import { useTextDirection } from '@vueuse/core'
153 | import { ConfigProvider, SelectContent, SelectGroup, SelectItem, SelectItemIndicator, SelectItemText, SelectLabel, SelectPortal, SelectRoot, SelectScrollDownButton, SelectScrollUpButton, SelectTrigger, SelectValue, SelectViewport, } from 'reka-ui'
154 | 
155 | import { ref } from 'vue'
156 | import { useI18n } from 'vue-i18n'
157 | 
158 | type LanguageInfo = {
159 |   label: string
160 |   value: string
161 |   dir: 'ltr' | 'rtl'
162 | }
163 | 
164 | const dir = useTextDirection({ initialValue: 'ltr' })
165 | const { locale } = useI18n()
166 | 
167 | const selectedLanguage = ref<string>()
168 | 
169 | const languages: LanguageInfo[] = [
170 |   { label: 'English', value: 'en', dir: 'ltr' },
171 |   { label: 'Persian', value: 'fa', dir: 'rtl' },
172 |   { label: 'Arabic', value: 'ar', dir: 'rtl' },
173 |   { label: 'Japanese', value: 'ja', dir: 'ltr' },
174 | ]
175 | 
176 | function selectLanguage(newLanguage: string) {
177 |   const langInfo = languages.find(item => item.value === newLanguage)
178 | 
179 |   if (!langInfo)
180 |     return
181 | 
182 |   dir.value = langInfo.dir
183 |   locale.value = langInfo.value
184 | }
185 | </script>
186 | 
187 | <template>
188 |   <ConfigProvider :dir="dir">
189 |     <div class="flex flex-col max-w-[1400px] mx-auto gap-y-[8rem] justify-center items-center p-10">
190 |       <div class="text-2xl">
191 |         👋 {{ $t("hello") }}
192 |       </div>
193 |       <div class="text-2xl">
194 |         HTML is in <span class="text-bold text-purple-500">{{ dir }}</span> mode
195 |       </div>
196 | 
197 |       <SelectRoot
198 |         v-model="selectedLanguage"
199 |         @update:model-value="selectLanguage"
200 |       >
201 |         <SelectTrigger
202 |           class="inline-flex min-w-[160px] items-center justify-between rounded px-[15px] text-[13px] leading-none h-[35px] gap-[5px] bg-white text-grass11 shadow-[0_2px_10px] shadow-black/10 hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black data-[placeholder]:text-green9 outline-none"
203 |           aria-label="Customize options"
204 |         >
205 |           <SelectValue placeholder="Select a language..." />
206 |           <Icon
207 |             icon="radix-icons:chevron-down"
208 |             class="h-3.5 w-3.5"
209 |           />
210 |         </SelectTrigger>
211 | 
212 |         <SelectPortal>
213 |           <SelectContent
214 |             class="min-w-[160px] bg-white rounded shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade z-[100]"
215 |             :side-offset="5"
216 |           >
217 |             <SelectScrollUpButton
218 |               class="flex items-center justify-center h-[25px] bg-white text-violet11 cursor-default"
219 |             >
220 |               <Icon icon="radix-icons:chevron-up" />
221 |             </SelectScrollUpButton>
222 | 
223 |             <SelectViewport class="p-[5px]">
224 |               <SelectLabel class="px-[25px] text-xs leading-[25px] text-mauve11">
225 |                 Languages
226 |               </SelectLabel>
227 |               <SelectGroup>
228 |                 <SelectItem
229 |                   v-for="(option, index) in languages"
230 |                   :key="index"
231 |                   class="text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1"
232 |                   :value="option.value"
233 |                 >
234 |                   <SelectItemIndicator class="absolute left-0 w-[25px] inline-flex items-center justify-center">
235 |                     <Icon icon="radix-icons:check" />
236 |                   </SelectItemIndicator>
237 |                   <SelectItemText>
238 |                     {{ option.label }}
239 |                   </SelectItemText>
240 |                 </SelectItem>
241 |               </SelectGroup>
242 |             </SelectViewport>
243 | 
244 |             <SelectScrollDownButton
245 |               class="flex items-center justify-center h-[25px] bg-white text-violet11 cursor-default"
246 |             >
247 |               <Icon icon="radix-icons:chevron-down" />
248 |             </SelectScrollDownButton>
249 |           </SelectContent>
250 |         </SelectPortal>
251 |       </SelectRoot>
252 |     </div>
253 |   </ConfigProvider>
254 | </template>
255 | ```
256 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/inject-context.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Inject Context
 3 | description: Utilize `injectContext` to enhances component composition in Reka UI, enabling powerful and flexible UI development.
 4 | ---
 5 | 
 6 | # Inject Context
 7 | 
 8 | <Description>
 9 | 
10 | Utilize `injectContext` to enhances component composition in Reka UI, enabling powerful and flexible UI development.
11 | 
12 | </Description>
13 | 
14 | <Callout type="warning" title="Use with caution! API might change">
15 | 
16 | Reka UI exposes internal `injectContext` to further extend the ability to compose and construct complex components. However, this API was primarily designed to be internal use. Thus the API might change without notice.
17 | 
18 | </Callout>
19 | 
20 | ## Introduction to `injectContext`
21 | 
22 | In Reka UI, all root component, and some other component exports an `injectContext` function, which is a key feature for managing component state and enabling seamless composition. This guide will show you how to craft your own child component based on the provided context.
23 | 
24 | ## What is `injectContext`?
25 | 
26 | `injectContext` is a function provided by each Reka UI component that allows you to access the internal state and methods of that component.
27 | 
28 | It leverages Vue's [Provide / Inject](https://vuejs.org/guide/components/provide-inject) to provide a powerful way of extending and customizing component behavior.
29 | 
30 | ## Basic Usage
31 | 
32 | Here's a simple example of how to use `injectContext` with a Reka UI Accordion component:
33 | 
34 | ```vue
35 | <!-- CustomAccordionContent.vue -->
36 | <script setup>
37 | import { injectAccordionItemContext, injectAccordionRootContext } from 'reka-ui'
38 | 
39 | const accordionRootContext = injectAccordionRootContext()
40 | const accordionItemContext = injectAccordionItemContext()
41 | 
42 | const isSingleOpen = computed(() =>
43 |   accordionRootContext.isSingle.value && accordionItemContext.open.value
44 | )
45 | </script>
46 | 
47 | <template>
48 |   <div>
49 |     …
50 |   </div>
51 | </template>
52 | ```
53 | 
54 | ## Common Use Cases
55 | 
56 | 1. **Custom Styling**: Access internal state to apply dynamic styles based on component state.
57 | 2. **Extended Functionality**: Build upon existing component logic to add new features.
58 | 3. **Complex Layouts**: Create intricate UI patterns by composing multiple components and sharing state between them.
59 | 4. **Accessibility Enhancements**: Utilize internal methods and state to improve keyboard navigation or screen reader support.
60 | 
61 | ## Best Practices
62 | 
63 | 1. Use `injectContext` in child components or composables, not in the component itself.
64 | 2. Always check if the injected context exists before using it, as it may be `undefined` if used outside the component's scope.
65 | 3. Prefer using provided props and events when possible, and use `injectContext` for more advanced scenarios.
66 | 4. When using TypeScript, leverage the type information provided by `injectContext` for better code quality.
67 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/migration.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Migration - Radix Vue to Reka UI
  3 | description: This guide provides step-by-step instructions for developers transitioning their projects from Radix Vue to Reka UI.
  4 | ---
  5 | 
  6 | # Migration - Radix Vue to Reka UI
  7 | 
  8 | <Description>
  9 | This guide provides step-by-step instructions for developers transitioning their projects from Radix Vue to Reka UI.
 10 | </Description>
 11 | 
 12 | ## Installation
 13 | 
 14 | First and foremost, you need to install the latest `reka-ui`.
 15 | 
 16 | <InstallationTabs value="reka-ui" />
 17 | 
 18 | Congratulation! 🎉 Now that you've installed the above package, let's perform the migration! The first 2 steps are relatively simple. Just do a global search and replace for the following changes.
 19 | 
 20 | ## Import Statement Changes
 21 | 
 22 | The primary change in imports is replacing `radix-vue` with `reka-ui`.
 23 | 
 24 | ```vue
 25 | <script setup lang="ts">
 26 | import { TooltipPortal, TooltipRoot, TooltipTrigger } from 'radix-vue' // [!code --]
 27 | import { TooltipPortal, TooltipRoot, TooltipTrigger } from 'reka-ui' // [!code ++]
 28 | </script>
 29 | ```
 30 | 
 31 | ## Naming Convention Changes
 32 | 
 33 | CSS variable and data attributes names have been updated to use the `reka` prefix instead of `radix`.
 34 | 
 35 | ```css
 36 |   --radix-accordion-content-width: 300px; /* [!code --] */
 37 |   --reka-accordion-content-width: 300px; /* [!code ++] */
 38 | 
 39 |   [data-radix-collection-item] {} /* [!code --] */
 40 |   [data-reka-collection-item] {} /* [!code ++] */
 41 | ```
 42 | 
 43 | ## Component Breaking Changes
 44 | 
 45 | ### Combobox
 46 | 
 47 | - [Remove `filter-function` props](https://github.com/unovue/reka-ui/commit/ee8a3f2366a5c27c2bf1cc0a1ecbb0fea559a9f7) - `Combobox` has been refactored and improved to support better custom filtering. Read more.
 48 | 
 49 |   ```vue
 50 |   <template>
 51 |     <ComboboxRoot :filter-function="customFilter" />  <!-- [!code --] -->
 52 |   </template>
 53 |   ```
 54 | 
 55 | - [Replace `searchTerm` props of Root to Input's `v-model`](https://github.com/unovue/reka-ui/commit/e1bab6598c3533dfbf6a86ad26b471ab826df069#diff-833593a5ce28a8c3fabc7d77462b116405e25df2b93bcab449798b5799e73474)
 56 | - [Move `displayValue` props from Root to Input](https://github.com/unovue/reka-ui/commit/e1bab6598c3533dfbf6a86ad26b471ab826df069#diff-833593a5ce28a8c3fabc7d77462b116405e25df2b93bcab449798b5799e73474)
 57 | 
 58 |   ```vue
 59 |   <template>
 60 |     <ComboboxRoot v-model:search-term="search" :display-value="(v) => v.name" /> <!-- [!code --] -->
 61 |     <ComboboxRoot>
 62 |       <ComboboxInput v-model="search" :display-value="(v) => v.name" /> <!-- [!code ++] -->
 63 |     </ComboboxRoot>
 64 |   </template>
 65 |   ```
 66 | 
 67 | ### Arrow
 68 | 
 69 | - [Improve arrow polygon](https://github.com/unovue/reka-ui/commit/ac8f3c34760f4c9c0f952ecd027b32951b9c416c) - Change the svg polygon to allow better styling.
 70 | 
 71 | ### Form component
 72 | 
 73 | - [Rename controlled state to `v-model`](https://github.com/unovue/reka-ui/commit/87aa5ba6016fa7a98f02ea43062212906b2633a0) - Replace `v-model:checked`, `v-model:pressed` with more familiar API for form component.
 74 | 
 75 | ```vue
 76 | <template>
 77 |   <CheckboxRoot v-model:checked="value" /> <!-- [!code --] -->
 78 |   <CheckboxRoot v-model="value" /> <!-- [!code ++] -->
 79 | </template>
 80 | ```
 81 | 
 82 | - [Reposition `VisuallyHidden`](https://github.com/unovue/reka-ui/commit/107389a9c230d2c94232887b9cbe2710222564aa) - Previously, `VisuallyHidden` were positioned at the root node, causing style scoped to not be applied.
 83 | 
 84 | ### Menu CheckboxItem
 85 | 
 86 | - Similar to the changes in form component, the API for binding `CheckboxItem` has been changed from `v-model:checked` to `v-model`.
 87 | 
 88 | ```vue
 89 | <template>
 90 |   <DropdownMenuCheckboxItem v-model:checked="value" /> <!-- [!code --] -->
 91 |   <DropdownMenuCheckboxItem v-model="value" /> <!-- [!code ++] -->
 92 | 
 93 |   <DropdownMenuCheckboxItem checked /> <!-- [!code --] -->
 94 |   <DropdownMenuCheckboxItem :model-value="true" /> <!-- [!code ++] -->
 95 | </template>
 96 | ```
 97 | 
 98 | ### Pagination
 99 | 
100 | - [Required `itemsPerPage` prop](https://github.com/unovue/reka-ui/commit/37bba0c26a3cbe7e7e3e4ac36770be3ef5224f0c) - Instead of default `itemsPerPage` value, now it is required as to provide a more explicit hint about the page size.
101 | 
102 |   ```vue
103 |   <template>
104 |     <PaginationRoot :items-per-page="10" />  <!-- [!code ++] -->
105 |   </template>
106 |   ```
107 | 
108 | ### Calendar
109 | 
110 | - [Remove deprecated step prop](https://github.com/unovue/reka-ui/commit/ec146dd8fa0f95f64baf0b29c3424ee31cfb9666) - Use `prevPage/nextPage` props for greater control.
111 | 
112 |   ```vue
113 |   <script setup lang="ts">
114 |   function pagingFunc(date: DateValue, sign: -1 | 1) { // [!code ++]
115 |     if (sign === -1) // [!code ++]
116 |       return date.subtract({ years: 1 }) // [!code ++]
117 |     return date.add({ years: 1 }) // [!code ++]
118 |   } // [!code ++]
119 |   </script>
120 | 
121 |   <template>
122 |     <CalendarPrev step="year" /> <!-- [!code --] -->
123 |     <CalendarPrev :prev-page="(date: DateValue) => pagingFunc(date, -1)" /> <!-- [!code ++] -->
124 | 
125 |     <CalendarNext step="year" /> <!-- [!code --] -->
126 |     <CalendarNext :next-page="(date: DateValue) => pagingFunc(date, 1)" /> <!-- [!code ++] -->
127 |   </template>
128 |   ```
129 | 
130 | ### Select
131 | 
132 | - [`SelectValue` no longer render teleported element](https://github.com/unovue/reka-ui/commit/6a623484d610cc3b7c1a23a77c253c8e95cef518) - Previous implementation of `SelectValue` will render the selected `SelectItem` via teleporting fragment. This causes SSR flickering, and it is unnecessarily computation.
133 | 
134 |   ```vue
135 |   <template>
136 |     <SelectValue>
137 |       <!-- render the content similar to `SelectItem` --> <!-- [!code ++] -->
138 |     </SelectValue>
139 |   </template>
140 |   ```
141 | 
142 | ### Presence
143 | 
144 | To have better supports for SSR content, we also modify the logic around the usage of `forceMount` for component that utilize Presence:
145 | 
146 | - `Accordion`
147 | - `Collapsible`
148 | - `Tabs`
149 | - `NavigationMenu`
150 | 
151 | [`forceMount` will now render the component](https://github.com/unovue/reka-ui/commit/6f7f29abe79ac6c3ace117a398b6f7613ab6d2bc) eventhough the state is inactive. You are now required to handle the visibility logic of the component manually.
152 | 
153 | ```vue
154 | <template>
155 |   <TabsRoot
156 |     v-slot="{ modelValue }"
157 |     default-value="tab1"
158 |   >
159 |     <TabsContent
160 |       value="tab1"
161 |       force-mount
162 |       :hidden="modelValue !== 'tab1'"
163 |     >
164 |       …
165 |     </TabsContent>
166 |     <TabsContent
167 |       value="tab2"
168 |       force-mount
169 |       :hidden="modelValue !== 'tab2'"
170 |     >
171 |       …
172 |     </TabsContent>
173 |   </TabsRoot>
174 | </template>
175 | ```
176 | 
177 | ## For Nuxt module users
178 | 
179 | If you are using Nuxt, you need to update your module import.
180 | 
181 | <!-- eslint-skip -->
182 |  ```ts
183 |  // nuxt.config.ts
184 | export default defineNuxtConfig({
185 |   modules: [
186 |     'radix-vue/nuxt' <!-- [!code --] -->
187 |     'reka-ui/nuxt' <!-- [!code ++] -->
188 |   ],
189 | })
190 |  ```
191 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/namespaced-components.md:
--------------------------------------------------------------------------------
 1 | # Namespaced components
 2 | 
 3 | Reka UI design pattern is to create primitives for each component, and allow user to construct or [compose](./composition) components however they want.
 4 | 
 5 | However, importing all the necessary components 1-by-1 can be quite an effort, and the user might sometimes accidentally leave out an important component.
 6 | 
 7 | ## How to use?
 8 | 
 9 | First, you need to import the namespaced components via `reka-ui/namespaced` in your Vue component.
10 | 
11 | ```vue line=2
12 | <script setup lang="ts">
13 | import { Dialog, DropdownMenu } from 'reka-ui/namespaced'
14 | </script>
15 | ```
16 | 
17 | Then, you can use all the relevant components within the namespace.
18 | 
19 | ```vue line=6-17
20 | <script setup lang="ts">
21 | import { Dialog } from 'reka-ui/namespaced'
22 | </script>
23 | 
24 | <template>
25 |   <Dialog.Root>
26 |     <Dialog.Trigger>
27 |       Trigger
28 |     </Dialog.Trigger>
29 |   </Dialog.Root>
30 | 
31 |   <Dialog.Portal>
32 |     <Dialog.Overlay />
33 |     <Dialog.Content>
34 |       …
35 |     </Dialog.Content>
36 |   </Dialog.Portal>
37 | </template>
38 | ```
39 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/server-side-rendering.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Server side rendering
 3 | description: Reka UI can be rendered on the server.
 4 | ---
 5 | 
 6 | # Server side rendering
 7 | 
 8 | <Description>
 9 | Reka UI can be rendered on the server.
10 | </Description>
11 | 
12 | ## Overview
13 | 
14 | Server side rendering or `SSR`, is a technique used to render components to HTML on the server, as opposed to rendering them only on the client.
15 | 
16 | Static rendering is another similar approach. Instead it pre-renders pages to HTML at build time rather than on each request.
17 | 
18 | You should be able to use all of our primitives with both approaches, for example with [Nuxt.js](https://nuxt.com/).
19 | 
20 | ## Nuxt Hydration issue (Vue < 3.5)
21 | 
22 | Reka UI offers a [Nuxt module](/docs/overview/installation.html#nuxt-modules) that supports auto importing components. However, if you are using Vue < 3.5, minor hydration issues might arise because as of vue <= 3.4 there is [currently no way](https://github.com/vuejs/rfcs/discussions/557) to ensure consistent DOM element `id` between the client and server renders. This is something that Reka UI relies on.
23 | 
24 | As a temporary workaround, we expose a way to allow Nuxt (with version > `3.10`) inject it's `useId` implementation to `reka-ui`.
25 | 
26 | To provide a custom `useId` implementation, please follow this [guide](/docs/utilities/config-provider.html#hydration-issue-vue-3-5).
27 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/styling.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Styling
  4 | description: Reka UI are unstyled—and compatible with any styling solution—giving you complete control over styling.
  5 | ---
  6 | 
  7 | # Styling
  8 | 
  9 | <Description>
 10 | Reka UI are unstyled and compatible with any styling solution giving you complete control over styling.
 11 | </Description>
 12 | 
 13 | ## Styling overview
 14 | 
 15 | ### Functional styles
 16 | 
 17 | You are in control of all aspects of styling, including functional styles. For example, by default, a [Dialog Overlay](../components/dialog) won't cover the entire viewport. You're responsible for adding those styles, plus any presentation styles.
 18 | 
 19 | ### Classes
 20 | 
 21 | All components accept `class` attributes, just like normal component. This class will be passed through to the DOM element. You can use it in CSS as expected.
 22 | 
 23 | #### Teleported elements
 24 | 
 25 | Some elements, such as modals or popovers, are teleported to the `body`. When using scoped style to apply CSS, you will need to use [deep selectors](https://vuejs.org/api/sfc-css-features.html#deep-selectors) to target them.
 26 | 
 27 | ### Data attributes
 28 | 
 29 | When components are stateful, their state will be exposed in a `data-state` attribute. For example, when an [Accordion Item](../components/accordion) is opened, it includes a `data-state="open"` attribute.
 30 | 
 31 | ## Styling with CSS
 32 | 
 33 | ### Styling a part
 34 | 
 35 | You can style a component part by targeting the `class` that you provide.
 36 | 
 37 | ```vue{7}
 38 | <script setup lang="ts">
 39 | import { AccordionRoot, AccordionItem, ... } from "reka-ui";
 40 | </script>
 41 | 
 42 | <template>
 43 |   <AccordionRoot>
 44 |     <AccordionItem class="AccordionItem" value="item-1" />
 45 |     <!-- ... -->
 46 |   </AccordionRoot>
 47 | </template>
 48 | 
 49 | <style>
 50 | .AccordionItem {
 51 |   /* ... */
 52 | }
 53 | </style>
 54 | ```
 55 | 
 56 | ### Styling a state
 57 | 
 58 | You can style a component state by targeting its `data-state` attribute.
 59 | 
 60 | ```css
 61 | .AccordionItem {
 62 |   border-bottom: 1px solid gainsboro;
 63 | }
 64 | 
 65 | .AccordionItem[data-state="open"] {
 66 |   border-bottom-width: 2px;
 67 | }
 68 | ```
 69 | 
 70 | ### Scoped style
 71 | 
 72 | You can style a component using scoped style. Be wary of teleported elements, as they require the use of [deep selectors](https://vuejs.org/api/sfc-css-features.html#deep-selectors) to be targeted.
 73 | 
 74 | ```vue{9}
 75 | <script setup lang="ts">
 76 | import { DropdownMenuRoot, DropdownMenuItem, ... } from "reka-ui";
 77 | </script>
 78 | 
 79 | <template>
 80 |   <DropdownMenuRoot>
 81 |     <!-- ... -->
 82 |     <DropdownMenuPortal>
 83 |       <DropdownMenuContent class="DropdownMenuContent">
 84 |         <DropdownMenuItem class="DropdownMenuItem">An item</DropdownMenuItem>
 85 |       </DropdownMenuContent>
 86 |     </DropdownMenuPortal>
 87 |   </DropdownMenuRoot>
 88 | </template>
 89 | 
 90 | <style scoped>
 91 | :deep(.DropdownMenuContent) {
 92 |   /* ... */
 93 | }
 94 | 
 95 | .DropdownMenuItem {
 96 |   /* ... */
 97 | }
 98 | </style>
 99 | ```
100 | 
101 | ## Styling with Tailwind CSS
102 | 
103 | The examples below are using [Tailwind CSS](https://tailwindcss.com/), but you can use any library of your choice.
104 | 
105 | ### Styling a part
106 | 
107 | You can style a component part by targeting the `class`.
108 | 
109 | ```vue{7}
110 | <script setup lang="ts">
111 | import { AccordionRoot, AccordionItem, ... } from "reka-ui";
112 | </script>
113 | 
114 | <template>
115 |   <AccordionRoot>
116 |     <AccordionItem class="border border-gray-400 rounded-2xl" value="item-1" />
117 |     <!-- ... -->
118 |   </AccordionRoot>
119 | </template>
120 | ```
121 | 
122 | ### Styling a state
123 | 
124 | With Tailwind CSS's powerful variant selector, you can style a component state by targeting its `data-state` attribute.
125 | 
126 | ```vue{10}
127 | <script setup lang="ts">
128 | import { AccordionRoot, AccordionItem, ... } from "reka-ui";
129 | </script>
130 | 
131 | <template>
132 |   <AccordionRoot>
133 |     <AccordionItem
134 |       class="
135 |         border border-gray-400 rounded-2xl
136 |         data-[state=open]:border-b-2 data-[state=open]:border-gray-800
137 |       "
138 |       value="item-1"
139 |     />
140 |     <!-- ... -->
141 |   </AccordionRoot>
142 | </template>
143 | ```
144 | 
145 | ## Extending a primitive
146 | 
147 | Extending a primitive is done the same way you extend any Vue component.
148 | 
149 | ```vue[CustomAccordion.vue]
150 | <script setup lang="ts">
151 | import { AccordionItem, type AccordionItemProps } from "reka-ui";
152 | 
153 | interface Props extends AccordionItemProps {
154 |   foo: string;
155 | }
156 | 
157 | defineProps<Props>();
158 | </script>
159 | 
160 | <template>
161 |   <AccordionItem v-bind="$props"><slot /></AccordionItem>
162 | </template>
163 | ```
164 | 
165 | ## Summary
166 | 
167 | Reka UI were designed to encapsulate accessibility concerns and other complex functionalities, while ensuring you retain complete control over styling.
168 | 
169 | For convenience, stateful components include a `data-state` attribute.
170 | 


--------------------------------------------------------------------------------
/docs/content/docs/guides/virtualization.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Virtualization
  3 | description: Learn how to efficiently render large datasets with Reka UI, powered by `@tanstack/virtual`.
  4 | ---
  5 | 
  6 | # Virtualization
  7 | 
  8 | <Description>
  9 | 
 10 | Learn how to efficiently render large datasets with Reka UI, powered by `@tanstack/virtual`.
 11 | 
 12 | </Description>
 13 | 
 14 | <Callout type="info" title="What is Virtualization?">
 15 | 
 16 | Virtualization is a technique used to efficiently render large lists or tree structures by only rendering the items currently visible in the viewport. This approach significantly improves performance and reduces memory usage, especially when dealing with thousands of items.
 17 | 
 18 | </Callout>
 19 | 
 20 | ## Benefits of Using Virtualization
 21 | 
 22 | <Highlights
 23 |   :features="[
 24 |     'Improved Performance: Render thousands of items without lag',
 25 |     'Reduced Memory Usage: Only mount DOM nodes for visible items',
 26 |     'Better User Experience: Fast initial load times and responsive interactions',
 27 |   ]"
 28 | />
 29 | 
 30 | ## Customization Options
 31 | 
 32 | All virtualizer ([Combobox](/docs/components/combobox#virtualizer), [Listbox](/docs/components/listbox#virtualizer), and [Tree](/docs/components/tree#virtualizer)) components offer the following props and customization:
 33 | 
 34 | - Custom item rendering: Flexibility to render complex item structures
 35 | - `estimateSize`: Set estimate item heights for static or dynamic item
 36 | - `overscan`: Control the number of items rendered outside the visible area
 37 | - `textContent`: Text content for each item to achieve type-ahead feature
 38 | 
 39 | ## Usage
 40 | 
 41 | Here's a few important note to make sure virtualization works!
 42 | 
 43 | 1. A fixed height/max-height wrapping `<Virtualizer />`.
 44 | 2. Consistent item height, and set the `estimateSize` props appropriately.
 45 | 3. Set `textContent` props to make sure type-ahead acceessibility.
 46 | 
 47 | ## Example
 48 | 
 49 | ```vue
 50 | <script setup>
 51 | import { ComboboxContent, ComboboxItem, ComboboxRoot, ComboboxViewport, ComboboxVirtualizer } from 'reka-ui'
 52 | 
 53 | const items = [
 54 |   // … large array of items
 55 | ]
 56 | </script>
 57 | 
 58 | <template>
 59 |   <ComboboxRoot>
 60 |     …
 61 |     <ComboboxContent>
 62 |       <!-- Make sure to set a height for Virtualizer's parent element -->
 63 |       <ComboboxViewport class="max-h-80 overflow-y-auto">
 64 |         <ComboboxVirtualizer
 65 |           v-slot="{ option }"
 66 |           :options="items"
 67 |           :estimate-size="25"
 68 |           :text-content="(opt) => opt.label"
 69 |         >
 70 |           <ComboboxItem :value="option">
 71 |             {{ option.label }}
 72 |           </ComboboxItem>
 73 |         </ComboboxVirtualizer>
 74 |       </ComboboxViewport>
 75 |     </ComboboxContent>
 76 |   </ComboboxRoot>
 77 | </template>
 78 | ```
 79 | 
 80 | ## Common issue
 81 | 
 82 | ### Virtualization is not working
 83 | 
 84 | Do ensure that `<Virtualizer>`'s parent element has a defined height!
 85 | 
 86 | ```vue line=6
 87 | <template>
 88 |   <ComboboxRoot>
 89 |     …
 90 |     <ComboboxContent>
 91 |       <!-- Height must be defined -->
 92 |       <ComboboxViewport class="max-h-80 overflow-y-auto">
 93 |         <ComboboxVirtualizer>
 94 |           …
 95 |         </ComboboxVirtualizer>
 96 |       </ComboboxViewport>
 97 |     </ComboboxContent>
 98 |   </ComboboxRoot>
 99 | </template>
100 | ```
101 | 


--------------------------------------------------------------------------------
/docs/content/docs/overview/accessibility.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | 
 3 | title: Accessibility
 4 | description: Reka UI follow the WAI-ARIA authoring practices guidelines and are tested in a wide selection of modern browsers and commonly used assistive technologies.
 5 | ---
 6 | 
 7 | # Accessibility
 8 | <Description>
 9 | Reka UI follow the WAI-ARIA authoring practices guidelines and are
10 | tested in a wide selection of modern browsers and commonly used assistive
11 | technologies.
12 | </Description>
13 | 
14 | We take care of many of the difficult implementation details related to accessibility, including `aria` and `role` attributes, focus management, and keyboard navigation. That means that users should be able to use our components as-is in most contexts and rely on functionality to follow the expected accessibility design patterns.
15 | 
16 | ## WAI-ARIA
17 | 
18 | [WAI-ARIA](https://www.w3.org/TR/wai-aria-1.2/), published and maintained by the W3C, specifies the semantics for many common UI patterns that show up in Reka UI. This is designed to provide meaning for controls that aren't built using elements provided by the browser. For example, if you use a `div` instead of a `button` element to create a button, there are attributes you need to add to the `div` in order to convey that it's a button for screen readers or voice recognition tools.
19 | 
20 | In addition to semantics, there are behaviors that are expected from different types of components. A `button` element is going to respond to certain interactions in ways that a `div` will not, so it's up to the developer to reimplement those interactions with JavaScript. The [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.2/) provide additional guidance for implementing behaviors for various controls that come with Reka UI.
21 | 
22 | ## Accessible Labels
23 | 
24 | With many built-in form controls, the native HTML `label` element is designed to provide semantic meaning and context for corresponding `input` elements. For non-form control elements, or for custom controls like those provided by Reka UI, [WAI-ARIA provides a specification](https://www.w3.org/TR/wai-aria-1.2/#namecalculation) for how to provide accessible names and descriptions to those controls.
25 | 
26 | Where possible, Reka UI include abstractions to make labelling our controls simple. The [`Label`](../components/label) primitive is designed to work with many of our controls. Ultimately it's up to you to provide those labels so that users have the proper context when navigating your application.
27 | 
28 | ## Keyboard Navigation
29 | 
30 | Many complex components, like [`Tabs`](../components/tabs) and [`Dialog`](../components/dialog), come with expectations from users on how to interact with their content using a keyboard or other non-mouse input modalities. Reka UI provide basic keyboard support in accordance with the [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.2/).
31 | 
32 | ## Focus Management
33 | 
34 | Proper keyboard navigation and good labelling often go hand-in-hand with managing focus. When a user interacts with an element and something changes as a result, it's often helpful to move focus with the interaction so that the next tab stop is logical depending on the new context of the app. And for screen reader users, moving focus often results in an announcement to convey this new context, which relies on proper labelling.
35 | 
36 | In many Reka UI, we move focus based on the interactions a user normally takes in a given component. For example, in [`AlertDialog`](../components/alert-dialog), when the modal is opened, focus is programmatically moved to a `Cancel` button element to anticipate a response to the prompt.
37 | 


--------------------------------------------------------------------------------
/docs/content/docs/overview/getting-started.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | 
  3 | title: Getting started
  4 | description: A quick tutorial to get you up and running with Reka UI.
  5 | name: popover
  6 | ---
  7 | 
  8 | # Getting started
  9 | 
 10 | <Description>
 11 | A quick tutorial to get you up and running with Reka UI.
 12 | </Description>
 13 | 
 14 | ## Implementing a Popover
 15 | 
 16 | In this quick tutorial, we will install and style the [Popover](../components/popover) component.
 17 | 
 18 | ### 1. Install the library
 19 | 
 20 | Install the component from your command line.
 21 | 
 22 | <InstallationTabs value="reka-ui" />
 23 | 
 24 | ### 2. Import the parts
 25 | 
 26 | Import and structure the parts.
 27 | 
 28 | ```vue twoslash
 29 | <!-- Popover.vue -->
 30 | <script setup lang="ts">
 31 | import { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'
 32 | </script>
 33 | 
 34 | <template>
 35 |   <PopoverRoot>
 36 |     <PopoverTrigger>More info</PopoverTrigger>
 37 |     <PopoverPortal>
 38 |       <PopoverContent>
 39 |         Some more info...
 40 |         <PopoverClose />
 41 |         <PopoverArrow />
 42 |       </PopoverContent>
 43 |     </PopoverPortal>
 44 |   </PopoverRoot>
 45 | </template>
 46 | ```
 47 | 
 48 | ### 3. Add your styles
 49 | 
 50 | Add styles where desired.
 51 | 
 52 | ```vue
 53 | <template>
 54 |   <PopoverRoot>
 55 |     <PopoverTrigger class="PopoverTrigger">
 56 |       More info
 57 |     </PopoverTrigger>
 58 |     <PopoverPortal>
 59 |       <PopoverContent class="PopoverContent">
 60 |         Some more info...
 61 |         <PopoverClose />
 62 |         <PopoverArrow class="PopoverArrow" />
 63 |       </PopoverContent>
 64 |     </PopoverPortal>
 65 |   </PopoverRoot>
 66 | </template>
 67 | 
 68 | <style>
 69 | .PopoverTrigger {
 70 |   background-color: white;
 71 |   border-radius: 4px;
 72 | }
 73 | 
 74 | .PopoverContent {
 75 |   border-radius: 4px;
 76 |   padding: 20px;
 77 |   width: 260px;
 78 |   background-color: white;
 79 | }
 80 | 
 81 | .PopoverArrow {
 82 |   background-color: white;
 83 | }
 84 | </style>
 85 | ```
 86 | 
 87 | ### Demo
 88 | 
 89 | Here's a complete demo.
 90 | 
 91 | <ComponentPreview name="Popover" />
 92 | 
 93 | ## Summary
 94 | 
 95 | The steps above outline briefly what's involved in using a Reka UI in your application.
 96 | 
 97 | These components are low-level enough to give you control over how you want to wrap them. You're free to introduce your own high-level API to better suit the needs of your team and product.
 98 | 
 99 | In a few simple steps, we've implemented a fully accessible Popover component, without having to worry about many of its complexities.
100 | 
101 | - Adheres to [WAI-ARIA](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/) design pattern.
102 | - Can be controlled or uncontrolled.
103 | - Customize side, alignment, offsets, collision handling.
104 | - Optionally render a pointing arrow.
105 | - Focus is fully managed and customizable.
106 | - Dismissing and layering behavior is highly customizable.
107 | 


--------------------------------------------------------------------------------
/docs/content/docs/overview/installation.md:
--------------------------------------------------------------------------------
 1 | # Installation
 2 | 
 3 | A quick tutorial to walk through installing the packages, as well as the supported plugins.
 4 | 
 5 | ## Installing the package
 6 | 
 7 | <a href="https://www.npmjs.com/package/reka-ui" target="__blank"><img alt="NPM Downloads" src="https://img.shields.io/npm/dm/reka-ui?flat&colorA=002438&colorB=41c399"></a>
 8 | 
 9 | <InstallationTabs value="reka-ui" />
10 | 
11 | ## Nuxt modules
12 | 
13 | Reka UI offers Nuxt modules support.
14 | 
15 | In `nuxt.config.ts`, simply add `reka-ui/nuxt` into the modules, and it will auto-imports all the components for you.
16 | 
17 | ```ts
18 | export default defineNuxtConfig({
19 |   modules: ['reka-ui/nuxt'],
20 | })
21 | ```
22 | 
23 | ## unplugin-vue-components
24 | 
25 | Reka UI also has resolver for the popular [unplugin-vue-components](https://github.com/antfu/unplugin-vue-components).
26 | 
27 | In `vite.config.ts`, import `reka-ui/resolver`, and configure as such and it will auto-imports all the components from Reka UI.
28 | 
29 | ```ts{2,10  }
30 | import Components from 'unplugin-vue-components/vite'
31 | import RekaResolver from 'reka-ui/resolver'
32 | 
33 | export default defineConfig({
34 |   plugins: [
35 |     vue(),
36 |     Components({
37 |       dts: true,
38 |       resolvers: [
39 |         RekaResolver()
40 | 
41 |         // RekaResolver({
42 |         //   prefix: '' // use the prefix option to add Prefix to the imported components
43 |         // })
44 |       ],
45 |     }),
46 |   ],
47 | })
48 | ```
49 | 


--------------------------------------------------------------------------------
/docs/content/docs/overview/introduction.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Introduction
 3 | description: An open-source UI component library for building high-quality, accessible design systems and web apps using Vue.
 4 | ---
 5 | 
 6 | <script setup>
 7 | import Contributors from '../../../.vitepress/components/Contributors.vue'
 8 | </script>
 9 | 
10 | # Introduction
11 | 
12 | <Description>
13 | 
14 | An open-source UI component library for building high-quality, accessible
15 | design systems and web apps using <a href="https://vuejs.org" target="_blank" rel="noopener noreferrer">Vue.js</a>.
16 | 
17 | </Description>
18 | 
19 | ## ✨ Rebrand: Reka UI ✨
20 | 
21 | Presenting **Reka UI**, the new identity of [Radix Vue](https://www.radix-vue.com/) in its v2 evolution.
22 | 
23 | **Reka** (pronounced `/ree·kuh/`) means "design" in [Malay](https://translate.google.com/?hl=en&sl=ms&tl=en&text=reka&op=translate), and also evokes "Eureka."
24 | 
25 | Reka UI strives to deliver a low-level UI component library centered on accessibility, customization, and developer experience. Use these components as the foundation of your design system or integrate them progressively.
26 | 
27 | Check out the release note [here](/docs/overview/releases#_2-0-changes)
28 | 
29 | <Callout type="tip">
30 | 
31 | Curious about the rebrand? See the announcement in [this discussion](https://github.com/unovue/reka-ui/issues/908).
32 | 
33 | </Callout>
34 | 
35 | ## Our Principles
36 | 
37 | ### Accessibility-First
38 | 
39 | Accessibility is at the heart of Reka UI. Our components align with [WAI-ARIA design patterns](https://www.w3.org/TR/wai-aria-practices-1.2) to ensure that all users, regardless of abilities, can interact with your UI effectively. We handle intricate accessibility details like aria attributes, keyboard navigation, and focus management to simplify the developer's work.
40 | 
41 | ### Customizable & Unstyled
42 | 
43 | Reka UI components come unstyled, providing developers the freedom to style them however they choose, using any CSS solution (vanilla CSS, preprocessors, or CSS-in-JS libraries). Our open component architecture allows you to wrap, extend, or modify each component as needed. Explore more in our [styling guide](../guides/styling).
44 | 
45 | ### Open & Modular
46 | 
47 | Our components are designed to be open and adaptable, allowing you to customize each element to fit your needs. Whether adding event listeners, props, or refs, Reka UI provides granular access to each component's inner workings.
48 | 
49 | ### Flexible State Management
50 | 
51 | Reka UI components are, by default, uncontrolled but can also be fully controlled when needed. This approach allows developers to decide on the level of state management required, offering a balance between flexibility and ease of use.
52 | 
53 | ### Developer-Centric Experience
54 | 
55 | We prioritize developer experience by maintaining a consistent and predictable API. Reka UI is fully-typed and structured with simplicity in mind, ensuring that components are easy to use and integrate. Our `asChild` prop allows full control over rendered elements, enhancing flexibility.
56 | 
57 | ### Performance & Tree-Shaking
58 | 
59 | Our library is designed with performance in mind. All components are compiled into a single package, making installation straightforward and ensuring that any unused components won’t add to your bundle size thanks to tree-shaking.
60 | 
61 | <Callout type="tip">
62 | 
63 | Reka UI is inspired by the principles and goals of [Radix UI](https://www.radix-ui.com/), sharing a commitment to accessibility, customization, and developer-friendly design.
64 | 
65 | </Callout>
66 | 
67 | ---
68 | 
69 | # Built by Vue lovers 💚
70 | 
71 | <Contributors />
72 | 
73 | # Credits
74 | 
75 | All credits go to these open-source works and resources
76 | 
77 | - Radix UI - https://radix-ui.com
78 | - React Aria - https://react-spectrum.adobe.com/react-aria
79 | - Floating UI - https://floating-ui.com
80 | - VueUse - https://vueuse.org
81 | - HeadlessUI - https://headlessui.com
82 | - Ariakit - https://ariakit.org/
83 | 


--------------------------------------------------------------------------------
/docs/content/docs/overview/releases.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Releases
 3 | description: Discover the latest release of Reka UI.
 4 | ---
 5 | 
 6 | # Releases
 7 | 
 8 | <Description>
 9 | Discover the latest release of Reka UI.
10 | </Description>
11 | 
12 | [Latest releases on github](https://github.com/unovue/reka-ui/releases)
13 | 
14 | ---
15 | 
16 | ## 2.0 Changes
17 | 
18 | ### ✨ New Features
19 | 
20 | <Callout type="tip">
21 | 
22 | We recommend reviewing the [migration guide](/docs/guides/migration) to make transitioning from v1 to v2 smooth.
23 | 
24 | </Callout>
25 | 
26 | #### Components
27 | - **TimeField**: Implement new TimeField component
28 | - **Presence**: Expose component
29 | - **ConfigProvider**: Add global config for locale
30 | 
31 | #### Functionality
32 | - **Checkbox**:
33 |   - Support multiple values and more types
34 |   - Add roving focus props to group
35 | - **ToggleGroup**: Support more types
36 | - **RadioGroup**:
37 |   - Support more types
38 |   - Emit 'select' event when user clicks on item
39 | - **Select**: Support different modelValue and option types
40 | - **Listbox/Combobox**:
41 |   - Expose highlight methods
42 |   - Highlight first item when filter changes
43 | - **NavigationMenu**:
44 |   - Add additional CSS variables for better positioning
45 |   - Add SSR support
46 | - **Collapsible/Accordion**: Add `unmount` prop to help SEO for hidden content
47 | 
48 | #### Developer Experience
49 | - **Types**:
50 |   - Expose useful types
51 |   - Allow type inference in usePrimitiveElement
52 | - **Filtering**: New `useFilter` composable for easy filtering
53 | - **Bundle**: Bundle with preserveModules, rollup types dts
54 | 
55 | ### 🔧 Refactors
56 | 
57 | - **Form Components**:
58 |   - Move visually hidden input element inside root node
59 | - **Combobox**:
60 |   - Use Listbox as base component
61 |   - Remove ComboboxEmpty
62 | - **Popper**:
63 |   - Allow custom reference el or virtual el
64 |   - Add position strategy and updateOnLayoutShift props
65 |   - Rename props for better clarity
66 | 
67 | ### 🐛 Bug Fixes
68 | 
69 | - **NavigationMenu**: Reset position after animation
70 | - **Accordion**: Fix SSR animation causing flickers
71 | - **Listbox**: Prevent scroll when using pointermove
72 | - **Combobox**:
73 |   - Fix empty state based on search value
74 |   - Fix initial search not working and virtualizer issues
75 | - **Select**: Fix arrow throwing content context injection error
76 | - **VisuallyHidden**: Fix not focusable after native form validation
77 | 
78 | ### 🚨 Breaking Changes
79 | 
80 | - **Form Components**:
81 |   - Rename controlled state to `v-model`
82 | - **Popover**: Update aria attributes and remove messy attributes
83 | - **Select**:
84 |   - Fix SSR support
85 |   - Refactor SelectValue rendering mechanism
86 | - **Arrow**: Improve polygon implementation
87 | - **Calendar**: Remove deprecated `step` prop
88 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/config-provider.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Config Provider
 3 | description: Wraps your app to provide global configurations.
 4 | ---
 5 | 
 6 | # Config Provider
 7 | 
 8 | <Description>
 9 | Wraps your app to provide global configurations.
10 | </Description>
11 | 
12 | <Highlights
13 |   :features="[
14 |     'Enables all primitives to inherit global reading direction.',
15 |     'Enables changing the behavior of scroll body when setting body lock.',
16 |     'Much more controls to prevent layout shifts.',
17 |   ]"
18 | />
19 | 
20 | ## Anatomy
21 | 
22 | Import the component.
23 | 
24 | ```vue
25 | <script setup lang="ts">
26 | import { ConfigProvider } from 'reka-ui'
27 | </script>
28 | 
29 | <template>
30 |   <ConfigProvider>
31 |     <slot />
32 |   </ConfigProvider>
33 | </template>
34 | ```
35 | 
36 | ## API Reference
37 | 
38 | ### Config Provider
39 | 
40 | When creating localized apps that require right-to-left (RTL) reading direction, you need to wrap your application with the `ConfigProvider` component to ensure all of the primitives adjust their behavior based on the `dir` prop.
41 | 
42 | You can also change the global behavior of `bodylock` for components such as `Alert`, `DropdownMenu` and etc to fit your layout to prevent any [content shifts](https://github.com/unovue/reka-ui/issues/385).
43 | 
44 | <!-- @include: @/meta/ConfigProvider.md -->
45 | 
46 | ## Example
47 | 
48 | Use the config provider.
49 | 
50 | Set global direction to `rtl`, and scroll body behavior to `false` (will not set any padding/margin).
51 | 
52 | ```vue
53 | <script setup lang="ts">
54 | import { ConfigProvider } from 'reka-ui'
55 | </script>
56 | 
57 | <template>
58 |   <ConfigProvider
59 |     dir="rtl"
60 |     :scroll-body="false"
61 |   >
62 |     <slot />
63 |   </ConfigProvider>
64 | </template>
65 | ```
66 | 
67 | ## Hydration issue (Vue < 3.5)
68 | 
69 | We expose a temporary workaround to allow current Nuxt (with version >3.10) project fix the current hydration issue by using [`useId`](https://nuxt.com/docs/api/composables/use-id) provided by Nuxt.
70 | 
71 | > Inspired by [Headless UI](https://github.com/tailwindlabs/headlessui/pull/2959)
72 | 
73 |  ```vue
74 |  <!-- in Nuxt's app.vue -->
75 | <script setup lang="ts">
76 | import { ConfigProvider } from 'reka-ui'
77 | 
78 | const useIdFunction = () => useId()
79 | </script>
80 | 
81 | <template>
82 |    <ConfigProvider :use-id="useIdFunction">
83 |      …
84 |    </ConfigProvider>
85 | </template>
86 | ```
87 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/focus-scope.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Focus Scope
 3 | description:  Manages focus within a component boundary with support for trapping and looping focus navigation.
 4 | ---
 5 | 
 6 | # Focus Scope
 7 | 
 8 | <Description>
 9 |  Manages focus within a component boundary with support for trapping and looping focus navigation.
10 | </Description>
11 | 
12 | Focus Scope provides enhanced control over keyboard focus management within component boundaries. It can trap focus within its container and optionally loop focus navigation, making it ideal for modal interfaces and other interactive components that need to manage focus states.
13 | 
14 | ## API Reference
15 | 
16 | <!-- @include: @/meta/FocusScope.md -->
17 | 
18 | ## Example
19 | 
20 | Basic usage with focus trapping
21 | 
22 | ```vue line=2
23 | <template>
24 |   <FocusScope :trapped="true">
25 |     <div>
26 |       <button>Action 1</button>
27 |       <button>Action 2</button>
28 |       <button>Close</button>
29 |     </div>
30 |   </FocusScope>
31 | </template>
32 | ```
33 | 
34 | ### With Focus Looping
35 | 
36 | Enable both trapping and looping for complete focus management:
37 | 
38 | ```vue line=2
39 | <template>
40 |   <FocusScope :trapped="true" :loop="true">
41 |     <div>
42 |       <button v-for="item in items" :key="item.id">
43 |         {{ item.label }}
44 |       </button>
45 |     </div>
46 |   </FocusScope>
47 | </template>
48 | ```
49 | 
50 | ### Handling Focus Event
51 | 
52 | ```vue line=2-5
53 | <script setup>
54 | function handleMountFocus(event) {
55 |   // Prevent default auto-focus behavior if needed
56 |   event.preventDefault()
57 | }
58 | </script>
59 | 
60 | <template>
61 |   <FocusScope
62 |     @mount-auto-focus="handleMountFocus"
63 |     @unmount-auto-focus="handleUnmountFocus"
64 |   >
65 |     <div>
66 |       …
67 |     </div>
68 |   </FocusScope>
69 | </template>
70 | ```
71 | 
72 | <br>
73 | 
74 | <Callout type="warning">
75 | 
76 | When using trapped mode, ensure there is always at least one focusable element within the scope to prevent focus from being trapped in an inaccessible state.
77 | 
78 | </Callout>
79 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/presence.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Presence
  3 | description: Manages mounting and unmounting of element with transition support.
  4 | ---
  5 | 
  6 | # Presence
  7 | 
  8 | <Description>
  9 | Manages mounting and unmounting of element with transition support.
 10 | </Description>
 11 | 
 12 | <Callout type="info" title="Question">
 13 | 
 14 | How is this component different from [Vue Transition](https://vuejs.org/guide/built-ins/transition.html#transition)?
 15 | 
 16 | A: The biggest difference is it accepts css animation, and control the visibility of element.
 17 | 
 18 | </Callout>
 19 | 
 20 | Presence component provides enhanced control over element mounting/unmounting. It ensures animations and transitions complete before removing elements from the DOM, making it perfect for animated UI components.
 21 | 
 22 | ## API Reference
 23 | 
 24 | <PropsTable :data="[
 25 |   {
 26 |     'name': 'present',
 27 |     'description': '<p>Conditional to mount or unmount the child element. Similar to <code>v-if</code></p>\n',
 28 |     'type': 'boolean',
 29 |     'required': true,
 30 |   },
 31 |   {
 32 |     'name': 'forceMount',
 33 |     'description': '<p>Force the element to render all the time.\n\nUseful for programmatically render grandchild component with the exposed <code>present</code></p>\n',
 34 |     'type': 'boolean',
 35 |     'required': false,
 36 |     'default': false
 37 |   },
 38 | ]" />
 39 | 
 40 | <EmitsTable :data="[
 41 |   {
 42 |     'name': 'enter',
 43 |     'description': '<p>Event handler called when the enter animation has started</p>\n',
 44 |     'type': 'CustomEvent'
 45 |   },
 46 |   {
 47 |     'name': 'after-enter',
 48 |     'description': '<p>Event handler called when the enter animation has finished</p>\n',
 49 |     'type': 'CustomEvent'
 50 |   },
 51 |   {
 52 |     'name': 'leave',
 53 |     'description': '<p>Event handler called when the leave animation has started</p>\n',
 54 |     'type': 'CustomEvent'
 55 |   },
 56 |   {
 57 |     'name': 'after-leave',
 58 |     'description': '<p>Event handler called when the leave animation has finished</p>\n',
 59 |     'type': 'CustomEvent'
 60 |   },
 61 | ]" />
 62 | 
 63 | <Callout type="tip">
 64 | 
 65 | Read our [Animation Guide](/docs/guides/animation) to learn more about implementing animations with Presence component.
 66 | 
 67 | </Callout>
 68 | 
 69 | ## Example
 70 | 
 71 | ```vue line=2,4,5
 72 | <template>
 73 |   <Presence :present="isVisible">
 74 |     <div
 75 |       :data-open="isVisible ? 'open' : 'close'"
 76 |       class="data-[state=open]:animate-fadeIn data-[state=closed]:animate-fadeOut"
 77 |     >
 78 |       <slot />
 79 |     </div>
 80 |   </Presence>
 81 | </template>
 82 | ```
 83 | 
 84 | ### Force Mount
 85 | 
 86 | When you need to ensure content is always rendered regardless of the present state:
 87 | 
 88 | ```vue
 89 | <template>
 90 |   <Presence v-slot="{ present }" :present="isVisible" :force-mount="true">
 91 |     <div>
 92 |       This content will always be rendered
 93 | 
 94 |       <div v-if="present">
 95 |         This content is hidden
 96 |       </div>
 97 |     </div>
 98 |   </Presence>
 99 | </template>
100 | ```
101 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/primitive.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Primitive
 3 | description: Compose Reka's functionality onto alternative element types or your own Vue components.
 4 | ---
 5 | 
 6 | # Primitive
 7 | 
 8 | <Description>
 9 | Compose Reka's functionality onto alternative element types or your own Vue components.
10 | </Description>
11 | 
12 | When you are building a component, in some cases you might want to allow user to compose some functionalities onto the underlying element, or alternative element. This is where `Primitive` comes in handy as it expose this capability to the user.
13 | 
14 | ## API Reference
15 | 
16 | <PropsTable
17 |   :data="[
18 |     {
19 |       name: 'as',
20 |       required: false,
21 |       type: 'string | Component',
22 |       default: 'div',
23 |       description: '<p>The element or component the current element should render as. Can be overwrite by <Code>asChild</Code></p>',
24 |     },
25 |     {
26 |       name: 'asChild',
27 |       required: false,
28 |       type: 'boolean',
29 |       default: 'false',
30 |       description: '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.<br><br>Read our <a href=&quot;/guides/composition&quot;>Composition</a> guide for more details.</p>',
31 |     }
32 |   ]"
33 | />
34 | 
35 | ## Usage
36 | 
37 | ### Changing `as` value
38 | 
39 | If you want to change the default element or component being render, you can set the default `as` when defining the props.
40 | 
41 | ```vue
42 | <script setup lang="ts">
43 | import type { PrimitiveProps } from 'reka-ui'
44 | import { Primitive } from 'reka-ui'
45 | 
46 | const props = withDefaults(defineProps<PrimitiveProps>(), {
47 |   as: 'span'
48 | })
49 | </script>
50 | 
51 | <template>
52 |   <!-- Now this element will be rendered as `span` by default -->
53 |   <Primitive v-bind="props">
54 |     ...
55 |   </Primitive>
56 | </template>
57 | ```
58 | 
59 | ### Render `asChild`
60 | 
61 | Change the default rendered element for the one passed as a child, merging their props and behavior.<br><br>Read our <a href="/docs/guides/composition">Composition</a> guide for more details.
62 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/roving-focus.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Roving Focus
  3 | description: Utility component that implements the roving tabindex method to manage focus between items.
  4 | ---
  5 | 
  6 | # Roving Focus
  7 | 
  8 | <Description>
  9 | Utility component that implements the roving tabindex method to manage focus between items.
 10 | </Description>
 11 | 
 12 | <ComponentPreview name="RovingFocus" />
 13 | 
 14 | <Callout>
 15 | 
 16 | Learn more about roving tabindex in [Keyboard Navigation Inside Composite Components](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#x6-6-keyboard-navigation-inside-components)
 17 | 
 18 | </Callout>
 19 | 
 20 | ## Anatomy
 21 | 
 22 | Import all parts and piece them together.
 23 | 
 24 | ```vue
 25 | <script setup>
 26 | import { RovingFocusGroup, RovingFocusItem } from 'reka-ui'
 27 | </script>
 28 | 
 29 | <template>
 30 |   <RovingFocusGroup>
 31 |     <RovingFocusItem />
 32 |   </RovingFocusGroup>
 33 | </template>
 34 | ```
 35 | 
 36 | ## API Reference
 37 | 
 38 | ### Group
 39 | 
 40 | Contains all the parts of a Roving Focus
 41 | 
 42 | <!-- @include: @/meta/RovingFocusGroup.md -->
 43 | 
 44 | <DataAttributesTable
 45 |   :data="[
 46 |     {
 47 |       attribute: '[data-orientation]',
 48 |       values: ['vertical', 'horizontal', undefined],
 49 |     },
 50 |   ]"
 51 | />
 52 | 
 53 | ### Item
 54 | 
 55 | The item that would inherit the roving tabindex
 56 | 
 57 | <!-- @include: @/meta/RovingFocusItem.md -->
 58 | 
 59 | <DataAttributesTable
 60 |   :data="[
 61 |     {
 62 |       attribute: '[data-active]',
 63 |       values: 'Present when not active',
 64 |     },
 65 |     {
 66 |       attribute: '[data-disabled]',
 67 |       values: 'Present when not focusable',
 68 |     },
 69 |     {
 70 |       attribute: '[data-orientation]',
 71 |       values: ['vertical', 'horizontal', undefined],
 72 |     },
 73 |   ]"
 74 | />
 75 | 
 76 | ## Examples
 77 | 
 78 | ### Vertical orientation
 79 | 
 80 | ```vue{2}
 81 | <template>
 82 |   <RovingFocusGroup :orientation="'vertical'">
 83 |     …
 84 |   </RovingFocusGroup>
 85 | </template>
 86 | ```
 87 | 
 88 | ### Loop
 89 | 
 90 | Use `loop` property to enable roving from last item to the first item, and vice versa.
 91 | 
 92 | ```vue{2}
 93 | <template>
 94 |   <RovingFocusGroup loop>
 95 |     …
 96 |   </RovingFocusGroup>
 97 | </template>
 98 | ```
 99 | 
100 | ### Initial focus item
101 | 
102 | Set `active` prop to item to initially focused item.
103 | 
104 | ```vue{4}
105 | <template>
106 |   <RovingFocusGroup>
107 |     <RovingFocusItem>1</RovingFocusItem>
108 |     <RovingFocusItem active>2</RovingFocusItem>
109 |     <RovingFocusItem>3</RovingFocusItem>
110 |   </RovingFocusGroup>
111 | </template>
112 | ```
113 | 
114 | ### Unfocusable item
115 | 
116 | Set `focusable="false"` prop to item will prevent them from being focused.
117 | 
118 | ```vue{4}
119 | <template>
120 |   <RovingFocusGroup>
121 |     <RovingFocusItem>1</RovingFocusItem>
122 |     <RovingFocusItem :focusable="false">2</RovingFocusItem>
123 |     <RovingFocusItem>3</RovingFocusItem>
124 |   </RovingFocusGroup>
125 | </template>
126 | ```
127 | 
128 | ## Accessibility
129 | 
130 | Adheres to the [Keyboard Navigation Inside Composite Components](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#x6-6-keyboard-navigation-inside-components).
131 | 
132 | ### Keyboard Interactions
133 | 
134 | <KeyboardTable
135 |   :data="[
136 |     {
137 |       keys: ['ArrowDown'],
138 |       description: 'Moves focus to the next roving focus item in the group.',
139 |     },
140 |     {
141 |       keys: ['ArrowRight'],
142 |       description: 'Moves focus to the next roving focus item in the group.',
143 |     },
144 |     {
145 |       keys: ['ArrowUp'],
146 |       description: 'Moves focus to the previous roving focus item in the group.',
147 |     },
148 |     {
149 |       keys: ['ArrowLeft'],
150 |       description: 'Moves focus to the previous roving focus item in the group.',
151 |     },
152 |     {
153 |       keys: ['Space', 'Enter'],
154 |       description: 'Triggers click on the roving focus item.',
155 |     },
156 |   ]"
157 | />
158 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/slot.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Slot
 3 | description: Merges its props onto its immediate child.
 4 | ---
 5 | 
 6 | # Slot
 7 | 
 8 | <Description>
 9 | Merges its props onto its immediate child.
10 | </Description>
11 | 
12 | <Callout type="info" title="Question">
13 | 
14 | How is this component different from [Vue native slot](https://vuejs.org/guide/components/slots.html)?
15 | 
16 | A: The biggest different is how it handles the `attributes` assigned to it.
17 | 
18 | </Callout>
19 | 
20 | Native slot treat any binded value as [Scoped Slots](https://vuejs.org/guide/components/slots.html#scoped-slots), where the values will be exposed to the parent template and be consumed.
21 | 
22 | But Reka UI's slot behave differently, it would merge all the assigned attributes onto it's immediate child.
23 | 
24 | ## Example
25 | 
26 | Say we want to assign an `id` attribute to whatever component/element that was rendered, but Native slot will convert it into a scoped slot, and you will need to assign that id manually.
27 | 
28 | ```vue
29 | <!-- Native Slot -->
30 | <!-- Comp.vue -->
31 | <template>
32 |   <slot id="reka-01">
33 |     ...
34 |   </slot>
35 | </template>
36 | 
37 | <!-- parent template -->
38 | <template>
39 |   <Comp v-slot="slotProps">
40 |     <button :id="slotProps.id">...<button>
41 |   <Comp>
42 | <template>
43 | ```
44 | (You can check out
45 | [Vue SFC Playground](https://play.vuejs.org/#eNp9UrFOwzAQ/ZWTly4oUelWhUgFdYABKmD0EpJr45LYln1JK1X5d84OTQEB2/m9d+fnez6JlbVJ36FYisyXTlkCj9TZXGrVWuMITuBwCwNsnWlhxtLZRN2Z1o64FEkaTmGUFFKD1Fk6zuNJfCBsbVMQ8gkgq+f5xhnr0xWRU28doQelwTeG4FB4PSMoC+cUVmB6dFnKDbEx3BErrrmNjM4VO65N11RQFz2Cqm6kmF8vpMjST0XsjPa4zNLJirgS5Eujt2qX7L3RvINT0EpRslY16J4sKaO9FEuITOCKpjGHh4iR6/DqjJc1lu+/4Ht/DJgUG4ceXc/7mTgq3A5ppNcvj3jkeiJbU3UNq/8hn9GbpgseR9ltpyu2/UUX3d7HuJTevfr1kVD786OC0aAcol4KTi+s6a+nX+wukkXsk3rgLZ6TD5/oW9C895jpJZScvwUjP4IYPgAfN9Yc) and see that the `id` wasn't being inherited.)
46 | 
47 | This would be troublesome if you want to ensure some attributes are being passed onto certain element, maybe for accessibility reason.
48 | 
49 | ---
50 | 
51 | Alternatively, If you use `Slot` from Reka UI, the attributes assigned to the Slot component will be inherited by the immediate child element, but you will no longer have access to the `Scoped Slot`,
52 | 
53 | ```vue
54 | <!-- Reka UI Slot -->
55 | <script setup lang="ts">
56 | import { Slot } from 'reka-ui'
57 | </script>
58 | 
59 | <!-- Comp.vue -->
60 | <template>
61 |   <Slot id="reka-01">
62 |     ...
63 |   </Slot>
64 | </template>
65 | 
66 | <!-- parent template -->
67 | <template>
68 |   <Comp>
69 |     <!-- id will be inherited -->
70 |     <button>...<button>
71 |   <Comp>
72 | <template>
73 | ```
74 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/use-date-formatter.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: useDateFormatter
 3 | description: Creates a wrapper around the `DateFormatter`, which is an improved version of the Intl.DateTimeFormat API, that is used internally by the various date builders to easily format dates in a consistent way.
 4 | ---
 5 | 
 6 | # useDateFormatter
 7 | 
 8 | <Description>
 9 | Creates a wrapper around the `DateFormatter`, which is an improved version of the Intl.DateTimeFormat API, that is used internally by the various date builders to easily format dates in a consistent way.
10 | </Description>
11 | 
12 | More information on the DateFormatter [here](https://react-spectrum.adobe.com/internationalized/date/DateFormatter.html).
13 | 
14 | ## Usage
15 | 
16 | ```vue
17 | <script setup lang="ts">
18 | import type { DateValue } from '@internationalized/date'
19 | import type { Ref } from 'vue'
20 | import { CalendarDate, getLocalTimeZone } from '@internationalized/date'
21 | import { toDate, useDateFormatter } from 'reka-ui'
22 | import { ref } from 'vue'
23 | 
24 | const value = ref(new CalendarDate(1995, 8, 18)) as Ref<DateValue>
25 | // provide the locale
26 | const formatter = useDateFormatter('en')
27 | </script>
28 | 
29 | <template>
30 |   <span>
31 |     <!-- output the month in short format. e.g.: Jan, Feb, etc. -->
32 |     {{ formatter.custom(value.toDate(getLocalTimeZone()), { month: 'short' }) }}
33 |   </span>
34 | </template>
35 | ```
36 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/use-emit-as-props.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: useEmitAsProps
 3 | description: Convert emits into object similar to props
 4 | ---
 5 | 
 6 | # useEmitAsProps
 7 | 
 8 | <Description>
 9 | Convert emits into object similar to props
10 | </Description>
11 | 
12 | When you are building a wrapper for a component, one of the biggest painpoint is to forward all the emitted events from components.
13 | 
14 | By using this composables, it will convert the `emits` you've declared into an object of handlers that is acceptable by Vue component.
15 | 
16 | ## Usage
17 | 
18 | ```vue
19 | <script setup lang="ts">
20 | import { useEmitAsProps } from 'reka-ui'
21 | 
22 | const emits = defineEmits<CompEmitType>()
23 | const emitsAsProps = useEmitAsProps(emits)
24 | </script>
25 | 
26 | <template>
27 |   <Comp v-bind="emitsAsProps">
28 |     ...
29 |   </Comp>
30 | </template>
31 | ```
32 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/use-filter.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: useFilter
 3 | description: Locale-Aware string filtering
 4 | ---
 5 | 
 6 | # useFilter
 7 | 
 8 | <Description>
 9 | Locale-Aware string filtering
10 | </Description>
11 | 
12 | `useFilter` provides utility functions for performing locale-aware string filtering using Intl.Collator. It ensures proper Unicode handling and allows customization via Intl.CollatorOptions.
13 | 
14 | ## Options
15 | 
16 | You can customize the behavior using `Intl.CollatorOptions`. See [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#options) for more details.
17 | 
18 | ```ts
19 | const { startsWith } = useFilter({ sensitivity: 'base' })
20 | console.log(startsWith('Résumé', 'resume')) // true (case-insensitive)
21 | ```
22 | 
23 | ## Usage
24 | 
25 | ### Example Usage
26 | 
27 | ```ts
28 | import { useFilter } from 'reka-ui'
29 | 
30 | const { startsWith, endsWith, contains } = useFilter()
31 | 
32 | console.log(startsWith('hello', 'he')) // true
33 | console.log(endsWith('hello', 'lo')) // true
34 | console.log(contains('hello', 'ell')) // true
35 | ```
36 | 
37 | ## Using `useFilter` in a Vue Component
38 | 
39 | ```vue
40 | <script setup>
41 | import { ref } from 'vue'
42 | import { useFilter } from '@/composables/useFilter'
43 | 
44 | const { contains } = useFilter()
45 | const searchQuery = ref('')
46 | const items = ref(['Apple', 'Banana', 'Cherry', 'Date'])
47 | 
48 | const filteredItems = computed(() =>
49 |   items.value.filter(item => contains(item, searchQuery.value))
50 | )
51 | </script>
52 | 
53 | <template>
54 |   <div>
55 |     <input v-model="searchQuery" placeholder="Search...">
56 |     <ul>
57 |       <li v-for="item in filteredItems" :key="item">
58 |         {{ item }}
59 |       </li>
60 |     </ul>
61 |   </div>
62 | </template>
63 | ```
64 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/use-forward-expose.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: useForwardExpose
 3 | description: Forward component's exposed value, props and $el.
 4 | ---
 5 | 
 6 | # useForwardExpose
 7 | 
 8 | <Description>
 9 | Forward component's exposed value, props and $el.
10 | </Description>
11 | 
12 | When building a component, if we have a non-single root node component, the template refs will not return the DOM element via `$el` ([read more](https://vuejs.org/api/component-instance.html#el)) , thus, we need to forward the `$el` in template ref for this component manually. Or in some case you want to target certain element as the expose element..
13 | 
14 | Furthermore, this composable extend the missing exposed `props` from the template refs.
15 | 
16 | ## Usage
17 | 
18 | ```vue
19 | <script setup lang="ts">
20 | import { useForwardExpose } from 'reka-ui'
21 | 
22 | const selectedElementId = ref(1)
23 | const { forwardRef } = useForwardExpose()
24 | </script>
25 | 
26 | <template>
27 |   <span>
28 |     <!-- We want to expose div as the template ref's element -->
29 |     <div :ref="forwardRef">
30 |       ...
31 |     </div>
32 |   </span>
33 | </template>
34 | ```
35 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/use-forward-props-emits.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: useForwardPropsEmits
 3 | description: Combinations for useForwardProps & useEmitAsProps
 4 | ---
 5 | 
 6 | # useForwardPropsEmits
 7 | 
 8 | <Description>
 9 | Combinations for useForwardProps & useEmitAsProps
10 | </Description>
11 | 
12 | This composable is just a wrapper for [useForwardProps](/docs/utilities/use-forward-props) & [useEmitAsProps](/docs/utilities/use-emit-as-props.html) composables. Doing so it returns only 1 object that is designed to be use with `v-bind` directly.
13 | 
14 | ## Usage
15 | 
16 | ```vue
17 | <script setup lang="ts">
18 | import { useForwardPropsEmits } from 'reka-ui'
19 | 
20 | const props = defineProps<CompEmitProps>()
21 | const emits = defineEmits<CompEmitEmits>()
22 | const forwarded = useForwardPropsEmits(props, emits)
23 | </script>
24 | 
25 | <template>
26 |   <Comp v-bind="forwarded">
27 |     ...
28 |   </Comp>
29 | </template>
30 | ```
31 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/use-forward-props.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: useForwardProps
 3 | description: Forward component's props without boolean casting
 4 | ---
 5 | 
 6 | # useForwardProps
 7 | 
 8 | <Description>
 9 | Forward component's props without boolean casting
10 | </Description>
11 | 
12 | When you are building a wrapper for a component, in some cases you want to ignore Vue [Props Boolean Casting](https://vuejs.org/guide/components/props.html#boolean-casting).
13 | 
14 | You can either set default value as `undefined` for all the boolean field, or you can use this composable.
15 | 
16 | ## Usage
17 | 
18 | ```vue
19 | <script setup lang="ts">
20 | import { useForwardProps } from 'reka-ui'
21 | 
22 | const props = defineProps<CompEmitProps>()
23 | const forwarded = useForwardProps(props)
24 | </script>
25 | 
26 | <template>
27 |   <Comp v-bind="forwarded">
28 |     ...
29 |   </Comp>
30 | </template>
31 | ```
32 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/use-id.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: useId
 3 | description: Generate random id
 4 | ---
 5 | 
 6 | # useId
 7 | 
 8 | <Callout type="warning" title="Deprecated">
 9 | 
10 | [Vue 3.5](https://blog.vuejs.org/posts/vue-3-5#useid) released an official client-server stable solution for `useId`.
11 | 
12 | </Callout>
13 | 
14 | <Description>
15 | Generate random id
16 | </Description>
17 | 
18 | ## Usage
19 | 
20 | ```ts
21 | import { useId } from 'reka-ui'
22 | 
23 | const buttonId = useId() // reka-1
24 | ```
25 | 
26 | ```ts
27 | import { useId } from 'reka-ui'
28 | 
29 | const buttonId = useId('test-id') // test-id
30 | ```
31 | 


--------------------------------------------------------------------------------
/docs/content/docs/utilities/visually-hidden.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Visually Hidden
 3 | description: Hides content from the screen in an accessible way.
 4 | ---
 5 | 
 6 | # Visually Hidden
 7 | 
 8 | <Description>
 9 | Hides content from the screen in an accessible way.
10 | </Description>
11 | 
12 | <Highlights
13 |   :features="[
14 |     'Visually hides content while preserving it for assistive technology.',
15 |   ]"
16 | />
17 | 
18 | ## Anatomy
19 | 
20 | Import the component.
21 | 
22 | ```vue
23 | <script setup lang="ts">
24 | import { VisuallyHidden } from 'reka-ui'
25 | </script>
26 | 
27 | <template>
28 |   <VisuallyHidden>
29 |     <slot />
30 |   </VisuallyHidden>
31 | </template>
32 | ```
33 | 
34 | ## Basic example
35 | 
36 | Use the visually hidden primitive.
37 | 
38 | ```vue
39 | <script setup lang="ts">
40 | import { GearIcon } from '@radix-icons/vue'
41 | import { VisuallyHidden } from 'reka-ui'
42 | </script>
43 | 
44 | <template>
45 |   <button>
46 |     <GearIcon />
47 |     <VisuallyHidden>Settings</VisuallyHidden>
48 |   </button>
49 | </template>
50 | ```
51 | 
52 | ## API Reference
53 | 
54 | ### Root
55 | 
56 | Anything you put inside this component will be hidden from the screen but will be announced by screen readers.
57 | 
58 | <PropsTable
59 |   :data="[
60 |     {
61 |       name: 'as',
62 |       type: 'string | Component',
63 |       default: 'span',
64 |       description: '<p>The element or component this component should render as. Can be overwrite by <Code>asChild</Code></p>'
65 |     },
66 |     {
67 |       name: 'asChild',
68 |       required: false,
69 |       type: 'boolean',
70 |       default: 'false',
71 |       description:  `<p>Change the default rendered element for the one passed as a child,
72 |           merging their props and behavior.
73 |           <br />
74 |           <br />
75 |           Read our <a href=&quot;../guides/composition&quot;>Composition</a> guide for more details.</p>`
76 |     },
77 |   ]"
78 | />
79 | 
80 | ## Accessibility
81 | 
82 | This is useful in certain scenarios as an alternative to traditional labelling with `aria-label` or `aria-labelledby`.
83 | 


--------------------------------------------------------------------------------
/docs/content/examples.md:
--------------------------------------------------------------------------------
1 | <script setup>
2 |   import Example from "../.vitepress/components/ExampleHome.vue"
3 | </script>
4 | 
5 | <Example />
6 | 


--------------------------------------------------------------------------------
/docs/content/examples/checkbox-group.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Checkbox Group
 3 | tags:
 4 |   - Checkbox
 5 |   - Form controls
 6 | ---
 7 | 
 8 | # Checkbox Group
 9 | 
10 | <Description>
11 | 
12 | Rendering multiple Checkbox elements to form a group of checkboxes. The behavior is similar to having `v-model` for multiple native `input[type="checkbox"]`.
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="CheckboxGroup" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Checkbox Group
23 | 
24 | Renders when the checkbox is in a checked or indeterminate state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.
25 | 
26 | </ExampleSection>
27 | 


--------------------------------------------------------------------------------
/docs/content/examples/combobox-tags-input.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Combobox TagsInput
 3 | tags:
 4 |   - Combobox
 5 |   - Tags Input
 6 | ---
 7 | 
 8 | # Combobox with TagsInput
 9 | 
10 | <Description>
11 | 
12 | Rendering [Combobox](/docs/components/combobox) with [Tags Input](/docs/components/tags-input).
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="ComboboxTagsInput" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Combobox
23 | 
24 | </ExampleSection>
25 | 


--------------------------------------------------------------------------------
/docs/content/examples/combobox-textarea.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Inline Combobox on Textarea
 3 | tags:
 4 |   - Combobox
 5 |   - Textarea
 6 | ---
 7 | 
 8 | # Inline Combobox on Textarea
 9 | 
10 | <Description>
11 | 
12 | Rendering [Combobox](/docs/components/combobox) as a textarea element to create an accessible multiline textbox. Inserting specific characters triggers a popup with dynamic suggestions.
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="ComboboxTextarea" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Combobox
23 | 
24 | </ExampleSection>
25 | 


--------------------------------------------------------------------------------
/docs/content/examples/date-picker-selection.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Date Picker Selection
 3 | tags:
 4 |   - Range Calendar
 5 |   - Date Range Field
 6 | ---
 7 | 
 8 | # Date Picker Selection
 9 | 
10 | <Description>
11 | 
12 | Date pickers let users select a date or a range of dates. They commonly use in booking systems.
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="DatePickerSelection" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Date Picker Selection
23 | 
24 | Dual-calendar display that shows two months side by side for easier date range selection, and quick selection options in a sidebar panel
25 | 
26 | </ExampleSection>
27 | 


--------------------------------------------------------------------------------
/docs/content/examples/dialog-command-menu.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Dialog Command Menu
 3 | tags:
 4 |   - Dialog
 5 |   - Combobox
 6 | ---
 7 | 
 8 | # Dialog Command Menu
 9 | 
10 | <Description>
11 | 
12 | Combining [Dialog](/docs/components/dialog) and [Combobox](/docs/components/combobox) to enable users to search a command list in a modal.
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="DialogCommandMenu" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Dialog
23 | 
24 | </ExampleSection>
25 | 


--------------------------------------------------------------------------------
/docs/content/examples/dialog-gesture-driven.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Dialog Gesture Driven
 3 | tags:
 4 |   - Dialog
 5 |   - Motion-v
 6 | ---
 7 | 
 8 | # Dialog Gesture Driven
 9 | 
10 | <Description>
11 | 
12 | An iOS-style gesture driven modal sheet built with Reka UI, and [Motion-v](https://motion.unovue.com/).
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="DialogGestureDriven" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Dialog
23 | 
24 | <Callout type="info" title="Credit">
25 | 
26 |  Inspired by [React Aria](https://react-spectrum.adobe.com/react-aria/examples/framer-modal-sheet.html)
27 | 
28 |  </Callout>
29 | 
30 | </ExampleSection>
31 | 


--------------------------------------------------------------------------------
/docs/content/examples/listbox-transfer.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Listbox Transfer
 3 | tags:
 4 |   - Listbox
 5 | ---
 6 | 
 7 | # Listbox Transfer
 8 | 
 9 | <Description>
10 | 
11 | Render a Transfer component with Listbox.
12 | 
13 | </Description>
14 | 
15 | <Tags />
16 | 
17 | <ComponentPreview type="example"  name="ListboxTransfer" />
18 | 
19 | <ExampleSection>
20 | 
21 | ### Listbox Transfer
22 | 
23 | </ExampleSection>
24 | 


--------------------------------------------------------------------------------
/docs/content/examples/progress-circular.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Circular Progress
 3 | tags:
 4 |   - Progress
 5 | ---
 6 | 
 7 | # Circular Progress
 8 | 
 9 | <Description>
10 | 
11 | Rendering progress bar as a Circular Progress.
12 | 
13 | </Description>
14 | 
15 | <Tags />
16 | 
17 | <ComponentPreview type="example"  name="ProgressCircular" />
18 | 
19 | <ExampleSection>
20 | 
21 | ### Circular Progress
22 | 
23 | </ExampleSection>
24 | 


--------------------------------------------------------------------------------
/docs/content/examples/slider-number-field.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Slider with Number Field
 3 | tags:
 4 |   - Slider
 5 |   - NumberField
 6 | ---
 7 | 
 8 | # Slider with Number Field
 9 | 
10 | <Description>
11 | 
12 | Render a Slider with a Number Field that shows and interact with the values of the Slider.
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="SliderNumberField" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Slider with Number Field
23 | 
24 | </ExampleSection>
25 | 


--------------------------------------------------------------------------------
/docs/content/examples/slider-tooltip.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Slider Tooltip
 3 | tags:
 4 |   - Slider
 5 |   - Tooltip
 6 | ---
 7 | 
 8 | # Slider Tooltip
 9 | 
10 | <Description>
11 | 
12 | Render a Slider with a Tooltip that shows the current value of the Slider.
13 | 
14 | </Description>
15 | 
16 | <Tags />
17 | 
18 | <ComponentPreview type="example"  name="SliderTooltip" />
19 | 
20 | <ExampleSection>
21 | 
22 | ### Slider Tooltip
23 | 
24 | </ExampleSection>
25 | 


--------------------------------------------------------------------------------
/docs/content/examples/tooltip-cursor.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Tooltip Cursor
 3 | tags:
 4 |   - Tooltip
 5 | ---
 6 | 
 7 | # Tooltip Cursor
 8 | 
 9 | <Description>
10 | 
11 | Render a Tooltip that follows the cursor when hovering over the target element.
12 | 
13 | </Description>
14 | 
15 | <Tags />
16 | 
17 | <ComponentPreview type="example"  name="TooltipCursor" />
18 | 
19 | <ExampleSection>
20 | 
21 | ### Tooltip Cursor
22 | 
23 | </ExampleSection>
24 | 


--------------------------------------------------------------------------------
/docs/content/index.md:
--------------------------------------------------------------------------------
1 | ---
2 | layout: home
3 | title: Reka UI - Unstyled, fully accessible UI library
4 | ---
5 | 


--------------------------------------------------------------------------------
/docs/content/meta/AccordionContent.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/AccordionHeader.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'h3\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/AccordionItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>Whether or not an accordion item is disabled from user interaction.\nWhen <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'unmountOnHide',
25 |     'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'value',
31 |     'description': '<p>A string value for the accordion item. All items within an accordion should use a unique value.</p>\n',
32 |     'type': 'string',
33 |     'required': true
34 |   }
35 | ]" />
36 | 
37 | <SlotsTable :data="[
38 |   {
39 |     'name': 'open',
40 |     'description': '<p>Current open state</p>\n',
41 |     'type': 'boolean'
42 |   }
43 | ]" />
44 | 


--------------------------------------------------------------------------------
/docs/content/meta/AccordionRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'collapsible',
19 |     'description': '<p>When type is &quot;single&quot;, allows closing content when clicking trigger for an open item.\nWhen type is &quot;multiple&quot;, this prop has no effect.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'false'
23 |   },
24 |   {
25 |     'name': 'defaultValue',
26 |     'description': '<p>The default active value of the item(s).</p>\n<p>Use when you do not need to control the state of the item(s).</p>\n',
27 |     'type': 'string | string[]',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'dir',
32 |     'description': '<p>The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode.</p>\n',
33 |     'type': '\'ltr\' | \'rtl\'',
34 |     'required': false
35 |   },
36 |   {
37 |     'name': 'disabled',
38 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the accordion and all its items</p>\n',
39 |     'type': 'boolean',
40 |     'required': false,
41 |     'default': 'false'
42 |   },
43 |   {
44 |     'name': 'modelValue',
45 |     'description': '<p>The controlled value of the active item(s).</p>\n<p>Use this when you need to control the state of the items. Can be binded with <code>v-model</code></p>\n',
46 |     'type': 'string | string[]',
47 |     'required': false
48 |   },
49 |   {
50 |     'name': 'orientation',
51 |     'description': '<p>The orientation of the accordion.</p>\n',
52 |     'type': '\'vertical\' | \'horizontal\'',
53 |     'required': false,
54 |     'default': '\'vertical\''
55 |   },
56 |   {
57 |     'name': 'type',
58 |     'description': '<p>Determines whether a &quot;single&quot; or &quot;multiple&quot; items can be selected at a time.</p>\n<p>This prop will overwrite the inferred type from <code>modelValue</code> and <code>defaultValue</code>.</p>\n',
59 |     'type': '\'single\' | \'multiple\'',
60 |     'required': false
61 |   },
62 |   {
63 |     'name': 'unmountOnHide',
64 |     'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\n',
65 |     'type': 'boolean',
66 |     'required': false,
67 |     'default': 'true'
68 |   }
69 | ]" />
70 | 
71 | <EmitsTable :data="[
72 |   {
73 |     'name': 'update:modelValue',
74 |     'description': '<p>Event handler called when the expanded state of an item changes</p>\n',
75 |     'type': '[value: string | string[]]'
76 |   }
77 | ]" />
78 | 
79 | <SlotsTable :data="[
80 |   {
81 |     'name': 'modelValue',
82 |     'description': '<p>Current active value</p>\n',
83 |     'type': 'AcceptableValue | AcceptableValue[] | undefined'
84 |   }
85 | ]" />
86 | 


--------------------------------------------------------------------------------
/docs/content/meta/AccordionTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogAction.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogCancel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogContent.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disableOutsidePointerEvents',
19 |     'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'forceMount',
25 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'trapFocus',
31 |     'description': '<p>When <code>true</code>, focus cannot escape the <code>Content</code> via keyboard,\npointer, or a programmatic focus.</p>\n',
32 |     'type': 'boolean',
33 |     'required': false
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'closeAutoFocus',
40 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
41 |     'type': '[event: Event]'
42 |   },
43 |   {
44 |     'name': 'escapeKeyDown',
45 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
46 |     'type': '[event: KeyboardEvent]'
47 |   },
48 |   {
49 |     'name': 'focusOutside',
50 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
51 |     'type': '[event: FocusOutsideEvent]'
52 |   },
53 |   {
54 |     'name': 'interactOutside',
55 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
56 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
57 |   },
58 |   {
59 |     'name': 'openAutoFocus',
60 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
61 |     'type': '[event: Event]'
62 |   },
63 |   {
64 |     'name': 'pointerDownOutside',
65 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
66 |     'type': '[event: PointerDownOutsideEvent]'
67 |   }
68 | ]" />
69 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogDescription.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'p\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogOverlay.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'open',
12 |     'description': '<p>The controlled open state of the dialog. Can be binded as <code>v-model:open</code>.</p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   }
16 | ]" />
17 | 
18 | <EmitsTable :data="[
19 |   {
20 |     'name': 'update:open',
21 |     'description': '<p>Event handler called when the open state of the dialog changes.</p>\n',
22 |     'type': '[value: boolean]'
23 |   }
24 | ]" />
25 | 
26 | <SlotsTable :data="[
27 |   {
28 |     'name': 'open',
29 |     'description': '<p>Current open state</p>\n',
30 |     'type': 'boolean'
31 |   },
32 |   {
33 |     'name': 'close',
34 |     'description': '<p>Close the dialog</p>\n',
35 |     'type': '(): void'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogTitle.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'h2\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/AlertDialogTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/AspectRatio.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'ratio',
19 |     'description': '<p>The desired ratio. Eg: 16/9</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '1'
23 |   }
24 | ]" />
25 | 
26 | <SlotsTable :data="[
27 |   {
28 |     'name': 'aspect',
29 |     'description': '<p>Current aspect ratio (in %)</p>\n',
30 |     'type': 'number'
31 |   }
32 | ]" />
33 | 


--------------------------------------------------------------------------------
/docs/content/meta/AvatarFallback.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'delayMs',
19 |     'description': '<p>Useful for delaying rendering so it only appears for those with slower connections.</p>\n',
20 |     'type': 'number',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/AvatarImage.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'img\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'crossOrigin',
19 |     'description': '',
20 |     'type': '\'\' | \'anonymous\' | \'use-credentials\'',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'referrerPolicy',
25 |     'description': '',
26 |     'type': '\'\' | \'no-referrer\' | \'no-referrer-when-downgrade\' | \'origin\' | \'origin-when-cross-origin\' | \'same-origin\' | \'strict-origin\' | \'strict-origin-when-cross-origin\' | \'unsafe-url\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'src',
31 |     'description': '',
32 |     'type': 'string',
33 |     'required': true
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'loadingStatusChange',
40 |     'description': '<p>A callback providing information about the loading status of the image. &lt;br&gt;\nThis is useful in case you want to control more precisely what to render as the image is loading.</p>\n',
41 |     'type': '[value: ImageLoadingStatus]'
42 |   }
43 | ]" />
44 | 


--------------------------------------------------------------------------------
/docs/content/meta/AvatarRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'td\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'date',
19 |     'description': '<p>The date value for the cell</p>\n',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarCellTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'day',
19 |     'description': '<p>The date value provided to the cell trigger</p>\n',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   },
23 |   {
24 |     'name': 'month',
25 |     'description': '<p>The month in which the cell is rendered</p>\n',
26 |     'type': 'DateValue',
27 |     'required': true
28 |   }
29 | ]" />
30 | 
31 | <SlotsTable :data="[
32 |   {
33 |     'name': 'dayValue',
34 |     'description': '<p>Current day</p>\n',
35 |     'type': 'string'
36 |   },
37 |   {
38 |     'name': 'disabled',
39 |     'description': '<p>Current disable state</p>\n',
40 |     'type': 'boolean'
41 |   },
42 |   {
43 |     'name': 'selected',
44 |     'description': '<p>Current selected state</p>\n',
45 |     'type': 'boolean'
46 |   },
47 |   {
48 |     'name': 'today',
49 |     'description': '<p>Current today state</p>\n',
50 |     'type': 'boolean'
51 |   },
52 |   {
53 |     'name': 'outsideView',
54 |     'description': '<p>Current outside view state</p>\n',
55 |     'type': 'boolean'
56 |   },
57 |   {
58 |     'name': 'outsideVisibleView',
59 |     'description': '<p>Current outside visible view state</p>\n',
60 |     'type': 'boolean'
61 |   },
62 |   {
63 |     'name': 'unavailable',
64 |     'description': '<p>Current unavailable state</p>\n',
65 |     'type': 'boolean'
66 |   }
67 | ]" />
68 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarGrid.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'table\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarGridBody.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'tbody\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarGridHead.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'thead\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarGridRow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'tr\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarHeadCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'th\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarHeader.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarHeading.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 
19 | <SlotsTable :data="[
20 |   {
21 |     'name': 'headingValue',
22 |     'description': '<p>Current month and year</p>\n',
23 |     'type': 'string'
24 |   }
25 | ]" />
26 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarNext.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nextPage',
19 |     'description': '<p>The function to be used for the next page. Overwrites the <code>nextPage</code> function set on the <code>CalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarPrev.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'prevPage',
19 |     'description': '<p>The function to be used for the prev page. Overwrites the <code>prevPage</code> function set on the <code>CalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/CalendarRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'calendarLabel',
 19 |     'description': '<p>The accessible label for the calendar</p>\n',
 20 |     'type': 'string',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'defaultPlaceholder',
 25 |     'description': '<p>The default placeholder date</p>\n',
 26 |     'type': 'DateValue',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'defaultValue',
 31 |     'description': '<p>The default value for the calendar</p>\n',
 32 |     'type': 'DateValue',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'dir',
 37 |     'description': '<p>The reading direction of the calendar when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 38 |     'type': '\'ltr\' | \'rtl\'',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'disabled',
 43 |     'description': '<p>Whether the calendar is disabled</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false,
 46 |     'default': 'false'
 47 |   },
 48 |   {
 49 |     'name': 'disableDaysOutsideCurrentView',
 50 |     'description': '<p>Whether or not to disable days outside the current view.</p>\n',
 51 |     'type': 'boolean',
 52 |     'required': false,
 53 |     'default': 'false'
 54 |   },
 55 |   {
 56 |     'name': 'fixedWeeks',
 57 |     'description': '<p>Whether or not to always display 6 weeks in the calendar</p>\n',
 58 |     'type': 'boolean',
 59 |     'required': false,
 60 |     'default': 'false'
 61 |   },
 62 |   {
 63 |     'name': 'initialFocus',
 64 |     'description': '<p>If true, the calendar will focus the selected day, today, or the first day of the month depending on what is visible when the calendar is mounted</p>\n',
 65 |     'type': 'boolean',
 66 |     'required': false,
 67 |     'default': 'false'
 68 |   },
 69 |   {
 70 |     'name': 'isDateDisabled',
 71 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
 72 |     'type': 'Matcher',
 73 |     'required': false
 74 |   },
 75 |   {
 76 |     'name': 'isDateUnavailable',
 77 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
 78 |     'type': 'Matcher',
 79 |     'required': false
 80 |   },
 81 |   {
 82 |     'name': 'locale',
 83 |     'description': '<p>The locale to use for formatting dates</p>\n',
 84 |     'type': 'string',
 85 |     'required': false
 86 |   },
 87 |   {
 88 |     'name': 'maxValue',
 89 |     'description': '<p>The maximum date that can be selected</p>\n',
 90 |     'type': 'DateValue',
 91 |     'required': false
 92 |   },
 93 |   {
 94 |     'name': 'minValue',
 95 |     'description': '<p>The minimum date that can be selected</p>\n',
 96 |     'type': 'DateValue',
 97 |     'required': false
 98 |   },
 99 |   {
100 |     'name': 'modelValue',
101 |     'description': '<p>The controlled checked state of the calendar</p>\n',
102 |     'type': 'DateValue | DateValue[]',
103 |     'required': false
104 |   },
105 |   {
106 |     'name': 'multiple',
107 |     'description': '<p>Whether multiple dates can be selected</p>\n',
108 |     'type': 'boolean',
109 |     'required': false,
110 |     'default': 'false'
111 |   },
112 |   {
113 |     'name': 'nextPage',
114 |     'description': '<p>A function that returns the next page of the calendar. It receives the current placeholder as an argument inside the component.</p>\n',
115 |     'type': '((placeholder: DateValue) => DateValue)',
116 |     'required': false
117 |   },
118 |   {
119 |     'name': 'numberOfMonths',
120 |     'description': '<p>The number of months to display at once</p>\n',
121 |     'type': 'number',
122 |     'required': false,
123 |     'default': '1'
124 |   },
125 |   {
126 |     'name': 'pagedNavigation',
127 |     'description': '<p>This property causes the previous and next buttons to navigate by the number of months displayed at once, rather than one month</p>\n',
128 |     'type': 'boolean',
129 |     'required': false,
130 |     'default': 'false'
131 |   },
132 |   {
133 |     'name': 'placeholder',
134 |     'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected</p>\n',
135 |     'type': 'DateValue',
136 |     'required': false
137 |   },
138 |   {
139 |     'name': 'preventDeselect',
140 |     'description': '<p>Whether or not to prevent the user from deselecting a date without selecting another date first</p>\n',
141 |     'type': 'boolean',
142 |     'required': false,
143 |     'default': 'false'
144 |   },
145 |   {
146 |     'name': 'prevPage',
147 |     'description': '<p>A function that returns the previous page of the calendar. It receives the current placeholder as an argument inside the component.</p>\n',
148 |     'type': '((placeholder: DateValue) => DateValue)',
149 |     'required': false
150 |   },
151 |   {
152 |     'name': 'readonly',
153 |     'description': '<p>Whether the calendar is readonly</p>\n',
154 |     'type': 'boolean',
155 |     'required': false,
156 |     'default': 'false'
157 |   },
158 |   {
159 |     'name': 'weekdayFormat',
160 |     'description': '<p>The format to use for the weekday strings provided via the weekdays slot prop</p>\n',
161 |     'type': '\'narrow\' | \'short\' | \'long\'',
162 |     'required': false,
163 |     'default': '\'narrow\''
164 |   },
165 |   {
166 |     'name': 'weekStartsOn',
167 |     'description': '<p>The day of the week to start the calendar on</p>\n',
168 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6',
169 |     'required': false,
170 |     'default': '0'
171 |   }
172 | ]" />
173 | 
174 | <EmitsTable :data="[
175 |   {
176 |     'name': 'update:modelValue',
177 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
178 |     'type': '[date: DateValue]'
179 |   },
180 |   {
181 |     'name': 'update:placeholder',
182 |     'description': '<p>Event handler called whenever the placeholder value changes</p>\n',
183 |     'type': '[date: DateValue]'
184 |   }
185 | ]" />
186 | 
187 | <SlotsTable :data="[
188 |   {
189 |     'name': 'date',
190 |     'description': '<p>The current date of the placeholder</p>\n',
191 |     'type': 'DateValue'
192 |   },
193 |   {
194 |     'name': 'grid',
195 |     'description': '<p>The grid of dates</p>\n',
196 |     'type': 'Grid<DateValue>[]'
197 |   },
198 |   {
199 |     'name': 'weekDays',
200 |     'description': '<p>The days of the week</p>\n',
201 |     'type': 'string[]'
202 |   },
203 |   {
204 |     'name': 'weekStartsOn',
205 |     'description': '<p>The start of the week</p>\n',
206 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6'
207 |   },
208 |   {
209 |     'name': 'locale',
210 |     'description': '<p>The calendar locale</p>\n',
211 |     'type': 'string'
212 |   },
213 |   {
214 |     'name': 'fixedWeeks',
215 |     'description': '<p>Whether or not to always display 6 weeks in the calendar</p>\n',
216 |     'type': 'boolean'
217 |   },
218 |   {
219 |     'name': 'modelValue',
220 |     'description': '<p>The current date of the calendar</p>\n',
221 |     'type': 'DateValue | DateValue[] | undefined'
222 |   }
223 | ]" />
224 | 
225 | <MethodsTable :data="[
226 |   {
227 |     'name': 'isDateDisabled',
228 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
229 |     'type': 'Matcher'
230 |   },
231 |   {
232 |     'name': 'isDateUnavailable',
233 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
234 |     'type': 'Matcher'
235 |   }
236 | ]" />
237 | 


--------------------------------------------------------------------------------
/docs/content/meta/CheckboxGroupRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The value of the checkbox when it is initially rendered. Use when you do not need to control its value.</p>\n',
20 |     'type': 'AcceptableValue[]',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'dir',
25 |     'description': '<p>The direction of navigation between items.</p>\n',
26 |     'type': '\'ltr\' | \'rtl\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'disabled',
31 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the checkboxes</p>\n',
32 |     'type': 'boolean',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'loop',
37 |     'description': '<p>Whether keyboard navigation should loop around</p>\n',
38 |     'type': 'boolean',
39 |     'required': false
40 |   },
41 |   {
42 |     'name': 'modelValue',
43 |     'description': '<p>The controlled value of the checkbox. Can be binded with v-model.</p>\n',
44 |     'type': 'AcceptableValue[]',
45 |     'required': false
46 |   },
47 |   {
48 |     'name': 'name',
49 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
50 |     'type': 'string',
51 |     'required': false
52 |   },
53 |   {
54 |     'name': 'orientation',
55 |     'description': '<p>The orientation of the group.\nMainly so arrow navigation is done accordingly (left &amp; right vs. up &amp; down)</p>\n',
56 |     'type': '\'vertical\' | \'horizontal\'',
57 |     'required': false
58 |   },
59 |   {
60 |     'name': 'required',
61 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
62 |     'type': 'boolean',
63 |     'required': false
64 |   },
65 |   {
66 |     'name': 'rovingFocus',
67 |     'description': '<p>When <code>false</code>, navigating through the items using arrow keys will be disabled.</p>\n',
68 |     'type': 'boolean',
69 |     'required': false,
70 |     'default': 'true'
71 |   }
72 | ]" />
73 | 
74 | <EmitsTable :data="[
75 |   {
76 |     'name': 'update:modelValue',
77 |     'description': '<p>Event handler called when the value of the checkbox changes.</p>\n',
78 |     'type': '[value: AcceptableValue[]]'
79 |   }
80 | ]" />
81 | 


--------------------------------------------------------------------------------
/docs/content/meta/CheckboxIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/CheckboxRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The value of the checkbox when it is initially rendered. Use when you do not need to control its value.</p>\n',
20 |     'type': 'boolean | \'indeterminate\'',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'disabled',
25 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the checkbox</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'id',
31 |     'description': '<p>Id of the element</p>\n',
32 |     'type': 'string',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'modelValue',
37 |     'description': '<p>The controlled value of the checkbox. Can be binded with v-model.</p>\n',
38 |     'type': 'boolean | \'indeterminate\' | null',
39 |     'required': false
40 |   },
41 |   {
42 |     'name': 'name',
43 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
44 |     'type': 'string',
45 |     'required': false
46 |   },
47 |   {
48 |     'name': 'required',
49 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
50 |     'type': 'boolean',
51 |     'required': false
52 |   },
53 |   {
54 |     'name': 'value',
55 |     'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\n',
56 |     'type': 'AcceptableValue',
57 |     'required': false,
58 |     'default': '\'on\''
59 |   }
60 | ]" />
61 | 
62 | <EmitsTable :data="[
63 |   {
64 |     'name': 'update:modelValue',
65 |     'description': '<p>Event handler called when the value of the checkbox changes.</p>\n',
66 |     'type': '[value: boolean | \'indeterminate\']'
67 |   }
68 | ]" />
69 | 
70 | <SlotsTable :data="[
71 |   {
72 |     'name': 'modelValue',
73 |     'description': '<p>Current value</p>\n',
74 |     'type': 'false | true | \'indeterminate\''
75 |   },
76 |   {
77 |     'name': 'state',
78 |     'description': '<p>Current state</p>\n',
79 |     'type': 'CheckedState'
80 |   }
81 | ]" />
82 | 


--------------------------------------------------------------------------------
/docs/content/meta/CollapsibleContent.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <EmitsTable :data="[
26 |   {
27 |     'name': 'contentFound',
28 |     'description': '',
29 |     'type': '[(void)?]'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/CollapsibleRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultOpen',
19 |     'description': '<p>The open state of the collapsible when it is initially rendered. &lt;br&gt; Use when you do not need to control its open state.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'false'
23 |   },
24 |   {
25 |     'name': 'disabled',
26 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the collapsible.</p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'open',
32 |     'description': '<p>The controlled open state of the collapsible. Can be binded with <code>v-model</code>.</p>\n',
33 |     'type': 'boolean',
34 |     'required': false
35 |   },
36 |   {
37 |     'name': 'unmountOnHide',
38 |     'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\n',
39 |     'type': 'boolean',
40 |     'required': false,
41 |     'default': 'true'
42 |   }
43 | ]" />
44 | 
45 | <EmitsTable :data="[
46 |   {
47 |     'name': 'update:open',
48 |     'description': '<p>Event handler called when the open state of the collapsible changes.</p>\n',
49 |     'type': '[value: boolean]'
50 |   }
51 | ]" />
52 | 
53 | <SlotsTable :data="[
54 |   {
55 |     'name': 'open',
56 |     'description': '<p>Current open state</p>\n',
57 |     'type': 'boolean'
58 |   }
59 | ]" />
60 | 


--------------------------------------------------------------------------------
/docs/content/meta/CollapsibleTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxAnchor.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'reference',
19 |     'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\n<p>If not provided will use the current component as anchor.</p>\n',
20 |     'type': 'ReferenceElement',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'rounded',
26 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'width',
32 |     'description': '<p>The width of the arrow in pixels.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': '10'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxCancel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'arrowPadding',
 18 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 19 |     'type': 'number',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'avoidCollisions',
 37 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'bodyLock',
 43 |     'description': '<p>The document.body will be lock, and scrolling will be disabled.</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionBoundary',
 49 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 50 |     'type': 'Element | (Element | null)[] | null',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'collisionPadding',
 55 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 56 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'disableOutsidePointerEvents',
 61 |     'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'disableUpdateOnLayoutShift',
 67 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'forceMount',
 73 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 74 |     'type': 'boolean',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'hideWhenDetached',
 79 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 80 |     'type': 'boolean',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'position',
 85 |     'description': '<p>The positioning mode to use, &lt;br&gt;\n<code>inline</code> is the default and you can control the position using CSS. &lt;br&gt;\n<code>popper</code> positions content in the same way as our other primitives, for example <code>Popover</code> or <code>DropdownMenu</code>.</p>\n',
 86 |     'type': '\'inline\' | \'popper\'',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'positionStrategy',
 91 |     'description': '<p>The type of CSS position property to use.</p>\n',
 92 |     'type': '\'fixed\' | \'absolute\'',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'prioritizePosition',
 97 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 98 |     'type': 'boolean',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'reference',
103 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
104 |     'type': 'ReferenceElement',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'side',
109 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
110 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
111 |     'required': false
112 |   },
113 |   {
114 |     'name': 'sideOffset',
115 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
116 |     'type': 'number',
117 |     'required': false
118 |   },
119 |   {
120 |     'name': 'sticky',
121 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
122 |     'type': '\'partial\' | \'always\'',
123 |     'required': false
124 |   },
125 |   {
126 |     'name': 'updatePositionStrategy',
127 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
128 |     'type': '\'always\' | \'optimized\'',
129 |     'required': false
130 |   }
131 | ]" />
132 | 
133 | <EmitsTable :data="[
134 |   {
135 |     'name': 'escapeKeyDown',
136 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
137 |     'type': '[event: KeyboardEvent]'
138 |   },
139 |   {
140 |     'name': 'focusOutside',
141 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
142 |     'type': '[event: FocusOutsideEvent]'
143 |   },
144 |   {
145 |     'name': 'interactOutside',
146 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
147 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
148 |   },
149 |   {
150 |     'name': 'pointerDownOutside',
151 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
152 |     'type': '[event: PointerDownOutsideEvent]'
153 |   }
154 | ]" />
155 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxEmpty.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'input\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'autoFocus',
19 |     'description': '<p>Focus on element when mounted.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'disabled',
25 |     'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'displayValue',
31 |     'description': '<p>The display value of input for selected item. Does not work with <code>multiple</code>.</p>\n',
32 |     'type': '((val: any) => string)',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'modelValue',
37 |     'description': '<p>The controlled value of the filter. Can be binded with with v-model.</p>\n',
38 |     'type': 'string',
39 |     'required': false
40 |   }
41 | ]" />
42 | 
43 | <EmitsTable :data="[
44 |   {
45 |     'name': 'update:modelValue',
46 |     'description': '<p>Event handler called when the value changes.</p>\n',
47 |     'type': '[string]'
48 |   }
49 | ]" />
50 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>A string representation of the item contents.</p>\n<p>If the children are not plain text, then the <code>textValue</code> prop must also be set to a plain text representation, which will be used for autocomplete in the ComboBox.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'value',
31 |     'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\n',
32 |     'type': 'AcceptableValue',
33 |     'required': true
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the selecting item. &lt;br&gt; It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
41 |     'type': '[event: SelectEvent<AcceptableValue>]'
42 |   }
43 | ]" />
44 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxItemIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxLabel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'for',
19 |     'description': '',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'by',
 19 |     'description': '<p>Use this to compare objects by a particular field, or pass your own comparison function for complete control over how objects are compared.</p>\n',
 20 |     'type': 'string | ((a: AcceptableValue, b: AcceptableValue) => boolean)',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'defaultOpen',
 25 |     'description': '<p>The open state of the combobox when it is initially rendered. &lt;br&gt; Use when you do not need to control its open state.</p>\n',
 26 |     'type': 'boolean',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'defaultValue',
 31 |     'description': '<p>The value of the listbox when initially rendered. Use when you do not need to control the state of the Listbox</p>\n',
 32 |     'type': 'AcceptableValue | AcceptableValue[]',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'dir',
 37 |     'description': '<p>The reading direction of the listbox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 38 |     'type': '\'ltr\' | \'rtl\'',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'disabled',
 43 |     'description': '<p>When <code>true</code>, prevents the user from interacting with listbox</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'highlightOnHover',
 49 |     'description': '<p>When <code>true</code>, hover over item will trigger highlight</p>\n',
 50 |     'type': 'boolean',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'ignoreFilter',
 55 |     'description': '<p>When <code>true</code>, disable the default filters</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'modelValue',
 61 |     'description': '<p>The controlled value of the listbox. Can be binded with with <code>v-model</code>.</p>\n',
 62 |     'type': 'AcceptableValue | AcceptableValue[]',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'multiple',
 67 |     'description': '<p>Whether multiple options can be selected or not.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'name',
 73 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 74 |     'type': 'string',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'open',
 79 |     'description': '<p>The controlled open state of the Combobox. Can be binded with with <code>v-model:open</code>.</p>\n',
 80 |     'type': 'boolean',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'required',
 85 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
 86 |     'type': 'boolean',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'resetSearchTermOnBlur',
 91 |     'description': '<p>Whether to reset the searchTerm when the Combobox input blurred</p>\n',
 92 |     'type': 'boolean',
 93 |     'required': false,
 94 |     'default': 'true'
 95 |   },
 96 |   {
 97 |     'name': 'resetSearchTermOnSelect',
 98 |     'description': '<p>Whether to reset the searchTerm when the Combobox value is selected</p>\n',
 99 |     'type': 'boolean',
100 |     'required': false,
101 |     'default': 'true'
102 |   }
103 | ]" />
104 | 
105 | <EmitsTable :data="[
106 |   {
107 |     'name': 'highlight',
108 |     'description': '<p>Event handler when highlighted element changes.</p>\n',
109 |     'type': '[payload: { ref: HTMLElement; value: AcceptableValue; }]'
110 |   },
111 |   {
112 |     'name': 'update:modelValue',
113 |     'description': '<p>Event handler called when the value changes.</p>\n',
114 |     'type': '[value: AcceptableValue]'
115 |   },
116 |   {
117 |     'name': 'update:open',
118 |     'description': '<p>Event handler called when the open state of the combobox changes.</p>\n',
119 |     'type': '[value: boolean]'
120 |   }
121 | ]" />
122 | 
123 | <SlotsTable :data="[
124 |   {
125 |     'name': 'open',
126 |     'description': '<p>Current open state</p>\n',
127 |     'type': 'boolean'
128 |   },
129 |   {
130 |     'name': 'modelValue',
131 |     'description': '<p>Current active value</p>\n',
132 |     'type': 'AcceptableValue | AcceptableValue[]'
133 |   }
134 | ]" />
135 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxSeparator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxViewport.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nonce',
19 |     'description': '<p>Will add <code>nonce</code> attribute to the style tag which can be used by Content Security Policy. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code>.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ComboboxVirtualizer.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'estimateSize',
 6 |     'description': '<p>Estimated size (in px) of each item</p>\n',
 7 |     'type': 'number',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'options',
12 |     'description': '<p>List of items</p>\n',
13 |     'type': 'AcceptableValue[]',
14 |     'required': true
15 |   },
16 |   {
17 |     'name': 'overscan',
18 |     'description': '<p>Number of items rendered outside the visible area</p>\n',
19 |     'type': 'number',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'textContent',
24 |     'description': '<p>Text content for each item to achieve type-ahead feature</p>\n',
25 |     'type': '((option: AcceptableValue) => string)',
26 |     'required': false
27 |   }
28 | ]" />
29 | 
30 | <SlotsTable :data="[
31 |   {
32 |     'name': 'option',
33 |     'description': '',
34 |     'type': 'null | string | number | bigint | Record<string, any>'
35 |   },
36 |   {
37 |     'name': 'virtualizer',
38 |     'description': '',
39 |     'type': 'Virtualizer<HTMLElement, Element>'
40 |   },
41 |   {
42 |     'name': 'virtualItem',
43 |     'description': '',
44 |     'type': 'VirtualItem'
45 |   }
46 | ]" />
47 | 


--------------------------------------------------------------------------------
/docs/content/meta/ConfigProvider.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'dir',
 6 |     'description': '<p>The global reading direction of your application. This will be inherited by all primitives.</p>\n',
 7 |     'type': '\'ltr\' | \'rtl\'',
 8 |     'required': false,
 9 |     'default': '\'ltr\''
10 |   },
11 |   {
12 |     'name': 'locale',
13 |     'description': '<p>The global locale of your application. This will be inherited by all primitives.</p>\n',
14 |     'type': 'string',
15 |     'required': false,
16 |     'default': '\'en\''
17 |   },
18 |   {
19 |     'name': 'nonce',
20 |     'description': '<p>The global <code>nonce</code> value of your application. This will be inherited by the related primitives.</p>\n',
21 |     'type': 'string',
22 |     'required': false
23 |   },
24 |   {
25 |     'name': 'scrollBody',
26 |     'description': '<p>The global scroll body behavior of your application. This will be inherited by the related primitives.</p>\n',
27 |     'type': 'boolean | ScrollBodyOption',
28 |     'required': false,
29 |     'default': 'true'
30 |   },
31 |   {
32 |     'name': 'useId',
33 |     'description': '<p>The global <code>useId</code> injection as a workaround for preventing hydration issue.</p>\n',
34 |     'type': '(() => string)',
35 |     'required': false
36 |   }
37 | ]" />
38 | 
39 | <MethodsTable :data="[
40 |   {
41 |     'name': 'useId',
42 |     'description': '<p>The global <code>useId</code> injection as a workaround for preventing hydration issue.</p>\n',
43 |     'type': '() => string'
44 |   }
45 | ]" />
46 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'rounded',
26 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'width',
32 |     'description': '<p>The width of the arrow in pixels.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': '10'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuCheckboxItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'modelValue',
25 |     'description': '<p>The controlled checked state of the item. Can be used as <code>v-model</code>.</p>\n',
26 |     'type': 'false | true | \'indeterminate\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'textValue',
31 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
32 |     'type': 'string',
33 |     'required': false
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
41 |     'type': '[event: Event]'
42 |   },
43 |   {
44 |     'name': 'update:modelValue',
45 |     'description': '<p>Event handler called when the value changes.</p>\n',
46 |     'type': '[payload: boolean]'
47 |   }
48 | ]" />
49 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'alignOffset',
  6 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
  7 |     'type': 'number',
  8 |     'required': false,
  9 |     'default': '0'
 10 |   },
 11 |   {
 12 |     'name': 'as',
 13 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 14 |     'type': 'AsTag | Component',
 15 |     'required': false,
 16 |     'default': '\'div\''
 17 |   },
 18 |   {
 19 |     'name': 'asChild',
 20 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 21 |     'type': 'boolean',
 22 |     'required': false
 23 |   },
 24 |   {
 25 |     'name': 'avoidCollisions',
 26 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 27 |     'type': 'boolean',
 28 |     'required': false,
 29 |     'default': 'true'
 30 |   },
 31 |   {
 32 |     'name': 'collisionBoundary',
 33 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 34 |     'type': 'Element | (Element | null)[] | null',
 35 |     'required': false,
 36 |     'default': '[]'
 37 |   },
 38 |   {
 39 |     'name': 'collisionPadding',
 40 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 41 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 42 |     'required': false,
 43 |     'default': '0'
 44 |   },
 45 |   {
 46 |     'name': 'disableUpdateOnLayoutShift',
 47 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 48 |     'type': 'boolean',
 49 |     'required': false
 50 |   },
 51 |   {
 52 |     'name': 'forceMount',
 53 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 54 |     'type': 'boolean',
 55 |     'required': false
 56 |   },
 57 |   {
 58 |     'name': 'hideWhenDetached',
 59 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 60 |     'type': 'boolean',
 61 |     'required': false,
 62 |     'default': 'false'
 63 |   },
 64 |   {
 65 |     'name': 'loop',
 66 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
 67 |     'type': 'boolean',
 68 |     'required': false
 69 |   },
 70 |   {
 71 |     'name': 'positionStrategy',
 72 |     'description': '<p>The type of CSS position property to use.</p>\n',
 73 |     'type': '\'fixed\' | \'absolute\'',
 74 |     'required': false
 75 |   },
 76 |   {
 77 |     'name': 'prioritizePosition',
 78 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 79 |     'type': 'boolean',
 80 |     'required': false
 81 |   },
 82 |   {
 83 |     'name': 'reference',
 84 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 85 |     'type': 'ReferenceElement',
 86 |     'required': false
 87 |   },
 88 |   {
 89 |     'name': 'sticky',
 90 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
 91 |     'type': '\'partial\' | \'always\'',
 92 |     'required': false,
 93 |     'default': '\'partial\''
 94 |   }
 95 | ]" />
 96 | 
 97 | <EmitsTable :data="[
 98 |   {
 99 |     'name': 'closeAutoFocus',
100 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
101 |     'type': '[event: Event]'
102 |   },
103 |   {
104 |     'name': 'escapeKeyDown',
105 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
106 |     'type': '[event: KeyboardEvent]'
107 |   },
108 |   {
109 |     'name': 'focusOutside',
110 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
111 |     'type': '[event: FocusOutsideEvent]'
112 |   },
113 |   {
114 |     'name': 'interactOutside',
115 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
116 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
117 |   },
118 |   {
119 |     'name': 'pointerDownOutside',
120 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
121 |     'type': '[event: PointerDownOutsideEvent]'
122 |   }
123 | ]" />
124 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'select',
34 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
35 |     'type': '[event: Event]'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuItemIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuLabel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuRadioGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'modelValue',
19 |     'description': '<p>The value of the selected item in the group.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <EmitsTable :data="[
26 |   {
27 |     'name': 'update:modelValue',
28 |     'description': '<p>Event handler called when the value changes.</p>\n',
29 |     'type': '[payload: string]'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuRadioItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'value',
31 |     'description': '<p>The unique value of the item.</p>\n',
32 |     'type': 'string',
33 |     'required': true
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
41 |     'type': '[event: Event]'
42 |   }
43 | ]" />
44 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'dir',
 6 |     'description': '<p>The reading direction of the combobox when applicable.</p>\n<p>If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 7 |     'type': '\'ltr\' | \'rtl\'',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'modal',
12 |     'description': '<p>The modality of the dropdown menu.</p>\n<p>When set to <code>true</code>, interaction with outside elements will be disabled and only menu content will be visible to screen readers.</p>\n',
13 |     'type': 'boolean',
14 |     'required': false,
15 |     'default': 'true'
16 |   }
17 | ]" />
18 | 
19 | <EmitsTable :data="[
20 |   {
21 |     'name': 'update:open',
22 |     'description': '<p>Event handler called when the open state of the submenu changes.</p>\n',
23 |     'type': '[payload: boolean]'
24 |   }
25 | ]" />
26 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuSeparator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuSub.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the submenu when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'open',
12 |     'description': '<p>The controlled open state of the menu. Can be used as <code>v-model:open</code>.</p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   }
16 | ]" />
17 | 
18 | <EmitsTable :data="[
19 |   {
20 |     'name': 'update:open',
21 |     'description': '<p>Event handler called when the open state of the submenu changes.</p>\n',
22 |     'type': '[payload: boolean]'
23 |   }
24 | ]" />
25 | 
26 | <SlotsTable :data="[
27 |   {
28 |     'name': 'open',
29 |     'description': '<p>Current open state</p>\n',
30 |     'type': 'boolean'
31 |   }
32 | ]" />
33 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuSubContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'alignOffset',
  6 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
  7 |     'type': 'number',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'arrowPadding',
 12 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'as',
 18 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 19 |     'type': 'AsTag | Component',
 20 |     'required': false,
 21 |     'default': '\'div\''
 22 |   },
 23 |   {
 24 |     'name': 'asChild',
 25 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 26 |     'type': 'boolean',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'avoidCollisions',
 31 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'collisionBoundary',
 37 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 38 |     'type': 'Element | (Element | null)[] | null',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionPadding',
 43 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 44 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'disableUpdateOnLayoutShift',
 49 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 50 |     'type': 'boolean',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'forceMount',
 55 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'hideWhenDetached',
 61 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'loop',
 67 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'positionStrategy',
 73 |     'description': '<p>The type of CSS position property to use.</p>\n',
 74 |     'type': '\'fixed\' | \'absolute\'',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'prioritizePosition',
 79 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 80 |     'type': 'boolean',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'reference',
 85 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 86 |     'type': 'ReferenceElement',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'sideOffset',
 91 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
 92 |     'type': 'number',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'sticky',
 97 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
 98 |     'type': '\'partial\' | \'always\'',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'updatePositionStrategy',
103 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
104 |     'type': '\'always\' | \'optimized\'',
105 |     'required': false
106 |   }
107 | ]" />
108 | 
109 | <EmitsTable :data="[
110 |   {
111 |     'name': 'closeAutoFocus',
112 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
113 |     'type': '[event: Event]'
114 |   },
115 |   {
116 |     'name': 'entryFocus',
117 |     'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\n',
118 |     'type': '[event: Event]'
119 |   },
120 |   {
121 |     'name': 'escapeKeyDown',
122 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
123 |     'type': '[event: KeyboardEvent]'
124 |   },
125 |   {
126 |     'name': 'focusOutside',
127 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
128 |     'type': '[event: FocusOutsideEvent]'
129 |   },
130 |   {
131 |     'name': 'interactOutside',
132 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
133 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
134 |   },
135 |   {
136 |     'name': 'openAutoFocus',
137 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
138 |     'type': '[event: Event]'
139 |   },
140 |   {
141 |     'name': 'pointerDownOutside',
142 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
143 |     'type': '[event: PointerDownOutsideEvent]'
144 |   }
145 | ]" />
146 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuSubTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/ContextMenuTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, the context menu would not open when right-clicking.</p>\n<p>Note that this will also restore the native context menu.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'false'
23 |   }
24 | ]" />
25 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateFieldInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'part',
19 |     'description': '<p>The part of the date to render</p>\n',
20 |     'type': '\'day\' | \'month\' | \'year\' | \'hour\' | \'minute\' | \'second\' | \'dayPeriod\' | \'literal\' | \'timeZoneName\'',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateFieldRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultPlaceholder',
 19 |     'description': '<p>The default placeholder date</p>\n',
 20 |     'type': 'DateValue',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'defaultValue',
 25 |     'description': '<p>The default value for the calendar</p>\n',
 26 |     'type': 'DateValue',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'dir',
 31 |     'description': '<p>The reading direction of the date field when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 32 |     'type': '\'ltr\' | \'rtl\'',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'disabled',
 37 |     'description': '<p>Whether or not the date field is disabled</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false,
 40 |     'default': 'false'
 41 |   },
 42 |   {
 43 |     'name': 'granularity',
 44 |     'description': '<p>The granularity to use for formatting times. Defaults to day if a CalendarDate is provided, otherwise defaults to minute. The field will render segments for each part of the date up to and including the specified granularity</p>\n',
 45 |     'type': '\'day\' | \'hour\' | \'minute\' | \'second\'',
 46 |     'required': false
 47 |   },
 48 |   {
 49 |     'name': 'hideTimeZone',
 50 |     'description': '<p>Whether or not to hide the time zone segment of the field</p>\n',
 51 |     'type': 'boolean',
 52 |     'required': false
 53 |   },
 54 |   {
 55 |     'name': 'hourCycle',
 56 |     'description': '<p>The hour cycle used for formatting times. Defaults to the local preference</p>\n',
 57 |     'type': '12 | 24',
 58 |     'required': false
 59 |   },
 60 |   {
 61 |     'name': 'id',
 62 |     'description': '<p>Id of the element</p>\n',
 63 |     'type': 'string',
 64 |     'required': false
 65 |   },
 66 |   {
 67 |     'name': 'isDateUnavailable',
 68 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
 69 |     'type': 'Matcher',
 70 |     'required': false
 71 |   },
 72 |   {
 73 |     'name': 'locale',
 74 |     'description': '<p>The locale to use for formatting dates</p>\n',
 75 |     'type': 'string',
 76 |     'required': false
 77 |   },
 78 |   {
 79 |     'name': 'maxValue',
 80 |     'description': '<p>The maximum date that can be selected</p>\n',
 81 |     'type': 'DateValue',
 82 |     'required': false
 83 |   },
 84 |   {
 85 |     'name': 'minValue',
 86 |     'description': '<p>The minimum date that can be selected</p>\n',
 87 |     'type': 'DateValue',
 88 |     'required': false
 89 |   },
 90 |   {
 91 |     'name': 'modelValue',
 92 |     'description': '<p>The controlled checked state of the calendar. Can be bound as <code>v-model</code>.</p>\n',
 93 |     'type': 'DateValue | null',
 94 |     'required': false
 95 |   },
 96 |   {
 97 |     'name': 'name',
 98 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 99 |     'type': 'string',
100 |     'required': false
101 |   },
102 |   {
103 |     'name': 'placeholder',
104 |     'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view</p>\n',
105 |     'type': 'DateValue',
106 |     'required': false
107 |   },
108 |   {
109 |     'name': 'readonly',
110 |     'description': '<p>Whether or not the date field is readonly</p>\n',
111 |     'type': 'boolean',
112 |     'required': false,
113 |     'default': 'false'
114 |   },
115 |   {
116 |     'name': 'required',
117 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
118 |     'type': 'boolean',
119 |     'required': false
120 |   },
121 |   {
122 |     'name': 'step',
123 |     'description': '<p>The stepping interval for the time fields. Defaults to <code>1</code>.</p>\n',
124 |     'type': 'DateStep',
125 |     'required': false
126 |   }
127 | ]" />
128 | 
129 | <EmitsTable :data="[
130 |   {
131 |     'name': 'update:modelValue',
132 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
133 |     'type': '[date: DateValue]'
134 |   },
135 |   {
136 |     'name': 'update:placeholder',
137 |     'description': '<p>Event handler called whenever the placeholder value changes</p>\n',
138 |     'type': '[date: DateValue]'
139 |   }
140 | ]" />
141 | 
142 | <SlotsTable :data="[
143 |   {
144 |     'name': 'modelValue',
145 |     'description': '<p>The current date of the field</p>\n',
146 |     'type': 'DateValue | undefined'
147 |   },
148 |   {
149 |     'name': 'segments',
150 |     'description': '<p>The date field segment contents</p>\n',
151 |     'type': '{ part: SegmentPart; value: string; }[]'
152 |   },
153 |   {
154 |     'name': 'isInvalid',
155 |     'description': '<p>Value if the input is invalid</p>\n',
156 |     'type': 'boolean'
157 |   }
158 | ]" />
159 | 
160 | <MethodsTable :data="[
161 |   {
162 |     'name': 'isDateUnavailable',
163 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
164 |     'type': 'Matcher'
165 |   },
166 |   {
167 |     'name': 'setFocusedElement',
168 |     'description': '<p>Helper to set the focused element inside the DateField</p>\n',
169 |     'type': '(el: HTMLElement) => void'
170 |   }
171 | ]" />
172 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerAnchor.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'reference',
19 |     'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\n<p>If not provided will use the current component as anchor.</p>\n',
20 |     'type': 'ReferenceElement',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'rounded',
25 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'width',
31 |     'description': '<p>The width of the arrow in pixels.</p>\n',
32 |     'type': 'number',
33 |     'required': false
34 |   }
35 | ]" />
36 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerCalendar.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <SlotsTable :data="[
 4 |   {
 5 |     'name': 'date',
 6 |     'description': '',
 7 |     'type': 'DateValue'
 8 |   },
 9 |   {
10 |     'name': 'grid',
11 |     'description': '',
12 |     'type': 'Grid<DateValue>[]'
13 |   },
14 |   {
15 |     'name': 'weekDays',
16 |     'description': '',
17 |     'type': 'string[]'
18 |   },
19 |   {
20 |     'name': 'weekStartsOn',
21 |     'description': '',
22 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6'
23 |   },
24 |   {
25 |     'name': 'locale',
26 |     'description': '',
27 |     'type': 'string'
28 |   },
29 |   {
30 |     'name': 'fixedWeeks',
31 |     'description': '',
32 |     'type': 'boolean'
33 |   }
34 | ]" />
35 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'date',
19 |     'description': '<p>The date value for the cell</p>\n',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerCellTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'day',
19 |     'description': '<p>The date value provided to the cell trigger</p>\n',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   },
23 |   {
24 |     'name': 'month',
25 |     'description': '<p>The month in which the cell is rendered</p>\n',
26 |     'type': 'DateValue',
27 |     'required': true
28 |   }
29 | ]" />
30 | 
31 | <SlotsTable :data="[
32 |   {
33 |     'name': 'dayValue',
34 |     'description': '<p>Current day</p>\n',
35 |     'type': 'string'
36 |   },
37 |   {
38 |     'name': 'disabled',
39 |     'description': '<p>Current disable state</p>\n',
40 |     'type': 'boolean'
41 |   },
42 |   {
43 |     'name': 'selected',
44 |     'description': '<p>Current selected state</p>\n',
45 |     'type': 'boolean'
46 |   },
47 |   {
48 |     'name': 'today',
49 |     'description': '<p>Current today state</p>\n',
50 |     'type': 'boolean'
51 |   },
52 |   {
53 |     'name': 'outsideView',
54 |     'description': '<p>Current outside view state</p>\n',
55 |     'type': 'boolean'
56 |   },
57 |   {
58 |     'name': 'outsideVisibleView',
59 |     'description': '<p>Current outside visible view state</p>\n',
60 |     'type': 'boolean'
61 |   },
62 |   {
63 |     'name': 'unavailable',
64 |     'description': '<p>Current unavailable state</p>\n',
65 |     'type': 'boolean'
66 |   }
67 | ]" />
68 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerClose.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'arrowPadding',
 18 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 19 |     'type': 'number',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'avoidCollisions',
 37 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionBoundary',
 43 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 44 |     'type': 'Element | (Element | null)[] | null',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionPadding',
 49 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 50 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'disableOutsidePointerEvents',
 55 |     'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'disableUpdateOnLayoutShift',
 61 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'forceMount',
 67 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'hideWhenDetached',
 73 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 74 |     'type': 'boolean',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'portal',
 79 |     'description': '<p>Props to control the portal wrapped around the content.</p>\n',
 80 |     'type': 'PopoverPortalProps',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'positionStrategy',
 85 |     'description': '<p>The type of CSS position property to use.</p>\n',
 86 |     'type': '\'fixed\' | \'absolute\'',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'prioritizePosition',
 91 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 92 |     'type': 'boolean',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'reference',
 97 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 98 |     'type': 'ReferenceElement',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'side',
103 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
104 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'sideOffset',
109 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
110 |     'type': 'number',
111 |     'required': false
112 |   },
113 |   {
114 |     'name': 'sticky',
115 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
116 |     'type': '\'partial\' | \'always\'',
117 |     'required': false
118 |   },
119 |   {
120 |     'name': 'updatePositionStrategy',
121 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
122 |     'type': '\'always\' | \'optimized\'',
123 |     'required': false
124 |   }
125 | ]" />
126 | 
127 | <EmitsTable :data="[
128 |   {
129 |     'name': 'closeAutoFocus',
130 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
131 |     'type': '[event: Event]'
132 |   },
133 |   {
134 |     'name': 'escapeKeyDown',
135 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
136 |     'type': '[event: KeyboardEvent]'
137 |   },
138 |   {
139 |     'name': 'focusOutside',
140 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
141 |     'type': '[event: FocusOutsideEvent]'
142 |   },
143 |   {
144 |     'name': 'interactOutside',
145 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
146 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
147 |   },
148 |   {
149 |     'name': 'openAutoFocus',
150 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
151 |     'type': '[event: Event]'
152 |   },
153 |   {
154 |     'name': 'pointerDownOutside',
155 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
156 |     'type': '[event: PointerDownOutsideEvent]'
157 |   }
158 | ]" />
159 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerField.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <SlotsTable :data="[
 4 |   {
 5 |     'name': 'segments',
 6 |     'description': '',
 7 |     'type': '{ part: SegmentPart; value: string; }[]'
 8 |   },
 9 |   {
10 |     'name': 'modelValue',
11 |     'description': '',
12 |     'type': 'DateValue | undefined'
13 |   }
14 | ]" />
15 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerGrid.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerGridBody.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerGridHead.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerGridRow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerHeadCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerHeader.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerHeading.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 
19 | <SlotsTable :data="[
20 |   {
21 |     'name': 'headingValue',
22 |     'description': '<p>Current month and year</p>\n',
23 |     'type': 'string'
24 |   }
25 | ]" />
26 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'part',
19 |     'description': '<p>The part of the date to render</p>\n',
20 |     'type': '\'day\' | \'month\' | \'year\' | \'hour\' | \'minute\' | \'second\' | \'dayPeriod\' | \'literal\' | \'timeZoneName\'',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerNext.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nextPage',
19 |     'description': '<p>The function to be used for the next page. Overwrites the <code>nextPage</code> function set on the <code>CalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerPrev.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'prevPage',
19 |     'description': '<p>The function to be used for the prev page. Overwrites the <code>prevPage</code> function set on the <code>CalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultOpen',
 19 |     'description': '<p>The open state of the popover when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 20 |     'type': 'boolean',
 21 |     'required': false,
 22 |     'default': 'false'
 23 |   },
 24 |   {
 25 |     'name': 'defaultPlaceholder',
 26 |     'description': '<p>The default placeholder date</p>\n',
 27 |     'type': 'DateValue',
 28 |     'required': false
 29 |   },
 30 |   {
 31 |     'name': 'defaultValue',
 32 |     'description': '<p>The default value for the calendar</p>\n',
 33 |     'type': 'DateValue',
 34 |     'required': false
 35 |   },
 36 |   {
 37 |     'name': 'dir',
 38 |     'description': '<p>The reading direction of the date field when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 39 |     'type': '\'ltr\' | \'rtl\'',
 40 |     'required': false
 41 |   },
 42 |   {
 43 |     'name': 'disabled',
 44 |     'description': '<p>Whether or not the date field is disabled</p>\n',
 45 |     'type': 'boolean',
 46 |     'required': false,
 47 |     'default': 'false'
 48 |   },
 49 |   {
 50 |     'name': 'fixedWeeks',
 51 |     'description': '<p>Whether or not to always display 6 weeks in the calendar</p>\n',
 52 |     'type': 'boolean',
 53 |     'required': false,
 54 |     'default': 'false'
 55 |   },
 56 |   {
 57 |     'name': 'granularity',
 58 |     'description': '<p>The granularity to use for formatting times. Defaults to day if a CalendarDate is provided, otherwise defaults to minute. The field will render segments for each part of the date up to and including the specified granularity</p>\n',
 59 |     'type': '\'day\' | \'hour\' | \'minute\' | \'second\'',
 60 |     'required': false
 61 |   },
 62 |   {
 63 |     'name': 'hideTimeZone',
 64 |     'description': '<p>Whether or not to hide the time zone segment of the field</p>\n',
 65 |     'type': 'boolean',
 66 |     'required': false
 67 |   },
 68 |   {
 69 |     'name': 'hourCycle',
 70 |     'description': '<p>The hour cycle used for formatting times. Defaults to the local preference</p>\n',
 71 |     'type': '12 | 24',
 72 |     'required': false
 73 |   },
 74 |   {
 75 |     'name': 'id',
 76 |     'description': '<p>Id of the element</p>\n',
 77 |     'type': 'string',
 78 |     'required': false
 79 |   },
 80 |   {
 81 |     'name': 'isDateDisabled',
 82 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
 83 |     'type': 'Matcher',
 84 |     'required': false
 85 |   },
 86 |   {
 87 |     'name': 'isDateUnavailable',
 88 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
 89 |     'type': 'Matcher',
 90 |     'required': false
 91 |   },
 92 |   {
 93 |     'name': 'locale',
 94 |     'description': '<p>The locale to use for formatting dates</p>\n',
 95 |     'type': 'string',
 96 |     'required': false,
 97 |     'default': '\'en\''
 98 |   },
 99 |   {
100 |     'name': 'maxValue',
101 |     'description': '<p>The maximum date that can be selected</p>\n',
102 |     'type': 'DateValue',
103 |     'required': false
104 |   },
105 |   {
106 |     'name': 'minValue',
107 |     'description': '<p>The minimum date that can be selected</p>\n',
108 |     'type': 'DateValue',
109 |     'required': false
110 |   },
111 |   {
112 |     'name': 'modal',
113 |     'description': '<p>The modality of the popover. When set to true, interaction with outside elements will be disabled and only popover content will be visible to screen readers.</p>\n',
114 |     'type': 'boolean',
115 |     'required': false,
116 |     'default': 'false'
117 |   },
118 |   {
119 |     'name': 'modelValue',
120 |     'description': '<p>The controlled checked state of the calendar. Can be bound as <code>v-model</code>.</p>\n',
121 |     'type': 'DateValue | null',
122 |     'required': false
123 |   },
124 |   {
125 |     'name': 'name',
126 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
127 |     'type': 'string',
128 |     'required': false
129 |   },
130 |   {
131 |     'name': 'numberOfMonths',
132 |     'description': '<p>The number of months to display at once</p>\n',
133 |     'type': 'number',
134 |     'required': false,
135 |     'default': '1'
136 |   },
137 |   {
138 |     'name': 'open',
139 |     'description': '<p>The controlled open state of the popover.</p>\n',
140 |     'type': 'boolean',
141 |     'required': false
142 |   },
143 |   {
144 |     'name': 'pagedNavigation',
145 |     'description': '<p>This property causes the previous and next buttons to navigate by the number of months displayed at once, rather than one month</p>\n',
146 |     'type': 'boolean',
147 |     'required': false,
148 |     'default': 'false'
149 |   },
150 |   {
151 |     'name': 'placeholder',
152 |     'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view</p>\n',
153 |     'type': 'DateValue',
154 |     'required': false
155 |   },
156 |   {
157 |     'name': 'preventDeselect',
158 |     'description': '<p>Whether or not to prevent the user from deselecting a date without selecting another date first</p>\n',
159 |     'type': 'boolean',
160 |     'required': false,
161 |     'default': 'false'
162 |   },
163 |   {
164 |     'name': 'readonly',
165 |     'description': '<p>Whether or not the date field is readonly</p>\n',
166 |     'type': 'boolean',
167 |     'required': false,
168 |     'default': 'false'
169 |   },
170 |   {
171 |     'name': 'required',
172 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
173 |     'type': 'boolean',
174 |     'required': false
175 |   },
176 |   {
177 |     'name': 'step',
178 |     'description': '<p>The stepping interval for the time fields. Defaults to <code>1</code>.</p>\n',
179 |     'type': 'DateStep',
180 |     'required': false
181 |   },
182 |   {
183 |     'name': 'weekdayFormat',
184 |     'description': '<p>The format to use for the weekday strings provided via the weekdays slot prop</p>\n',
185 |     'type': '\'narrow\' | \'short\' | \'long\'',
186 |     'required': false,
187 |     'default': '\'narrow\''
188 |   },
189 |   {
190 |     'name': 'weekStartsOn',
191 |     'description': '<p>The day of the week to start the calendar on</p>\n',
192 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6',
193 |     'required': false,
194 |     'default': '0'
195 |   }
196 | ]" />
197 | 
198 | <EmitsTable :data="[
199 |   {
200 |     'name': 'update:modelValue',
201 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
202 |     'type': '[date: DateValue]'
203 |   },
204 |   {
205 |     'name': 'update:open',
206 |     'description': '<p>Event handler called when the open state of the submenu changes.</p>\n',
207 |     'type': '[value: boolean]'
208 |   },
209 |   {
210 |     'name': 'update:placeholder',
211 |     'description': '<p>Event handler called whenever the placeholder value changes</p>\n',
212 |     'type': '[date: DateValue]'
213 |   }
214 | ]" />
215 | 
216 | <MethodsTable :data="[
217 |   {
218 |     'name': 'isDateDisabled',
219 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
220 |     'type': 'Matcher'
221 |   },
222 |   {
223 |     'name': 'isDateUnavailable',
224 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
225 |     'type': 'Matcher'
226 |   }
227 | ]" />
228 | 


--------------------------------------------------------------------------------
/docs/content/meta/DatePickerTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangeFieldInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'part',
19 |     'description': '<p>The part of the date to render</p>\n',
20 |     'type': '\'day\' | \'month\' | \'year\' | \'hour\' | \'minute\' | \'second\' | \'dayPeriod\' | \'literal\' | \'timeZoneName\'',
21 |     'required': true
22 |   },
23 |   {
24 |     'name': 'type',
25 |     'description': '<p>The type of field to render (start or end)</p>\n',
26 |     'type': '\'start\' | \'end\'',
27 |     'required': true
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangeFieldRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultPlaceholder',
 19 |     'description': '<p>The default placeholder date</p>\n',
 20 |     'type': 'DateValue',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'defaultValue',
 25 |     'description': '<p>The default value for the calendar</p>\n',
 26 |     'type': 'DateRange',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'dir',
 31 |     'description': '<p>The reading direction of the date field when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 32 |     'type': '\'ltr\' | \'rtl\'',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'disabled',
 37 |     'description': '<p>Whether or not the date field is disabled</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false,
 40 |     'default': 'false'
 41 |   },
 42 |   {
 43 |     'name': 'granularity',
 44 |     'description': '<p>The granularity to use for formatting times. Defaults to day if a CalendarDate is provided, otherwise defaults to minute. The field will render segments for each part of the date up to and including the specified granularity</p>\n',
 45 |     'type': '\'day\' | \'hour\' | \'minute\' | \'second\'',
 46 |     'required': false
 47 |   },
 48 |   {
 49 |     'name': 'hideTimeZone',
 50 |     'description': '<p>Whether or not to hide the time zone segment of the field</p>\n',
 51 |     'type': 'boolean',
 52 |     'required': false
 53 |   },
 54 |   {
 55 |     'name': 'hourCycle',
 56 |     'description': '<p>The hour cycle used for formatting times. Defaults to the local preference</p>\n',
 57 |     'type': '12 | 24',
 58 |     'required': false
 59 |   },
 60 |   {
 61 |     'name': 'id',
 62 |     'description': '<p>Id of the element</p>\n',
 63 |     'type': 'string',
 64 |     'required': false
 65 |   },
 66 |   {
 67 |     'name': 'isDateUnavailable',
 68 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
 69 |     'type': 'Matcher',
 70 |     'required': false
 71 |   },
 72 |   {
 73 |     'name': 'locale',
 74 |     'description': '<p>The locale to use for formatting dates</p>\n',
 75 |     'type': 'string',
 76 |     'required': false
 77 |   },
 78 |   {
 79 |     'name': 'maxValue',
 80 |     'description': '<p>The maximum date that can be selected</p>\n',
 81 |     'type': 'DateValue',
 82 |     'required': false
 83 |   },
 84 |   {
 85 |     'name': 'minValue',
 86 |     'description': '<p>The minimum date that can be selected</p>\n',
 87 |     'type': 'DateValue',
 88 |     'required': false
 89 |   },
 90 |   {
 91 |     'name': 'modelValue',
 92 |     'description': '<p>The controlled checked state of the calendar. Can be bound as <code>v-model</code>.</p>\n',
 93 |     'type': 'DateRange | null',
 94 |     'required': false
 95 |   },
 96 |   {
 97 |     'name': 'name',
 98 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 99 |     'type': 'string',
100 |     'required': false
101 |   },
102 |   {
103 |     'name': 'placeholder',
104 |     'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view</p>\n',
105 |     'type': 'DateValue',
106 |     'required': false
107 |   },
108 |   {
109 |     'name': 'readonly',
110 |     'description': '<p>Whether or not the date field is readonly</p>\n',
111 |     'type': 'boolean',
112 |     'required': false,
113 |     'default': 'false'
114 |   },
115 |   {
116 |     'name': 'required',
117 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
118 |     'type': 'boolean',
119 |     'required': false
120 |   },
121 |   {
122 |     'name': 'step',
123 |     'description': '<p>The stepping interval for the time fields. Defaults to <code>1</code>.</p>\n',
124 |     'type': 'DateStep',
125 |     'required': false
126 |   }
127 | ]" />
128 | 
129 | <EmitsTable :data="[
130 |   {
131 |     'name': 'update:modelValue',
132 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
133 |     'type': '[DateRange]'
134 |   },
135 |   {
136 |     'name': 'update:placeholder',
137 |     'description': '<p>Event handler called whenever the placeholder value changes</p>\n',
138 |     'type': '[date: DateValue]'
139 |   }
140 | ]" />
141 | 
142 | <SlotsTable :data="[
143 |   {
144 |     'name': 'modelValue',
145 |     'description': '',
146 |     'type': 'DateRange | null'
147 |   },
148 |   {
149 |     'name': 'segments',
150 |     'description': '',
151 |     'type': '{ start: { part: SegmentPart; value: string; }[]; end: { part: SegmentPart; value: string; }[]; }'
152 |   }
153 | ]" />
154 | 
155 | <MethodsTable :data="[
156 |   {
157 |     'name': 'isDateUnavailable',
158 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
159 |     'type': 'Matcher'
160 |   },
161 |   {
162 |     'name': 'setFocusedElement',
163 |     'description': '',
164 |     'type': '(el: HTMLElement) => void'
165 |   }
166 | ]" />
167 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerAnchor.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'reference',
19 |     'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\n<p>If not provided will use the current component as anchor.</p>\n',
20 |     'type': 'ReferenceElement',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'rounded',
25 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'width',
31 |     'description': '<p>The width of the arrow in pixels.</p>\n',
32 |     'type': 'number',
33 |     'required': false
34 |   }
35 | ]" />
36 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerCalendar.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <SlotsTable :data="[
 4 |   {
 5 |     'name': 'date',
 6 |     'description': '',
 7 |     'type': 'DateValue'
 8 |   },
 9 |   {
10 |     'name': 'grid',
11 |     'description': '',
12 |     'type': 'Grid<DateValue>[]'
13 |   },
14 |   {
15 |     'name': 'weekDays',
16 |     'description': '',
17 |     'type': 'string[]'
18 |   },
19 |   {
20 |     'name': 'weekStartsOn',
21 |     'description': '',
22 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6'
23 |   },
24 |   {
25 |     'name': 'locale',
26 |     'description': '',
27 |     'type': 'string'
28 |   },
29 |   {
30 |     'name': 'fixedWeeks',
31 |     'description': '',
32 |     'type': 'boolean'
33 |   }
34 | ]" />
35 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'date',
19 |     'description': '',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerCellTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'day',
19 |     'description': '',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   },
23 |   {
24 |     'name': 'month',
25 |     'description': '',
26 |     'type': 'DateValue',
27 |     'required': true
28 |   }
29 | ]" />
30 | 
31 | <SlotsTable :data="[
32 |   {
33 |     'name': 'dayValue',
34 |     'description': '<p>Current day</p>\n',
35 |     'type': 'string'
36 |   },
37 |   {
38 |     'name': 'disabled',
39 |     'description': '<p>Current disable state</p>\n',
40 |     'type': 'boolean'
41 |   },
42 |   {
43 |     'name': 'selected',
44 |     'description': '<p>Current selected state</p>\n',
45 |     'type': 'boolean'
46 |   },
47 |   {
48 |     'name': 'today',
49 |     'description': '<p>Current today state</p>\n',
50 |     'type': 'boolean'
51 |   },
52 |   {
53 |     'name': 'outsideView',
54 |     'description': '<p>Current outside view state</p>\n',
55 |     'type': 'boolean'
56 |   },
57 |   {
58 |     'name': 'outsideVisibleView',
59 |     'description': '<p>Current outside visible view state</p>\n',
60 |     'type': 'boolean'
61 |   },
62 |   {
63 |     'name': 'unavailable',
64 |     'description': '<p>Current unavailable state</p>\n',
65 |     'type': 'boolean'
66 |   },
67 |   {
68 |     'name': 'highlighted',
69 |     'description': '<p>Current highlighted state</p>\n',
70 |     'type': 'boolean'
71 |   },
72 |   {
73 |     'name': 'highlightedStart',
74 |     'description': '<p>Current highlighted start state</p>\n',
75 |     'type': 'boolean'
76 |   },
77 |   {
78 |     'name': 'highlightedEnd',
79 |     'description': '<p>Current highlighted end state</p>\n',
80 |     'type': 'boolean'
81 |   },
82 |   {
83 |     'name': 'selectionStart',
84 |     'description': '<p>Current selection start state</p>\n',
85 |     'type': 'boolean'
86 |   },
87 |   {
88 |     'name': 'selectionEnd',
89 |     'description': '<p>Current selection end state</p>\n',
90 |     'type': 'boolean'
91 |   }
92 | ]" />
93 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerClose.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'arrowPadding',
 18 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 19 |     'type': 'number',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'avoidCollisions',
 37 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionBoundary',
 43 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 44 |     'type': 'Element | (Element | null)[] | null',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionPadding',
 49 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 50 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'disableOutsidePointerEvents',
 55 |     'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'disableUpdateOnLayoutShift',
 61 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'forceMount',
 67 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'hideWhenDetached',
 73 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 74 |     'type': 'boolean',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'portal',
 79 |     'description': '<p>Props to control the portal wrapped around the content.</p>\n',
 80 |     'type': 'PopoverPortalProps',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'positionStrategy',
 85 |     'description': '<p>The type of CSS position property to use.</p>\n',
 86 |     'type': '\'fixed\' | \'absolute\'',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'prioritizePosition',
 91 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 92 |     'type': 'boolean',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'reference',
 97 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 98 |     'type': 'ReferenceElement',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'side',
103 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
104 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'sideOffset',
109 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
110 |     'type': 'number',
111 |     'required': false
112 |   },
113 |   {
114 |     'name': 'sticky',
115 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
116 |     'type': '\'partial\' | \'always\'',
117 |     'required': false
118 |   },
119 |   {
120 |     'name': 'updatePositionStrategy',
121 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
122 |     'type': '\'always\' | \'optimized\'',
123 |     'required': false
124 |   }
125 | ]" />
126 | 
127 | <EmitsTable :data="[
128 |   {
129 |     'name': 'closeAutoFocus',
130 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
131 |     'type': '[event: Event]'
132 |   },
133 |   {
134 |     'name': 'escapeKeyDown',
135 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
136 |     'type': '[event: KeyboardEvent]'
137 |   },
138 |   {
139 |     'name': 'focusOutside',
140 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
141 |     'type': '[event: FocusOutsideEvent]'
142 |   },
143 |   {
144 |     'name': 'interactOutside',
145 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
146 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
147 |   },
148 |   {
149 |     'name': 'openAutoFocus',
150 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
151 |     'type': '[event: Event]'
152 |   },
153 |   {
154 |     'name': 'pointerDownOutside',
155 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
156 |     'type': '[event: PointerDownOutsideEvent]'
157 |   }
158 | ]" />
159 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerField.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <SlotsTable :data="[
 4 |   {
 5 |     'name': 'segments',
 6 |     'description': '',
 7 |     'type': '{ start: { part: SegmentPart; value: string; }[]; end: { part: SegmentPart; value: string; }[]; }'
 8 |   },
 9 |   {
10 |     'name': 'modelValue',
11 |     'description': '',
12 |     'type': 'DateRange | null'
13 |   }
14 | ]" />
15 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerGrid.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerGridBody.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerGridHead.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerGridRow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerHeadCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerHeader.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerHeading.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 
19 | <SlotsTable :data="[
20 |   {
21 |     'name': 'headingValue',
22 |     'description': '<p>Current month and year</p>\n',
23 |     'type': 'string'
24 |   }
25 | ]" />
26 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'part',
19 |     'description': '<p>The part of the date to render</p>\n',
20 |     'type': '\'day\' | \'month\' | \'year\' | \'hour\' | \'minute\' | \'second\' | \'dayPeriod\' | \'literal\' | \'timeZoneName\'',
21 |     'required': true
22 |   },
23 |   {
24 |     'name': 'type',
25 |     'description': '<p>The type of field to render (start or end)</p>\n',
26 |     'type': '\'start\' | \'end\'',
27 |     'required': true
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerNext.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nextPage',
19 |     'description': '<p>The function to be used for the next page. Overwrites the <code>nextPage</code> function set on the <code>RangeCalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerPrev.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'prevPage',
19 |     'description': '<p>The function to be used for the prev page. Overwrites the <code>prevPage</code> function set on the <code>RangeCalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'allowNonContiguousRanges',
  6 |     'description': '<p>When combined with <code>isDateUnavailable</code>, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.</p>\n',
  7 |     'type': 'boolean',
  8 |     'required': false,
  9 |     'default': 'false'
 10 |   },
 11 |   {
 12 |     'name': 'as',
 13 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 14 |     'type': 'AsTag | Component',
 15 |     'required': false,
 16 |     'default': '\'div\''
 17 |   },
 18 |   {
 19 |     'name': 'asChild',
 20 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 21 |     'type': 'boolean',
 22 |     'required': false
 23 |   },
 24 |   {
 25 |     'name': 'defaultOpen',
 26 |     'description': '<p>The open state of the popover when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 27 |     'type': 'boolean',
 28 |     'required': false,
 29 |     'default': 'false'
 30 |   },
 31 |   {
 32 |     'name': 'defaultPlaceholder',
 33 |     'description': '<p>The default placeholder date</p>\n',
 34 |     'type': 'DateValue',
 35 |     'required': false
 36 |   },
 37 |   {
 38 |     'name': 'defaultValue',
 39 |     'description': '<p>The default value for the calendar</p>\n',
 40 |     'type': 'DateRange',
 41 |     'required': false,
 42 |     'default': '{ start: undefined, end: undefined }'
 43 |   },
 44 |   {
 45 |     'name': 'dir',
 46 |     'description': '<p>The reading direction of the date field when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 47 |     'type': '\'ltr\' | \'rtl\'',
 48 |     'required': false
 49 |   },
 50 |   {
 51 |     'name': 'disabled',
 52 |     'description': '<p>Whether or not the date field is disabled</p>\n',
 53 |     'type': 'boolean',
 54 |     'required': false,
 55 |     'default': 'false'
 56 |   },
 57 |   {
 58 |     'name': 'fixedDate',
 59 |     'description': '<p>Which part of the range should be fixed</p>\n',
 60 |     'type': '\'start\' | \'end\'',
 61 |     'required': false
 62 |   },
 63 |   {
 64 |     'name': 'fixedWeeks',
 65 |     'description': '<p>Whether or not to always display 6 weeks in the calendar</p>\n',
 66 |     'type': 'boolean',
 67 |     'required': false,
 68 |     'default': 'false'
 69 |   },
 70 |   {
 71 |     'name': 'granularity',
 72 |     'description': '<p>The granularity to use for formatting times. Defaults to day if a CalendarDate is provided, otherwise defaults to minute. The field will render segments for each part of the date up to and including the specified granularity</p>\n',
 73 |     'type': '\'day\' | \'hour\' | \'minute\' | \'second\'',
 74 |     'required': false
 75 |   },
 76 |   {
 77 |     'name': 'hideTimeZone',
 78 |     'description': '<p>Whether or not to hide the time zone segment of the field</p>\n',
 79 |     'type': 'boolean',
 80 |     'required': false
 81 |   },
 82 |   {
 83 |     'name': 'hourCycle',
 84 |     'description': '<p>The hour cycle used for formatting times. Defaults to the local preference</p>\n',
 85 |     'type': '12 | 24',
 86 |     'required': false
 87 |   },
 88 |   {
 89 |     'name': 'id',
 90 |     'description': '<p>Id of the element</p>\n',
 91 |     'type': 'string',
 92 |     'required': false
 93 |   },
 94 |   {
 95 |     'name': 'isDateDisabled',
 96 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
 97 |     'type': 'Matcher',
 98 |     'required': false
 99 |   },
100 |   {
101 |     'name': 'isDateHighlightable',
102 |     'description': '<p>A function that returns whether or not a date is hightable</p>\n',
103 |     'type': 'Matcher',
104 |     'required': false
105 |   },
106 |   {
107 |     'name': 'isDateUnavailable',
108 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
109 |     'type': 'Matcher',
110 |     'required': false
111 |   },
112 |   {
113 |     'name': 'locale',
114 |     'description': '<p>The locale to use for formatting dates</p>\n',
115 |     'type': 'string',
116 |     'required': false,
117 |     'default': '\'en\''
118 |   },
119 |   {
120 |     'name': 'maxValue',
121 |     'description': '<p>The maximum date that can be selected</p>\n',
122 |     'type': 'DateValue',
123 |     'required': false
124 |   },
125 |   {
126 |     'name': 'minValue',
127 |     'description': '<p>The minimum date that can be selected</p>\n',
128 |     'type': 'DateValue',
129 |     'required': false
130 |   },
131 |   {
132 |     'name': 'modal',
133 |     'description': '<p>The modality of the popover. When set to true, interaction with outside elements will be disabled and only popover content will be visible to screen readers.</p>\n',
134 |     'type': 'boolean',
135 |     'required': false,
136 |     'default': 'false'
137 |   },
138 |   {
139 |     'name': 'modelValue',
140 |     'description': '<p>The controlled checked state of the calendar. Can be bound as <code>v-model</code>.</p>\n',
141 |     'type': 'DateRange | null',
142 |     'required': false
143 |   },
144 |   {
145 |     'name': 'name',
146 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
147 |     'type': 'string',
148 |     'required': false
149 |   },
150 |   {
151 |     'name': 'numberOfMonths',
152 |     'description': '<p>The number of months to display at once</p>\n',
153 |     'type': 'number',
154 |     'required': false,
155 |     'default': '1'
156 |   },
157 |   {
158 |     'name': 'open',
159 |     'description': '<p>The controlled open state of the popover.</p>\n',
160 |     'type': 'boolean',
161 |     'required': false
162 |   },
163 |   {
164 |     'name': 'pagedNavigation',
165 |     'description': '<p>This property causes the previous and next buttons to navigate by the number of months displayed at once, rather than one month</p>\n',
166 |     'type': 'boolean',
167 |     'required': false,
168 |     'default': 'false'
169 |   },
170 |   {
171 |     'name': 'placeholder',
172 |     'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view</p>\n',
173 |     'type': 'DateValue',
174 |     'required': false
175 |   },
176 |   {
177 |     'name': 'preventDeselect',
178 |     'description': '<p>Whether or not to prevent the user from deselecting a date without selecting another date first</p>\n',
179 |     'type': 'boolean',
180 |     'required': false,
181 |     'default': 'false'
182 |   },
183 |   {
184 |     'name': 'readonly',
185 |     'description': '<p>Whether or not the date field is readonly</p>\n',
186 |     'type': 'boolean',
187 |     'required': false,
188 |     'default': 'false'
189 |   },
190 |   {
191 |     'name': 'required',
192 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
193 |     'type': 'boolean',
194 |     'required': false
195 |   },
196 |   {
197 |     'name': 'step',
198 |     'description': '<p>The stepping interval for the time fields. Defaults to <code>1</code>.</p>\n',
199 |     'type': 'DateStep',
200 |     'required': false
201 |   },
202 |   {
203 |     'name': 'weekdayFormat',
204 |     'description': '<p>The format to use for the weekday strings provided via the weekdays slot prop</p>\n',
205 |     'type': '\'narrow\' | \'short\' | \'long\'',
206 |     'required': false,
207 |     'default': '\'narrow\''
208 |   },
209 |   {
210 |     'name': 'weekStartsOn',
211 |     'description': '<p>The day of the week to start the calendar on</p>\n',
212 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6',
213 |     'required': false,
214 |     'default': '0'
215 |   }
216 | ]" />
217 | 
218 | <EmitsTable :data="[
219 |   {
220 |     'name': 'update:modelValue',
221 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
222 |     'type': '[date: DateRange]'
223 |   },
224 |   {
225 |     'name': 'update:open',
226 |     'description': '<p>Event handler called when the open state of the submenu changes.</p>\n',
227 |     'type': '[value: boolean]'
228 |   },
229 |   {
230 |     'name': 'update:placeholder',
231 |     'description': '<p>Event handler called whenever the placeholder value changes</p>\n',
232 |     'type': '[date: DateValue]'
233 |   },
234 |   {
235 |     'name': 'update:startValue',
236 |     'description': '<p>Event handler called whenever the start value changes</p>\n',
237 |     'type': '[date: DateValue]'
238 |   }
239 | ]" />
240 | 
241 | <SlotsTable :data="[
242 |   {
243 |     'name': 'modelValue',
244 |     'description': '',
245 |     'type': 'DateRange'
246 |   },
247 |   {
248 |     'name': 'open',
249 |     'description': '',
250 |     'type': 'boolean'
251 |   }
252 | ]" />
253 | 
254 | <MethodsTable :data="[
255 |   {
256 |     'name': 'isDateDisabled',
257 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
258 |     'type': 'Matcher'
259 |   },
260 |   {
261 |     'name': 'isDateUnavailable',
262 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
263 |     'type': 'Matcher'
264 |   },
265 |   {
266 |     'name': 'isDateHighlightable',
267 |     'description': '<p>A function that returns whether or not a date is hightable</p>\n',
268 |     'type': 'Matcher'
269 |   }
270 | ]" />
271 | 


--------------------------------------------------------------------------------
/docs/content/meta/DateRangePickerTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogClose.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogContent.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disableOutsidePointerEvents',
19 |     'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'forceMount',
25 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'trapFocus',
31 |     'description': '<p>When <code>true</code>, focus cannot escape the <code>Content</code> via keyboard,\npointer, or a programmatic focus.</p>\n',
32 |     'type': 'boolean',
33 |     'required': false
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'closeAutoFocus',
40 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
41 |     'type': '[event: Event]'
42 |   },
43 |   {
44 |     'name': 'escapeKeyDown',
45 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
46 |     'type': '[event: KeyboardEvent]'
47 |   },
48 |   {
49 |     'name': 'focusOutside',
50 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
51 |     'type': '[event: FocusOutsideEvent]'
52 |   },
53 |   {
54 |     'name': 'interactOutside',
55 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
56 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
57 |   },
58 |   {
59 |     'name': 'openAutoFocus',
60 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
61 |     'type': '[event: Event]'
62 |   },
63 |   {
64 |     'name': 'pointerDownOutside',
65 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
66 |     'type': '[event: PointerDownOutsideEvent]'
67 |   }
68 | ]" />
69 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogDescription.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'p\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogOverlay.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false,
 9 |     'default': 'false'
10 |   },
11 |   {
12 |     'name': 'modal',
13 |     'description': '<p>The modality of the dialog When set to <code>true</code>, &lt;br&gt;\ninteraction with outside elements will be disabled and only dialog content will be visible to screen readers.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false,
16 |     'default': 'true'
17 |   },
18 |   {
19 |     'name': 'open',
20 |     'description': '<p>The controlled open state of the dialog. Can be binded as <code>v-model:open</code>.</p>\n',
21 |     'type': 'boolean',
22 |     'required': false
23 |   }
24 | ]" />
25 | 
26 | <EmitsTable :data="[
27 |   {
28 |     'name': 'update:open',
29 |     'description': '<p>Event handler called when the open state of the dialog changes.</p>\n',
30 |     'type': '[value: boolean]'
31 |   }
32 | ]" />
33 | 
34 | <SlotsTable :data="[
35 |   {
36 |     'name': 'open',
37 |     'description': '<p>Current open state</p>\n',
38 |     'type': 'boolean'
39 |   },
40 |   {
41 |     'name': 'close',
42 |     'description': '<p>Close the dialog</p>\n',
43 |     'type': '(): void'
44 |   }
45 | ]" />
46 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogTitle.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'h2\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DialogTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'rounded',
26 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'width',
32 |     'description': '<p>The width of the arrow in pixels.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': '10'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuCheckboxItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'modelValue',
25 |     'description': '<p>The controlled checked state of the item. Can be used as <code>v-model</code>.</p>\n',
26 |     'type': 'false | true | \'indeterminate\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'textValue',
31 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
32 |     'type': 'string',
33 |     'required': false
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
41 |     'type': '[event: Event]'
42 |   },
43 |   {
44 |     'name': 'update:modelValue',
45 |     'description': '<p>Event handler called when the value changes.</p>\n',
46 |     'type': '[payload: boolean]'
47 |   }
48 | ]" />
49 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'arrowPadding',
 18 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 19 |     'type': 'number',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'avoidCollisions',
 37 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionBoundary',
 43 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 44 |     'type': 'Element | (Element | null)[] | null',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionPadding',
 49 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 50 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'disableUpdateOnLayoutShift',
 55 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'forceMount',
 61 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'hideWhenDetached',
 67 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'loop',
 73 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
 74 |     'type': 'boolean',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'positionStrategy',
 79 |     'description': '<p>The type of CSS position property to use.</p>\n',
 80 |     'type': '\'fixed\' | \'absolute\'',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'prioritizePosition',
 85 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 86 |     'type': 'boolean',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'reference',
 91 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 92 |     'type': 'ReferenceElement',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'side',
 97 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
 98 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'sideOffset',
103 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
104 |     'type': 'number',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'sticky',
109 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
110 |     'type': '\'partial\' | \'always\'',
111 |     'required': false
112 |   },
113 |   {
114 |     'name': 'updatePositionStrategy',
115 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
116 |     'type': '\'always\' | \'optimized\'',
117 |     'required': false
118 |   }
119 | ]" />
120 | 
121 | <EmitsTable :data="[
122 |   {
123 |     'name': 'closeAutoFocus',
124 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
125 |     'type': '[event: Event]'
126 |   },
127 |   {
128 |     'name': 'escapeKeyDown',
129 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
130 |     'type': '[event: KeyboardEvent]'
131 |   },
132 |   {
133 |     'name': 'focusOutside',
134 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
135 |     'type': '[event: FocusOutsideEvent]'
136 |   },
137 |   {
138 |     'name': 'interactOutside',
139 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
140 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
141 |   },
142 |   {
143 |     'name': 'pointerDownOutside',
144 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
145 |     'type': '[event: PointerDownOutsideEvent]'
146 |   }
147 | ]" />
148 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'select',
34 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
35 |     'type': '[event: Event]'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuItemIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuLabel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuRadioGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'modelValue',
19 |     'description': '<p>The value of the selected item in the group.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <EmitsTable :data="[
26 |   {
27 |     'name': 'update:modelValue',
28 |     'description': '<p>Event handler called when the value changes.</p>\n',
29 |     'type': '[payload: string]'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuRadioItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'value',
31 |     'description': '<p>The unique value of the item.</p>\n',
32 |     'type': 'string',
33 |     'required': true
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
41 |     'type': '[event: Event]'
42 |   }
43 | ]" />
44 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the dropdown menu when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'dir',
12 |     'description': '<p>The reading direction of the combobox when applicable.</p>\n<p>If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
13 |     'type': '\'ltr\' | \'rtl\'',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'modal',
18 |     'description': '<p>The modality of the dropdown menu.</p>\n<p>When set to <code>true</code>, interaction with outside elements will be disabled and only menu content will be visible to screen readers.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false,
21 |     'default': 'true'
22 |   },
23 |   {
24 |     'name': 'open',
25 |     'description': '<p>The controlled open state of the menu. Can be used as <code>v-model:open</code>.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'update:open',
34 |     'description': '<p>Event handler called when the open state of the submenu changes.</p>\n',
35 |     'type': '[payload: boolean]'
36 |   }
37 | ]" />
38 | 
39 | <SlotsTable :data="[
40 |   {
41 |     'name': 'open',
42 |     'description': '<p>Current open state</p>\n',
43 |     'type': 'boolean'
44 |   }
45 | ]" />
46 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuSeparator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuSub.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the dropdown menu when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'open',
12 |     'description': '<p>The controlled open state of the menu. Can be used as <code>v-model:open</code>.</p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   }
16 | ]" />
17 | 
18 | <EmitsTable :data="[
19 |   {
20 |     'name': 'update:open',
21 |     'description': '<p>Event handler called when the open state of the submenu changes.</p>\n',
22 |     'type': '[payload: boolean]'
23 |   }
24 | ]" />
25 | 
26 | <SlotsTable :data="[
27 |   {
28 |     'name': 'open',
29 |     'description': '<p>Current open state</p>\n',
30 |     'type': 'boolean'
31 |   }
32 | ]" />
33 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuSubContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'alignOffset',
  6 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
  7 |     'type': 'number',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'arrowPadding',
 12 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'as',
 18 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 19 |     'type': 'AsTag | Component',
 20 |     'required': false,
 21 |     'default': '\'div\''
 22 |   },
 23 |   {
 24 |     'name': 'asChild',
 25 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 26 |     'type': 'boolean',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'avoidCollisions',
 31 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'collisionBoundary',
 37 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 38 |     'type': 'Element | (Element | null)[] | null',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionPadding',
 43 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 44 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'disableUpdateOnLayoutShift',
 49 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 50 |     'type': 'boolean',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'forceMount',
 55 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'hideWhenDetached',
 61 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'loop',
 67 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'positionStrategy',
 73 |     'description': '<p>The type of CSS position property to use.</p>\n',
 74 |     'type': '\'fixed\' | \'absolute\'',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'prioritizePosition',
 79 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 80 |     'type': 'boolean',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'reference',
 85 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 86 |     'type': 'ReferenceElement',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'sideOffset',
 91 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
 92 |     'type': 'number',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'sticky',
 97 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
 98 |     'type': '\'partial\' | \'always\'',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'updatePositionStrategy',
103 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
104 |     'type': '\'always\' | \'optimized\'',
105 |     'required': false
106 |   }
107 | ]" />
108 | 
109 | <EmitsTable :data="[
110 |   {
111 |     'name': 'closeAutoFocus',
112 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
113 |     'type': '[event: Event]'
114 |   },
115 |   {
116 |     'name': 'entryFocus',
117 |     'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\n',
118 |     'type': '[event: Event]'
119 |   },
120 |   {
121 |     'name': 'escapeKeyDown',
122 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
123 |     'type': '[event: KeyboardEvent]'
124 |   },
125 |   {
126 |     'name': 'focusOutside',
127 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
128 |     'type': '[event: FocusOutsideEvent]'
129 |   },
130 |   {
131 |     'name': 'interactOutside',
132 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
133 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
134 |   },
135 |   {
136 |     'name': 'openAutoFocus',
137 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
138 |     'type': '[event: Event]'
139 |   },
140 |   {
141 |     'name': 'pointerDownOutside',
142 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
143 |     'type': '[event: PointerDownOutsideEvent]'
144 |   }
145 | ]" />
146 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuSubTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/DropdownMenuTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/EditableArea.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/EditableCancelTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/EditableEditTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/EditableInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'input\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/EditablePreview.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/EditableRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'activationMode',
  6 |     'description': '<p>The activation event of the editable field</p>\n',
  7 |     'type': '\'dblclick\' | \'focus\' | \'none\'',
  8 |     'required': false,
  9 |     'default': '\'focus\''
 10 |   },
 11 |   {
 12 |     'name': 'as',
 13 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 14 |     'type': 'AsTag | Component',
 15 |     'required': false,
 16 |     'default': '\'div\''
 17 |   },
 18 |   {
 19 |     'name': 'asChild',
 20 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 21 |     'type': 'boolean',
 22 |     'required': false
 23 |   },
 24 |   {
 25 |     'name': 'autoResize',
 26 |     'description': '<p>Whether the editable field should auto resize</p>\n',
 27 |     'type': 'boolean',
 28 |     'required': false,
 29 |     'default': 'false'
 30 |   },
 31 |   {
 32 |     'name': 'defaultValue',
 33 |     'description': '<p>The default value of the editable field</p>\n',
 34 |     'type': 'string',
 35 |     'required': false
 36 |   },
 37 |   {
 38 |     'name': 'dir',
 39 |     'description': '<p>The reading direction of the calendar when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 40 |     'type': '\'ltr\' | \'rtl\'',
 41 |     'required': false
 42 |   },
 43 |   {
 44 |     'name': 'disabled',
 45 |     'description': '<p>Whether the editable field is disabled</p>\n',
 46 |     'type': 'boolean',
 47 |     'required': false,
 48 |     'default': 'false'
 49 |   },
 50 |   {
 51 |     'name': 'id',
 52 |     'description': '<p>The id of the field</p>\n',
 53 |     'type': 'string',
 54 |     'required': false
 55 |   },
 56 |   {
 57 |     'name': 'maxLength',
 58 |     'description': '<p>The maximum number of characters allowed</p>\n',
 59 |     'type': 'number',
 60 |     'required': false
 61 |   },
 62 |   {
 63 |     'name': 'modelValue',
 64 |     'description': '<p>The value of the editable field</p>\n',
 65 |     'type': 'string | null',
 66 |     'required': false
 67 |   },
 68 |   {
 69 |     'name': 'name',
 70 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 71 |     'type': 'string',
 72 |     'required': false
 73 |   },
 74 |   {
 75 |     'name': 'placeholder',
 76 |     'description': '<p>The placeholder for the editable field</p>\n',
 77 |     'type': 'string | { edit: string; preview: string; }',
 78 |     'required': false,
 79 |     'default': '\'Enter text...\''
 80 |   },
 81 |   {
 82 |     'name': 'readonly',
 83 |     'description': '<p>Whether the editable field is read-only</p>\n',
 84 |     'type': 'boolean',
 85 |     'required': false
 86 |   },
 87 |   {
 88 |     'name': 'required',
 89 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
 90 |     'type': 'boolean',
 91 |     'required': false,
 92 |     'default': 'false'
 93 |   },
 94 |   {
 95 |     'name': 'selectOnFocus',
 96 |     'description': '<p>Whether to select the text in the input when it is focused.</p>\n',
 97 |     'type': 'boolean',
 98 |     'required': false,
 99 |     'default': 'false'
100 |   },
101 |   {
102 |     'name': 'startWithEditMode',
103 |     'description': '<p>Whether to start with the edit mode active</p>\n',
104 |     'type': 'boolean',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'submitMode',
109 |     'description': '<p>The submit event of the editable field</p>\n',
110 |     'type': '\'blur\' | \'none\' | \'enter\' | \'both\'',
111 |     'required': false,
112 |     'default': '\'blur\''
113 |   }
114 | ]" />
115 | 
116 | <EmitsTable :data="[
117 |   {
118 |     'name': 'submit',
119 |     'description': '<p>Event handler called when a value is submitted</p>\n',
120 |     'type': '[value: string | null]'
121 |   },
122 |   {
123 |     'name': 'update:modelValue',
124 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
125 |     'type': '[value: string]'
126 |   },
127 |   {
128 |     'name': 'update:state',
129 |     'description': '<p>Event handler called when the editable field changes state</p>\n',
130 |     'type': '[state: \'cancel\' | \'submit\' | \'edit\']'
131 |   }
132 | ]" />
133 | 
134 | <SlotsTable :data="[
135 |   {
136 |     'name': 'isEditing',
137 |     'description': '<p>Whether the editable field is in edit mode</p>\n',
138 |     'type': 'boolean'
139 |   },
140 |   {
141 |     'name': 'modelValue',
142 |     'description': '<p>The value of the editable field</p>\n',
143 |     'type': 'string | null | undefined'
144 |   },
145 |   {
146 |     'name': 'isEmpty',
147 |     'description': '<p>Whether the editable field is empty</p>\n',
148 |     'type': 'boolean'
149 |   },
150 |   {
151 |     'name': 'submit',
152 |     'description': '<p>Function to submit the value of the editable</p>\n',
153 |     'type': '(): void'
154 |   },
155 |   {
156 |     'name': 'cancel',
157 |     'description': '<p>Function to cancel the value of the editable</p>\n',
158 |     'type': '(): void'
159 |   },
160 |   {
161 |     'name': 'edit',
162 |     'description': '<p>Function to set the editable in edit mode</p>\n',
163 |     'type': '(): void'
164 |   }
165 | ]" />
166 | 
167 | <MethodsTable :data="[
168 |   {
169 |     'name': 'submit',
170 |     'description': '<p>Function to submit the value of the editable</p>\n',
171 |     'type': '() => void'
172 |   },
173 |   {
174 |     'name': 'cancel',
175 |     'description': '<p>Function to cancel the value of the editable</p>\n',
176 |     'type': '() => void'
177 |   },
178 |   {
179 |     'name': 'edit',
180 |     'description': '<p>Function to set the editable in edit mode</p>\n',
181 |     'type': '() => void'
182 |   }
183 | ]" />
184 | 


--------------------------------------------------------------------------------
/docs/content/meta/EditableSubmitTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/FocusScope.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'loop',
19 |     'description': '<p>When <code>true</code>, tabbing from last item will focus first tabbable\nand shift+tab from first item will focus last tababble.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'false'
23 |   },
24 |   {
25 |     'name': 'trapped',
26 |     'description': '<p>When <code>true</code>, focus cannot escape the focus scope via keyboard,\npointer, or a programmatic focus.</p>\n',
27 |     'type': 'boolean',
28 |     'required': false,
29 |     'default': 'false'
30 |   }
31 | ]" />
32 | 
33 | <EmitsTable :data="[
34 |   {
35 |     'name': 'mountAutoFocus',
36 |     'description': '<p>Event handler called when auto-focusing on mount.\nCan be prevented.</p>\n',
37 |     'type': '[event: Event]'
38 |   },
39 |   {
40 |     'name': 'unmountAutoFocus',
41 |     'description': '<p>Event handler called when auto-focusing on unmount.\nCan be prevented.</p>\n',
42 |     'type': '[event: Event]'
43 |   }
44 | ]" />
45 | 


--------------------------------------------------------------------------------
/docs/content/meta/HoverCardArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'rounded',
26 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'width',
32 |     'description': '<p>The width of the arrow in pixels.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': '10'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/HoverCardContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'arrowPadding',
 18 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 19 |     'type': 'number',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'avoidCollisions',
 37 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionBoundary',
 43 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 44 |     'type': 'Element | (Element | null)[] | null',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionPadding',
 49 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 50 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'disableUpdateOnLayoutShift',
 55 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'forceMount',
 61 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'hideWhenDetached',
 67 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'positionStrategy',
 73 |     'description': '<p>The type of CSS position property to use.</p>\n',
 74 |     'type': '\'fixed\' | \'absolute\'',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'prioritizePosition',
 79 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 80 |     'type': 'boolean',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'reference',
 85 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 86 |     'type': 'ReferenceElement',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'side',
 91 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
 92 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'sideOffset',
 97 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
 98 |     'type': 'number',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'sticky',
103 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
104 |     'type': '\'partial\' | \'always\'',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'updatePositionStrategy',
109 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
110 |     'type': '\'always\' | \'optimized\'',
111 |     'required': false
112 |   }
113 | ]" />
114 | 
115 | <EmitsTable :data="[
116 |   {
117 |     'name': 'escapeKeyDown',
118 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
119 |     'type': '[event: KeyboardEvent]'
120 |   },
121 |   {
122 |     'name': 'focusOutside',
123 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
124 |     'type': '[event: FocusOutsideEvent]'
125 |   },
126 |   {
127 |     'name': 'interactOutside',
128 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
129 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
130 |   },
131 |   {
132 |     'name': 'pointerDownOutside',
133 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
134 |     'type': '[event: PointerDownOutsideEvent]'
135 |   }
136 | ]" />
137 | 


--------------------------------------------------------------------------------
/docs/content/meta/HoverCardPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/HoverCardRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'closeDelay',
 6 |     'description': '<p>The duration from when the mouse leaves the trigger or content until the hover card closes.</p>\n',
 7 |     'type': 'number',
 8 |     'required': false,
 9 |     'default': '300'
10 |   },
11 |   {
12 |     'name': 'defaultOpen',
13 |     'description': '<p>The open state of the hover card when it is initially rendered. Use when you do not need to control its open state.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false,
16 |     'default': 'false'
17 |   },
18 |   {
19 |     'name': 'open',
20 |     'description': '<p>The controlled open state of the hover card. Can be binded as <code>v-model:open</code>.</p>\n',
21 |     'type': 'boolean',
22 |     'required': false
23 |   },
24 |   {
25 |     'name': 'openDelay',
26 |     'description': '<p>The duration from when the mouse enters the trigger until the hover card opens.</p>\n',
27 |     'type': 'number',
28 |     'required': false,
29 |     'default': '700'
30 |   }
31 | ]" />
32 | 
33 | <EmitsTable :data="[
34 |   {
35 |     'name': 'update:open',
36 |     'description': '<p>Event handler called when the open state of the hover card changes.</p>\n',
37 |     'type': '[value: boolean]'
38 |   }
39 | ]" />
40 | 
41 | <SlotsTable :data="[
42 |   {
43 |     'name': 'open',
44 |     'description': '<p>Current open state</p>\n',
45 |     'type': 'boolean'
46 |   }
47 | ]" />
48 | 


--------------------------------------------------------------------------------
/docs/content/meta/HoverCardTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'a\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'reference',
19 |     'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\n<p>If not provided will use the current component as anchor.</p>\n',
20 |     'type': 'ReferenceElement',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/Label.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'label\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'for',
19 |     'description': '<p>The id of the element the label is associated with.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxContent.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxFilter.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'input\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'autoFocus',
19 |     'description': '<p>Focus on element when mounted.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'disabled',
25 |     'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'modelValue',
31 |     'description': '<p>The controlled value of the filter. Can be binded with with v-model.</p>\n',
32 |     'type': 'string',
33 |     'required': false
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'update:modelValue',
40 |     'description': '<p>Event handler called when the value changes.</p>\n',
41 |     'type': '[string]'
42 |   }
43 | ]" />
44 | 
45 | <SlotsTable :data="[
46 |   {
47 |     'name': 'modelValue',
48 |     'description': '<p>Current input values</p>\n',
49 |     'type': 'string | undefined'
50 |   }
51 | ]" />
52 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxGroupLabel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'for',
19 |     'description': '',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'value',
25 |     'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\n',
26 |     'type': 'AcceptableValue',
27 |     'required': true
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'select',
34 |     'description': '<p>Event handler called when the selecting item. &lt;br&gt; It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
35 |     'type': '[event: SelectEvent<AcceptableValue>]'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxItemIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'by',
 19 |     'description': '<p>Use this to compare objects by a particular field, or pass your own comparison function for complete control over how objects are compared.</p>\n',
 20 |     'type': 'string | ((a: AcceptableValue, b: AcceptableValue) => boolean)',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'defaultValue',
 25 |     'description': '<p>The value of the listbox when initially rendered. Use when you do not need to control the state of the Listbox</p>\n',
 26 |     'type': 'AcceptableValue | AcceptableValue[]',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'dir',
 31 |     'description': '<p>The reading direction of the listbox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 32 |     'type': '\'ltr\' | \'rtl\'',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'disabled',
 37 |     'description': '<p>When <code>true</code>, prevents the user from interacting with listbox</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'highlightOnHover',
 43 |     'description': '<p>When <code>true</code>, hover over item will trigger highlight</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'modelValue',
 49 |     'description': '<p>The controlled value of the listbox. Can be binded with with <code>v-model</code>.</p>\n',
 50 |     'type': 'AcceptableValue | AcceptableValue[]',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'multiple',
 55 |     'description': '<p>Whether multiple options can be selected or not.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'name',
 61 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 62 |     'type': 'string',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'orientation',
 67 |     'description': '<p>The orientation of the listbox. &lt;br&gt;Mainly so arrow navigation is done accordingly (left &amp; right vs. up &amp; down)</p>\n',
 68 |     'type': '\'vertical\' | \'horizontal\'',
 69 |     'required': false,
 70 |     'default': '\'vertical\''
 71 |   },
 72 |   {
 73 |     'name': 'required',
 74 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
 75 |     'type': 'boolean',
 76 |     'required': false
 77 |   },
 78 |   {
 79 |     'name': 'selectionBehavior',
 80 |     'description': '<p>How multiple selection should behave in the collection.</p>\n',
 81 |     'type': '\'toggle\' | \'replace\'',
 82 |     'required': false,
 83 |     'default': '\'toggle\''
 84 |   }
 85 | ]" />
 86 | 
 87 | <EmitsTable :data="[
 88 |   {
 89 |     'name': 'entryFocus',
 90 |     'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\n',
 91 |     'type': '[event: CustomEvent<any>]'
 92 |   },
 93 |   {
 94 |     'name': 'highlight',
 95 |     'description': '<p>Event handler when highlighted element changes.</p>\n',
 96 |     'type': '[payload: { ref: HTMLElement; value: AcceptableValue; }]'
 97 |   },
 98 |   {
 99 |     'name': 'leave',
100 |     'description': '<p>Event handler called when the mouse leave the container</p>\n',
101 |     'type': '[event: Event]'
102 |   },
103 |   {
104 |     'name': 'update:modelValue',
105 |     'description': '<p>Event handler called when the value changes.</p>\n',
106 |     'type': '[value: AcceptableValue]'
107 |   }
108 | ]" />
109 | 
110 | <SlotsTable :data="[
111 |   {
112 |     'name': 'modelValue',
113 |     'description': '<p>Current active value</p>\n',
114 |     'type': 'AcceptableValue | AcceptableValue[] | undefined'
115 |   }
116 | ]" />
117 | 


--------------------------------------------------------------------------------
/docs/content/meta/ListboxVirtualizer.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'estimateSize',
 6 |     'description': '<p>Estimated size (in px) of each item</p>\n',
 7 |     'type': 'number',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'options',
12 |     'description': '<p>List of items</p>\n',
13 |     'type': 'AcceptableValue[]',
14 |     'required': true
15 |   },
16 |   {
17 |     'name': 'overscan',
18 |     'description': '<p>Number of items rendered outside the visible area</p>\n',
19 |     'type': 'number',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'textContent',
24 |     'description': '<p>Text content for each item to achieve type-ahead feature</p>\n',
25 |     'type': '((option: AcceptableValue) => string)',
26 |     'required': false
27 |   }
28 | ]" />
29 | 
30 | <SlotsTable :data="[
31 |   {
32 |     'name': 'option',
33 |     'description': '',
34 |     'type': 'null | string | number | bigint | Record<string, any>'
35 |   },
36 |   {
37 |     'name': 'virtualizer',
38 |     'description': '',
39 |     'type': 'Virtualizer<HTMLElement, Element>'
40 |   },
41 |   {
42 |     'name': 'virtualItem',
43 |     'description': '',
44 |     'type': 'VirtualItem'
45 |   }
46 | ]" />
47 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'rounded',
26 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'width',
32 |     'description': '<p>The width of the arrow in pixels.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': '10'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarCheckboxItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'modelValue',
25 |     'description': '<p>The controlled checked state of the item. Can be used as <code>v-model</code>.</p>\n',
26 |     'type': 'false | true | \'indeterminate\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'textValue',
31 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
32 |     'type': 'string',
33 |     'required': false
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
41 |     'type': '[event: Event]'
42 |   },
43 |   {
44 |     'name': 'update:modelValue',
45 |     'description': '<p>Event handler called when the value changes.</p>\n',
46 |     'type': '[payload: boolean]'
47 |   }
48 | ]" />
49 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false,
  9 |     'default': '\'start\''
 10 |   },
 11 |   {
 12 |     'name': 'alignOffset',
 13 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 14 |     'type': 'number',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'arrowPadding',
 19 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 20 |     'type': 'number',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'as',
 25 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 26 |     'type': 'AsTag | Component',
 27 |     'required': false,
 28 |     'default': '\'div\''
 29 |   },
 30 |   {
 31 |     'name': 'asChild',
 32 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 33 |     'type': 'boolean',
 34 |     'required': false
 35 |   },
 36 |   {
 37 |     'name': 'avoidCollisions',
 38 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 39 |     'type': 'boolean',
 40 |     'required': false
 41 |   },
 42 |   {
 43 |     'name': 'collisionBoundary',
 44 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 45 |     'type': 'Element | (Element | null)[] | null',
 46 |     'required': false
 47 |   },
 48 |   {
 49 |     'name': 'collisionPadding',
 50 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 51 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 52 |     'required': false
 53 |   },
 54 |   {
 55 |     'name': 'disableUpdateOnLayoutShift',
 56 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 57 |     'type': 'boolean',
 58 |     'required': false
 59 |   },
 60 |   {
 61 |     'name': 'forceMount',
 62 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 63 |     'type': 'boolean',
 64 |     'required': false
 65 |   },
 66 |   {
 67 |     'name': 'hideWhenDetached',
 68 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 69 |     'type': 'boolean',
 70 |     'required': false
 71 |   },
 72 |   {
 73 |     'name': 'loop',
 74 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
 75 |     'type': 'boolean',
 76 |     'required': false
 77 |   },
 78 |   {
 79 |     'name': 'positionStrategy',
 80 |     'description': '<p>The type of CSS position property to use.</p>\n',
 81 |     'type': '\'fixed\' | \'absolute\'',
 82 |     'required': false
 83 |   },
 84 |   {
 85 |     'name': 'prioritizePosition',
 86 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 87 |     'type': 'boolean',
 88 |     'required': false
 89 |   },
 90 |   {
 91 |     'name': 'reference',
 92 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 93 |     'type': 'ReferenceElement',
 94 |     'required': false
 95 |   },
 96 |   {
 97 |     'name': 'side',
 98 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
 99 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
100 |     'required': false
101 |   },
102 |   {
103 |     'name': 'sideOffset',
104 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
105 |     'type': 'number',
106 |     'required': false
107 |   },
108 |   {
109 |     'name': 'sticky',
110 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
111 |     'type': '\'partial\' | \'always\'',
112 |     'required': false
113 |   },
114 |   {
115 |     'name': 'updatePositionStrategy',
116 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
117 |     'type': '\'always\' | \'optimized\'',
118 |     'required': false
119 |   }
120 | ]" />
121 | 
122 | <EmitsTable :data="[
123 |   {
124 |     'name': 'closeAutoFocus',
125 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
126 |     'type': '[event: Event]'
127 |   },
128 |   {
129 |     'name': 'escapeKeyDown',
130 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
131 |     'type': '[event: KeyboardEvent]'
132 |   },
133 |   {
134 |     'name': 'focusOutside',
135 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
136 |     'type': '[event: FocusOutsideEvent]'
137 |   },
138 |   {
139 |     'name': 'interactOutside',
140 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
141 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
142 |   },
143 |   {
144 |     'name': 'pointerDownOutside',
145 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
146 |     'type': '[event: PointerDownOutsideEvent]'
147 |   }
148 | ]" />
149 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'select',
34 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
35 |     'type': '[event: Event]'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarItemIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarLabel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarMenu.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'value',
 6 |     'description': '<p>A unique value that associates the item with an active value when the navigation menu is controlled.</p>\n<p>This prop is managed automatically when uncontrolled.</p>\n',
 7 |     'type': 'string',
 8 |     'required': false
 9 |   }
10 | ]" />
11 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarRadioGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'modelValue',
19 |     'description': '<p>The value of the selected item in the group.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <EmitsTable :data="[
26 |   {
27 |     'name': 'update:modelValue',
28 |     'description': '<p>Event handler called when the value changes.</p>\n',
29 |     'type': '[payload: string]'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarRadioItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'value',
31 |     'description': '<p>The unique value of the item.</p>\n',
32 |     'type': 'string',
33 |     'required': true
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\n',
41 |     'type': '[event: Event]'
42 |   }
43 | ]" />
44 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultValue',
 6 |     'description': '<p>The value of the menu that should be open when initially rendered. Use when you do not need to control the value state.</p>\n',
 7 |     'type': 'string',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'dir',
12 |     'description': '<p>The reading direction of the combobox when applicable.</p>\n<p>If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
13 |     'type': '\'ltr\' | \'rtl\'',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'loop',
18 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false,
21 |     'default': 'false'
22 |   },
23 |   {
24 |     'name': 'modelValue',
25 |     'description': '<p>The controlled value of the menu to open. Can be used as <code>v-model</code>.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'update:modelValue',
34 |     'description': '<p>Event handler called when the value changes.</p>\n',
35 |     'type': '[value: boolean]'
36 |   }
37 | ]" />
38 | 
39 | <SlotsTable :data="[
40 |   {
41 |     'name': 'modelValue',
42 |     'description': '<p>Current input values</p>\n',
43 |     'type': 'string'
44 |   }
45 | ]" />
46 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarSeparator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarSub.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the submenu when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'open',
12 |     'description': '<p>The controlled open state of the menu. Can be used as <code>v-model:open</code>.</p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   }
16 | ]" />
17 | 
18 | <EmitsTable :data="[
19 |   {
20 |     'name': 'update:open',
21 |     'description': '<p>Event handler called when the open state of the submenu changes.</p>\n',
22 |     'type': '[payload: boolean]'
23 |   }
24 | ]" />
25 | 
26 | <SlotsTable :data="[
27 |   {
28 |     'name': 'open',
29 |     'description': '<p>Current open state</p>\n',
30 |     'type': 'boolean'
31 |   }
32 | ]" />
33 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarSubContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'alignOffset',
  6 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
  7 |     'type': 'number',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'arrowPadding',
 12 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'as',
 18 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 19 |     'type': 'AsTag | Component',
 20 |     'required': false,
 21 |     'default': '\'div\''
 22 |   },
 23 |   {
 24 |     'name': 'asChild',
 25 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 26 |     'type': 'boolean',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'avoidCollisions',
 31 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'collisionBoundary',
 37 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 38 |     'type': 'Element | (Element | null)[] | null',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionPadding',
 43 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 44 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'disableUpdateOnLayoutShift',
 49 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 50 |     'type': 'boolean',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'forceMount',
 55 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'hideWhenDetached',
 61 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'loop',
 67 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'positionStrategy',
 73 |     'description': '<p>The type of CSS position property to use.</p>\n',
 74 |     'type': '\'fixed\' | \'absolute\'',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'prioritizePosition',
 79 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 80 |     'type': 'boolean',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'reference',
 85 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 86 |     'type': 'ReferenceElement',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'sideOffset',
 91 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
 92 |     'type': 'number',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'sticky',
 97 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
 98 |     'type': '\'partial\' | \'always\'',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'updatePositionStrategy',
103 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
104 |     'type': '\'always\' | \'optimized\'',
105 |     'required': false
106 |   }
107 | ]" />
108 | 
109 | <EmitsTable :data="[
110 |   {
111 |     'name': 'closeAutoFocus',
112 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
113 |     'type': '[event: Event]'
114 |   },
115 |   {
116 |     'name': 'entryFocus',
117 |     'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\n',
118 |     'type': '[event: Event]'
119 |   },
120 |   {
121 |     'name': 'escapeKeyDown',
122 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
123 |     'type': '[event: KeyboardEvent]'
124 |   },
125 |   {
126 |     'name': 'focusOutside',
127 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
128 |     'type': '[event: FocusOutsideEvent]'
129 |   },
130 |   {
131 |     'name': 'interactOutside',
132 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
133 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
134 |   },
135 |   {
136 |     'name': 'openAutoFocus',
137 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
138 |     'type': '[event: Event]'
139 |   },
140 |   {
141 |     'name': 'pointerDownOutside',
142 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
143 |     'type': '[event: PointerDownOutsideEvent]'
144 |   }
145 | ]" />
146 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarSubTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\nUse this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/MenubarTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuContent.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disableOutsidePointerEvents',
19 |     'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'forceMount',
25 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'escapeKeyDown',
34 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
35 |     'type': '[event: KeyboardEvent]'
36 |   },
37 |   {
38 |     'name': 'focusOutside',
39 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
40 |     'type': '[event: FocusOutsideEvent]'
41 |   },
42 |   {
43 |     'name': 'interactOutside',
44 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
45 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
46 |   },
47 |   {
48 |     'name': 'pointerDownOutside',
49 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
50 |     'type': '[event: PointerDownOutsideEvent]'
51 |   }
52 | ]" />
53 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'li\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'value',
19 |     'description': '<p>A unique value that associates the item with an active value when the navigation menu is controlled.</p>\n<p>This prop is managed automatically when uncontrolled.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuLink.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'active',
 6 |     'description': '<p>Used to identify the link as the currently active page.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'as',
12 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
13 |     'type': 'AsTag | Component',
14 |     'required': false,
15 |     'default': '\'a\''
16 |   },
17 |   {
18 |     'name': 'asChild',
19 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <EmitsTable :data="[
26 |   {
27 |     'name': 'select',
28 |     'description': '<p>Event handler called when the user selects a link (via mouse or keyboard).</p>\n<p>Calling <code>event.preventDefault</code> in this handler will prevent the navigation menu from closing when selecting that link.</p>\n',
29 |     'type': '[payload: CustomEvent<{ originalEvent: Event; }>]'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuList.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'ul\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'nav\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultValue',
 19 |     'description': '<p>The value of the menu item that should be active when initially rendered.</p>\n<p>Use when you do not need to control the value state.</p>\n',
 20 |     'type': 'string',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'delayDuration',
 25 |     'description': '<p>The duration from when the pointer enters the trigger until the tooltip gets opened.</p>\n',
 26 |     'type': 'number',
 27 |     'required': false,
 28 |     'default': '200'
 29 |   },
 30 |   {
 31 |     'name': 'dir',
 32 |     'description': '<p>The reading direction of the combobox when applicable.</p>\n<p>If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 33 |     'type': '\'ltr\' | \'rtl\'',
 34 |     'required': false
 35 |   },
 36 |   {
 37 |     'name': 'disableClickTrigger',
 38 |     'description': '<p>If <code>true</code>, menu cannot be open by click on trigger</p>\n',
 39 |     'type': 'boolean',
 40 |     'required': false,
 41 |     'default': 'false'
 42 |   },
 43 |   {
 44 |     'name': 'disableHoverTrigger',
 45 |     'description': '<p>If <code>true</code>, menu cannot be open by hover on trigger</p>\n',
 46 |     'type': 'boolean',
 47 |     'required': false,
 48 |     'default': 'false'
 49 |   },
 50 |   {
 51 |     'name': 'disablePointerLeaveClose',
 52 |     'description': '<p>If <code>true</code>, menu will not close during pointer leave event</p>\n',
 53 |     'type': 'boolean',
 54 |     'required': false
 55 |   },
 56 |   {
 57 |     'name': 'modelValue',
 58 |     'description': '<p>The controlled value of the menu item to activate. Can be used as <code>v-model</code>.</p>\n',
 59 |     'type': 'string',
 60 |     'required': false
 61 |   },
 62 |   {
 63 |     'name': 'orientation',
 64 |     'description': '<p>The orientation of the menu.</p>\n',
 65 |     'type': '\'vertical\' | \'horizontal\'',
 66 |     'required': false,
 67 |     'default': '\'horizontal\''
 68 |   },
 69 |   {
 70 |     'name': 'skipDelayDuration',
 71 |     'description': '<p>How much time a user has to enter another trigger without incurring a delay again.</p>\n',
 72 |     'type': 'number',
 73 |     'required': false,
 74 |     'default': '300'
 75 |   },
 76 |   {
 77 |     'name': 'unmountOnHide',
 78 |     'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\n',
 79 |     'type': 'boolean',
 80 |     'required': false,
 81 |     'default': 'true'
 82 |   }
 83 | ]" />
 84 | 
 85 | <EmitsTable :data="[
 86 |   {
 87 |     'name': 'update:modelValue',
 88 |     'description': '<p>Event handler called when the value changes.</p>\n',
 89 |     'type': '[value: string]'
 90 |   }
 91 | ]" />
 92 | 
 93 | <SlotsTable :data="[
 94 |   {
 95 |     'name': 'modelValue',
 96 |     'description': '<p>Current input values</p>\n',
 97 |     'type': 'string'
 98 |   }
 99 | ]" />
100 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuSub.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The value of the menu item that should be active when initially rendered.</p>\n<p>Use when you do not need to control the value state.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'modelValue',
25 |     'description': '<p>The controlled value of the sub menu item to activate. Can be used as <code>v-model</code>.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'orientation',
31 |     'description': '<p>The orientation of the menu.</p>\n',
32 |     'type': '\'vertical\' | \'horizontal\'',
33 |     'required': false,
34 |     'default': '\'horizontal\''
35 |   }
36 | ]" />
37 | 
38 | <EmitsTable :data="[
39 |   {
40 |     'name': 'update:modelValue',
41 |     'description': '<p>Event handler called when the value changes.</p>\n',
42 |     'type': '[value: string]'
43 |   }
44 | ]" />
45 | 
46 | <SlotsTable :data="[
47 |   {
48 |     'name': 'modelValue',
49 |     'description': '<p>Current input values</p>\n',
50 |     'type': 'string'
51 |   }
52 | ]" />
53 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/NavigationMenuViewport.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'align',
 6 |     'description': '<p>Placement of the viewport for css variables <code>(--reka-navigation-menu-viewport-left, --reka-navigation-menu-viewport-top)</code>.</p>\n',
 7 |     'type': '\'start\' | \'center\' | \'end\'',
 8 |     'required': false,
 9 |     'default': '\'center\''
10 |   },
11 |   {
12 |     'name': 'as',
13 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
14 |     'type': 'AsTag | Component',
15 |     'required': false,
16 |     'default': '\'div\''
17 |   },
18 |   {
19 |     'name': 'asChild',
20 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
21 |     'type': 'boolean',
22 |     'required': false
23 |   },
24 |   {
25 |     'name': 'forceMount',
26 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   }
30 | ]" />
31 | 


--------------------------------------------------------------------------------
/docs/content/meta/NumberFieldDecrement.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/NumberFieldIncrement.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/NumberFieldInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'input\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/NumberFieldRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultValue',
 19 |     'description': '',
 20 |     'type': 'number',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'disabled',
 25 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the Number Field.</p>\n',
 26 |     'type': 'boolean',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'disableWheelChange',
 31 |     'description': '<p>When <code>true</code>, prevents the value from changing on wheel scroll.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'formatOptions',
 37 |     'description': '<p>Formatting options for the value displayed in the number field. This also affects what characters are allowed to be typed by the user.</p>\n',
 38 |     'type': 'NumberFormatOptions',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'id',
 43 |     'description': '<p>Id of the element</p>\n',
 44 |     'type': 'string',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'invertWheelChange',
 49 |     'description': '<p>When <code>true</code>, inverts the direction of the wheel change.</p>\n',
 50 |     'type': 'boolean',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'locale',
 55 |     'description': '<p>The locale to use for formatting dates</p>\n',
 56 |     'type': 'string',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'max',
 61 |     'description': '<p>The largest value allowed for the input.</p>\n',
 62 |     'type': 'number',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'min',
 67 |     'description': '<p>The smallest value allowed for the input.</p>\n',
 68 |     'type': 'number',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'modelValue',
 73 |     'description': '',
 74 |     'type': 'number | null',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'name',
 79 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 80 |     'type': 'string',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'required',
 85 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
 86 |     'type': 'boolean',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'step',
 91 |     'description': '<p>The amount that the input value changes with each increment or decrement &quot;tick&quot;.</p>\n',
 92 |     'type': 'number',
 93 |     'required': false,
 94 |     'default': '1'
 95 |   },
 96 |   {
 97 |     'name': 'stepSnapping',
 98 |     'description': '<p>When <code>false</code>, prevents the value from snapping to the nearest increment of the step value</p>\n',
 99 |     'type': 'boolean',
100 |     'required': false,
101 |     'default': 'true'
102 |   }
103 | ]" />
104 | 
105 | <EmitsTable :data="[
106 |   {
107 |     'name': 'update:modelValue',
108 |     'description': '<p>Event handler called when the value changes.</p>\n',
109 |     'type': '[val: number]'
110 |   }
111 | ]" />
112 | 
113 | <SlotsTable :data="[
114 |   {
115 |     'name': 'modelValue',
116 |     'description': '',
117 |     'type': 'number | undefined'
118 |   },
119 |   {
120 |     'name': 'textValue',
121 |     'description': '',
122 |     'type': 'string'
123 |   }
124 | ]" />
125 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationEllipsis.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationFirst.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationLast.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationList.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 
19 | <SlotsTable :data="[
20 |   {
21 |     'name': 'items',
22 |     'description': '<p>Pages item</p>\n',
23 |     'type': '{ type: \'ellipsis\'; } | { type: \'page\'; value: number; }'
24 |   }
25 | ]" />
26 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationListItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'value',
19 |     'description': '<p>Value for the page</p>\n',
20 |     'type': 'number',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationNext.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationPrev.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/PaginationRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'nav\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultPage',
19 |     'description': '<p>The value of the page that should be active when initially rendered.</p>\n<p>Use when you do not need to control the value state.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '1'
23 |   },
24 |   {
25 |     'name': 'disabled',
26 |     'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'itemsPerPage',
32 |     'description': '<p>Number of items per page</p>\n',
33 |     'type': 'number',
34 |     'required': true
35 |   },
36 |   {
37 |     'name': 'page',
38 |     'description': '<p>The controlled value of the current page. Can be binded as <code>v-model:page</code>.</p>\n',
39 |     'type': 'number',
40 |     'required': false
41 |   },
42 |   {
43 |     'name': 'showEdges',
44 |     'description': '<p>When <code>true</code>, always show first page, last page, and ellipsis</p>\n',
45 |     'type': 'boolean',
46 |     'required': false,
47 |     'default': 'false'
48 |   },
49 |   {
50 |     'name': 'siblingCount',
51 |     'description': '<p>Number of sibling should be shown around the current page</p>\n',
52 |     'type': 'number',
53 |     'required': false,
54 |     'default': '2'
55 |   },
56 |   {
57 |     'name': 'total',
58 |     'description': '<p>Number of items in your list</p>\n',
59 |     'type': 'number',
60 |     'required': false,
61 |     'default': '0'
62 |   }
63 | ]" />
64 | 
65 | <EmitsTable :data="[
66 |   {
67 |     'name': 'update:page',
68 |     'description': '<p>Event handler called when the page value changes</p>\n',
69 |     'type': '[value: number]'
70 |   }
71 | ]" />
72 | 
73 | <SlotsTable :data="[
74 |   {
75 |     'name': 'page',
76 |     'description': '<p>Current page state</p>\n',
77 |     'type': 'number'
78 |   },
79 |   {
80 |     'name': 'pageCount',
81 |     'description': '<p>Number of pages</p>\n',
82 |     'type': 'number'
83 |   }
84 | ]" />
85 | 


--------------------------------------------------------------------------------
/docs/content/meta/PinInputInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'input\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the pin input</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'index',
25 |     'description': '<p>Position of the value this input binds to.</p>\n',
26 |     'type': 'number',
27 |     'required': true
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/PinInputRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultValue',
 19 |     'description': '<p>The default value of the pin inputs when it is initially rendered. Use when you do not need to control its checked state.</p>\n',
 20 |     'type': '(string[] | number[])[]',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'dir',
 25 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 26 |     'type': '\'ltr\' | \'rtl\'',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'disabled',
 31 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the pin input</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'id',
 37 |     'description': '<p>Id of the element</p>\n',
 38 |     'type': 'string',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'mask',
 43 |     'description': '<p>When <code>true</code>, pin inputs will be treated as password.</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'modelValue',
 49 |     'description': '<p>The controlled checked state of the pin input. Can be binded as <code>v-model</code>.</p>\n',
 50 |     'type': 'string[] | number[] | null',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'name',
 55 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 56 |     'type': 'string',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'otp',
 61 |     'description': '<p>When <code>true</code>, mobile devices will autodetect the OTP from messages or clipboard, and enable the autocomplete field.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'placeholder',
 67 |     'description': '<p>The placeholder character to use for empty pin-inputs.</p>\n',
 68 |     'type': 'string',
 69 |     'required': false,
 70 |     'default': '\'\''
 71 |   },
 72 |   {
 73 |     'name': 'required',
 74 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
 75 |     'type': 'boolean',
 76 |     'required': false
 77 |   },
 78 |   {
 79 |     'name': 'type',
 80 |     'description': '<p>Input type for the inputs.</p>\n',
 81 |     'type': '\'number\' | \'text\'',
 82 |     'required': false,
 83 |     'default': '\'text\' as any'
 84 |   }
 85 | ]" />
 86 | 
 87 | <EmitsTable :data="[
 88 |   {
 89 |     'name': 'complete',
 90 |     'description': '',
 91 |     'type': '[value: string[] | number[]]'
 92 |   },
 93 |   {
 94 |     'name': 'update:modelValue',
 95 |     'description': '<p>Event handler called when the value changes.</p>\n',
 96 |     'type': '[value: string[] | number[]]'
 97 |   }
 98 | ]" />
 99 | 
100 | <SlotsTable :data="[
101 |   {
102 |     'name': 'modelValue',
103 |     'description': '<p>Current input values</p>\n',
104 |     'type': 'string[] | number[]'
105 |   }
106 | ]" />
107 | 


--------------------------------------------------------------------------------
/docs/content/meta/PopoverAnchor.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'reference',
19 |     'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\n<p>If not provided will use the current component as anchor.</p>\n',
20 |     'type': 'ReferenceElement',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/PopoverArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'rounded',
26 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'width',
32 |     'description': '<p>The width of the arrow in pixels.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': '10'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/PopoverClose.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/PopoverContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'arrowPadding',
 18 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 19 |     'type': 'number',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'avoidCollisions',
 37 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'collisionBoundary',
 43 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 44 |     'type': 'Element | (Element | null)[] | null',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionPadding',
 49 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 50 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'disableOutsidePointerEvents',
 55 |     'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\n',
 56 |     'type': 'boolean',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'disableUpdateOnLayoutShift',
 61 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'forceMount',
 67 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'hideWhenDetached',
 73 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 74 |     'type': 'boolean',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'positionStrategy',
 79 |     'description': '<p>The type of CSS position property to use.</p>\n',
 80 |     'type': '\'fixed\' | \'absolute\'',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'prioritizePosition',
 85 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 86 |     'type': 'boolean',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'reference',
 91 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 92 |     'type': 'ReferenceElement',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'side',
 97 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
 98 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'sideOffset',
103 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
104 |     'type': 'number',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'sticky',
109 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
110 |     'type': '\'partial\' | \'always\'',
111 |     'required': false
112 |   },
113 |   {
114 |     'name': 'updatePositionStrategy',
115 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
116 |     'type': '\'always\' | \'optimized\'',
117 |     'required': false
118 |   }
119 | ]" />
120 | 
121 | <EmitsTable :data="[
122 |   {
123 |     'name': 'closeAutoFocus',
124 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
125 |     'type': '[event: Event]'
126 |   },
127 |   {
128 |     'name': 'escapeKeyDown',
129 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
130 |     'type': '[event: KeyboardEvent]'
131 |   },
132 |   {
133 |     'name': 'focusOutside',
134 |     'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
135 |     'type': '[event: FocusOutsideEvent]'
136 |   },
137 |   {
138 |     'name': 'interactOutside',
139 |     'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\nCan be prevented.</p>\n',
140 |     'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'
141 |   },
142 |   {
143 |     'name': 'openAutoFocus',
144 |     'description': '<p>Event handler called when auto-focusing on open.\nCan be prevented.</p>\n',
145 |     'type': '[event: Event]'
146 |   },
147 |   {
148 |     'name': 'pointerDownOutside',
149 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
150 |     'type': '[event: PointerDownOutsideEvent]'
151 |   }
152 | ]" />
153 | 


--------------------------------------------------------------------------------
/docs/content/meta/PopoverPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/PopoverRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the popover when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false,
 9 |     'default': 'false'
10 |   },
11 |   {
12 |     'name': 'modal',
13 |     'description': '<p>The modality of the popover. When set to true, interaction with outside elements will be disabled and only popover content will be visible to screen readers.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false,
16 |     'default': 'false'
17 |   },
18 |   {
19 |     'name': 'open',
20 |     'description': '<p>The controlled open state of the popover.</p>\n',
21 |     'type': 'boolean',
22 |     'required': false
23 |   }
24 | ]" />
25 | 
26 | <EmitsTable :data="[
27 |   {
28 |     'name': 'update:open',
29 |     'description': '<p>Event handler called when the open state of the popover changes.</p>\n',
30 |     'type': '[value: boolean]'
31 |   }
32 | ]" />
33 | 
34 | <SlotsTable :data="[
35 |   {
36 |     'name': 'open',
37 |     'description': '<p>Current open state</p>\n',
38 |     'type': 'boolean'
39 |   }
40 | ]" />
41 | 


--------------------------------------------------------------------------------
/docs/content/meta/PopoverTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ProgressIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ProgressRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'getValueLabel',
19 |     'description': '<p>A function to get the accessible label text in a human-readable format.</p>\n<p>If not provided, the value label will be read as the numeric value as a percentage of the max value.</p>\n',
20 |     'type': '((value: number | null, max: number) => string)',
21 |     'required': false,
22 |     'default': 'isNumber(value) ? `${Math.round((value / max) * DEFAULT_MAX)}%` : undefined'
23 |   },
24 |   {
25 |     'name': 'getValueText',
26 |     'description': '<p>A function to get the accessible value text representing the current value in a human-readable format.</p>\n',
27 |     'type': '((value: number | null, max: number) => string)',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'max',
32 |     'description': '<p>The maximum progress value.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': 'DEFAULT_MAX'
36 |   },
37 |   {
38 |     'name': 'modelValue',
39 |     'description': '<p>The progress value. Can be bind as <code>v-model</code>.</p>\n',
40 |     'type': 'number | null',
41 |     'required': false
42 |   }
43 | ]" />
44 | 
45 | <EmitsTable :data="[
46 |   {
47 |     'name': 'update:max',
48 |     'description': '<p>Event handler called when the max value changes</p>\n',
49 |     'type': '[value: number]'
50 |   },
51 |   {
52 |     'name': 'update:modelValue',
53 |     'description': '<p>Event handler called when the progress value changes</p>\n',
54 |     'type': '[value: string[]]'
55 |   }
56 | ]" />
57 | 
58 | <SlotsTable :data="[
59 |   {
60 |     'name': 'modelValue',
61 |     'description': '<p>Current input values</p>\n',
62 |     'type': 'number | null | undefined'
63 |   }
64 | ]" />
65 | 
66 | <MethodsTable :data="[
67 |   {
68 |     'name': 'getValueLabel',
69 |     'description': '<p>A function to get the accessible label text in a human-readable format.</p>\n<p>If not provided, the value label will be read as the numeric value as a percentage of the max value.</p>\n',
70 |     'type': '(value: number | null | undefined, max: number) => string | undefined'
71 |   }
72 | ]" />
73 | 


--------------------------------------------------------------------------------
/docs/content/meta/RadioGroupIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/RadioGroupItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the radio item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'false'
23 |   },
24 |   {
25 |     'name': 'id',
26 |     'description': '',
27 |     'type': 'string',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'name',
32 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
33 |     'type': 'string',
34 |     'required': false
35 |   },
36 |   {
37 |     'name': 'required',
38 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
39 |     'type': 'boolean',
40 |     'required': false
41 |   },
42 |   {
43 |     'name': 'value',
44 |     'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\n',
45 |     'type': 'AcceptableValue',
46 |     'required': false
47 |   }
48 | ]" />
49 | 
50 | <EmitsTable :data="[
51 |   {
52 |     'name': 'select',
53 |     'description': '<p>Event handler called when the user selects a link (via mouse or keyboard).</p>\n<p>Calling <code>event.preventDefault</code> in this handler will prevent the navigation menu from closing when selecting that link.</p>\n',
54 |     'type': '[event: SelectEvent]'
55 |   }
56 | ]" />
57 | 
58 | <SlotsTable :data="[
59 |   {
60 |     'name': 'checked',
61 |     'description': '<p>Current checked state</p>\n',
62 |     'type': 'boolean'
63 |   },
64 |   {
65 |     'name': 'required',
66 |     'description': '<p>Required state</p>\n',
67 |     'type': 'boolean'
68 |   },
69 |   {
70 |     'name': 'disabled',
71 |     'description': '<p>Disabled state</p>\n',
72 |     'type': 'boolean'
73 |   }
74 | ]" />
75 | 


--------------------------------------------------------------------------------
/docs/content/meta/RadioGroupRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The value of the radio item that should be checked when initially rendered.</p>\n<p>Use when you do not need to control the state of the radio items.</p>\n',
20 |     'type': 'AcceptableValue',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'dir',
25 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
26 |     'type': '\'ltr\' | \'rtl\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'disabled',
31 |     'description': '<p>When <code>true</code>, prevents the user from interacting with radio items.</p>\n',
32 |     'type': 'boolean',
33 |     'required': false,
34 |     'default': 'false'
35 |   },
36 |   {
37 |     'name': 'loop',
38 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
39 |     'type': 'boolean',
40 |     'required': false,
41 |     'default': 'true'
42 |   },
43 |   {
44 |     'name': 'modelValue',
45 |     'description': '<p>The controlled value of the radio item to check. Can be binded as <code>v-model</code>.</p>\n',
46 |     'type': 'AcceptableValue',
47 |     'required': false
48 |   },
49 |   {
50 |     'name': 'name',
51 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
52 |     'type': 'string',
53 |     'required': false
54 |   },
55 |   {
56 |     'name': 'orientation',
57 |     'description': '<p>The orientation of the component.</p>\n',
58 |     'type': '\'vertical\' | \'horizontal\'',
59 |     'required': false
60 |   },
61 |   {
62 |     'name': 'required',
63 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
64 |     'type': 'boolean',
65 |     'required': false,
66 |     'default': 'false'
67 |   }
68 | ]" />
69 | 
70 | <EmitsTable :data="[
71 |   {
72 |     'name': 'update:modelValue',
73 |     'description': '<p>Event handler called when the radio group value changes</p>\n',
74 |     'type': '[payload: string]'
75 |   }
76 | ]" />
77 | 
78 | <SlotsTable :data="[
79 |   {
80 |     'name': 'modelValue',
81 |     'description': '<p>Current input values</p>\n',
82 |     'type': 'null | string | number | bigint | Record<string, any>'
83 |   }
84 | ]" />
85 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'td\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'date',
19 |     'description': '',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarCellTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'day',
19 |     'description': '',
20 |     'type': 'DateValue',
21 |     'required': true
22 |   },
23 |   {
24 |     'name': 'month',
25 |     'description': '',
26 |     'type': 'DateValue',
27 |     'required': true
28 |   }
29 | ]" />
30 | 
31 | <SlotsTable :data="[
32 |   {
33 |     'name': 'dayValue',
34 |     'description': '<p>Current day</p>\n',
35 |     'type': 'string'
36 |   },
37 |   {
38 |     'name': 'disabled',
39 |     'description': '<p>Current disable state</p>\n',
40 |     'type': 'boolean'
41 |   },
42 |   {
43 |     'name': 'selected',
44 |     'description': '<p>Current selected state</p>\n',
45 |     'type': 'boolean'
46 |   },
47 |   {
48 |     'name': 'today',
49 |     'description': '<p>Current today state</p>\n',
50 |     'type': 'boolean'
51 |   },
52 |   {
53 |     'name': 'outsideView',
54 |     'description': '<p>Current outside view state</p>\n',
55 |     'type': 'boolean'
56 |   },
57 |   {
58 |     'name': 'outsideVisibleView',
59 |     'description': '<p>Current outside visible view state</p>\n',
60 |     'type': 'boolean'
61 |   },
62 |   {
63 |     'name': 'unavailable',
64 |     'description': '<p>Current unavailable state</p>\n',
65 |     'type': 'boolean'
66 |   },
67 |   {
68 |     'name': 'highlighted',
69 |     'description': '<p>Current highlighted state</p>\n',
70 |     'type': 'boolean'
71 |   },
72 |   {
73 |     'name': 'highlightedStart',
74 |     'description': '<p>Current highlighted start state</p>\n',
75 |     'type': 'boolean'
76 |   },
77 |   {
78 |     'name': 'highlightedEnd',
79 |     'description': '<p>Current highlighted end state</p>\n',
80 |     'type': 'boolean'
81 |   },
82 |   {
83 |     'name': 'selectionStart',
84 |     'description': '<p>Current selection start state</p>\n',
85 |     'type': 'boolean'
86 |   },
87 |   {
88 |     'name': 'selectionEnd',
89 |     'description': '<p>Current selection end state</p>\n',
90 |     'type': 'boolean'
91 |   }
92 | ]" />
93 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarGrid.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'table\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarGridBody.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'tbody\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarGridHead.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'thead\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarGridRow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'tr\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarHeadCell.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'th\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarHeader.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarHeading.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 
19 | <SlotsTable :data="[
20 |   {
21 |     'name': 'headingValue',
22 |     'description': '<p>Current month and year</p>\n',
23 |     'type': 'string'
24 |   }
25 | ]" />
26 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarNext.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nextPage',
19 |     'description': '<p>The function to be used for the next page. Overwrites the <code>nextPage</code> function set on the <code>RangeCalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarPrev.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'prevPage',
19 |     'description': '<p>The function to be used for the prev page. Overwrites the <code>prevPage</code> function set on the <code>RangeCalendarRoot</code>.</p>\n',
20 |     'type': '((placeholder: DateValue) => DateValue)',
21 |     'required': false
22 |   }
23 | ]" />
24 | 
25 | <SlotsTable :data="[
26 |   {
27 |     'name': 'disabled',
28 |     'description': '<p>Current disable state</p>\n',
29 |     'type': 'boolean'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/RangeCalendarRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'allowNonContiguousRanges',
  6 |     'description': '<p>When combined with <code>isDateUnavailable</code>, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.</p>\n',
  7 |     'type': 'boolean',
  8 |     'required': false,
  9 |     'default': 'false'
 10 |   },
 11 |   {
 12 |     'name': 'as',
 13 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 14 |     'type': 'AsTag | Component',
 15 |     'required': false,
 16 |     'default': '\'div\''
 17 |   },
 18 |   {
 19 |     'name': 'asChild',
 20 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 21 |     'type': 'boolean',
 22 |     'required': false
 23 |   },
 24 |   {
 25 |     'name': 'calendarLabel',
 26 |     'description': '<p>The accessible label for the calendar</p>\n',
 27 |     'type': 'string',
 28 |     'required': false
 29 |   },
 30 |   {
 31 |     'name': 'defaultPlaceholder',
 32 |     'description': '<p>The default placeholder date</p>\n',
 33 |     'type': 'DateValue',
 34 |     'required': false
 35 |   },
 36 |   {
 37 |     'name': 'defaultValue',
 38 |     'description': '<p>The default value for the calendar</p>\n',
 39 |     'type': 'DateRange',
 40 |     'required': false,
 41 |     'default': '{ start: undefined, end: undefined }'
 42 |   },
 43 |   {
 44 |     'name': 'dir',
 45 |     'description': '<p>The reading direction of the calendar when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 46 |     'type': '\'ltr\' | \'rtl\'',
 47 |     'required': false
 48 |   },
 49 |   {
 50 |     'name': 'disabled',
 51 |     'description': '<p>Whether or not the calendar is disabled</p>\n',
 52 |     'type': 'boolean',
 53 |     'required': false,
 54 |     'default': 'false'
 55 |   },
 56 |   {
 57 |     'name': 'disableDaysOutsideCurrentView',
 58 |     'description': '<p>Whether or not to disable days outside the current view.</p>\n',
 59 |     'type': 'boolean',
 60 |     'required': false,
 61 |     'default': 'false'
 62 |   },
 63 |   {
 64 |     'name': 'fixedDate',
 65 |     'description': '<p>Which part of the range should be fixed</p>\n',
 66 |     'type': '\'start\' | \'end\'',
 67 |     'required': false
 68 |   },
 69 |   {
 70 |     'name': 'fixedWeeks',
 71 |     'description': '<p>Whether or not to always display 6 weeks in the calendar</p>\n',
 72 |     'type': 'boolean',
 73 |     'required': false,
 74 |     'default': 'false'
 75 |   },
 76 |   {
 77 |     'name': 'initialFocus',
 78 |     'description': '<p>If true, the calendar will focus the selected day, today, or the first day of the month depending on what is visible when the calendar is mounted</p>\n',
 79 |     'type': 'boolean',
 80 |     'required': false,
 81 |     'default': 'false'
 82 |   },
 83 |   {
 84 |     'name': 'isDateDisabled',
 85 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
 86 |     'type': 'Matcher',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'isDateHighlightable',
 91 |     'description': '<p>A function that returns whether or not a date is hightable</p>\n',
 92 |     'type': 'Matcher',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'isDateUnavailable',
 97 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
 98 |     'type': 'Matcher',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'locale',
103 |     'description': '<p>The locale to use for formatting dates</p>\n',
104 |     'type': 'string',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'maximumDays',
109 |     'description': '<p>The maximum number of days that can be selected in a range</p>\n',
110 |     'type': 'number',
111 |     'required': false
112 |   },
113 |   {
114 |     'name': 'maxValue',
115 |     'description': '<p>The maximum date that can be selected</p>\n',
116 |     'type': 'DateValue',
117 |     'required': false
118 |   },
119 |   {
120 |     'name': 'minValue',
121 |     'description': '<p>The minimum date that can be selected</p>\n',
122 |     'type': 'DateValue',
123 |     'required': false
124 |   },
125 |   {
126 |     'name': 'modelValue',
127 |     'description': '<p>The controlled checked state of the calendar. Can be bound as <code>v-model</code>.</p>\n',
128 |     'type': 'DateRange | null',
129 |     'required': false
130 |   },
131 |   {
132 |     'name': 'nextPage',
133 |     'description': '<p>A function that returns the next page of the calendar. It receives the current placeholder as an argument inside the component.</p>\n',
134 |     'type': '((placeholder: DateValue) => DateValue)',
135 |     'required': false
136 |   },
137 |   {
138 |     'name': 'numberOfMonths',
139 |     'description': '<p>The number of months to display at once</p>\n',
140 |     'type': 'number',
141 |     'required': false,
142 |     'default': '1'
143 |   },
144 |   {
145 |     'name': 'pagedNavigation',
146 |     'description': '<p>This property causes the previous and next buttons to navigate by the number of months displayed at once, rather than one month</p>\n',
147 |     'type': 'boolean',
148 |     'required': false,
149 |     'default': 'false'
150 |   },
151 |   {
152 |     'name': 'placeholder',
153 |     'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view</p>\n',
154 |     'type': 'DateValue',
155 |     'required': false
156 |   },
157 |   {
158 |     'name': 'preventDeselect',
159 |     'description': '<p>Whether or not to prevent the user from deselecting a date without selecting another date first</p>\n',
160 |     'type': 'boolean',
161 |     'required': false,
162 |     'default': 'false'
163 |   },
164 |   {
165 |     'name': 'prevPage',
166 |     'description': '<p>A function that returns the previous page of the calendar. It receives the current placeholder as an argument inside the component.</p>\n',
167 |     'type': '((placeholder: DateValue) => DateValue)',
168 |     'required': false
169 |   },
170 |   {
171 |     'name': 'readonly',
172 |     'description': '<p>Whether or not the calendar is readonly</p>\n',
173 |     'type': 'boolean',
174 |     'required': false,
175 |     'default': 'false'
176 |   },
177 |   {
178 |     'name': 'weekdayFormat',
179 |     'description': '<p>The format to use for the weekday strings provided via the weekdays slot prop</p>\n',
180 |     'type': '\'narrow\' | \'short\' | \'long\'',
181 |     'required': false,
182 |     'default': '\'narrow\''
183 |   },
184 |   {
185 |     'name': 'weekStartsOn',
186 |     'description': '<p>The day of the week to start the calendar on</p>\n',
187 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6',
188 |     'required': false,
189 |     'default': '0'
190 |   }
191 | ]" />
192 | 
193 | <EmitsTable :data="[
194 |   {
195 |     'name': 'update:modelValue',
196 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
197 |     'type': '[date: DateRange]'
198 |   },
199 |   {
200 |     'name': 'update:placeholder',
201 |     'description': '<p>Event handler called whenever the placeholder value changes</p>\n',
202 |     'type': '[date: DateValue]'
203 |   },
204 |   {
205 |     'name': 'update:startValue',
206 |     'description': '<p>Event handler called whenever the start value changes</p>\n',
207 |     'type': '[date: DateValue]'
208 |   }
209 | ]" />
210 | 
211 | <SlotsTable :data="[
212 |   {
213 |     'name': 'date',
214 |     'description': '<p>The current date of the placeholder</p>\n',
215 |     'type': 'DateValue'
216 |   },
217 |   {
218 |     'name': 'grid',
219 |     'description': '<p>The grid of dates</p>\n',
220 |     'type': 'Grid<DateValue>[]'
221 |   },
222 |   {
223 |     'name': 'weekDays',
224 |     'description': '<p>The days of the week</p>\n',
225 |     'type': 'string[]'
226 |   },
227 |   {
228 |     'name': 'weekStartsOn',
229 |     'description': '<p>The start of the week</p>\n',
230 |     'type': '0 | 1 | 2 | 3 | 4 | 5 | 6'
231 |   },
232 |   {
233 |     'name': 'locale',
234 |     'description': '<p>The calendar locale</p>\n',
235 |     'type': 'string'
236 |   },
237 |   {
238 |     'name': 'fixedWeeks',
239 |     'description': '<p>Whether or not to always display 6 weeks in the calendar</p>\n',
240 |     'type': 'boolean'
241 |   },
242 |   {
243 |     'name': 'modelValue',
244 |     'description': '<p>The current date range</p>\n',
245 |     'type': 'DateRange'
246 |   }
247 | ]" />
248 | 
249 | <MethodsTable :data="[
250 |   {
251 |     'name': 'isDateDisabled',
252 |     'description': '<p>A function that returns whether or not a date is disabled</p>\n',
253 |     'type': 'Matcher'
254 |   },
255 |   {
256 |     'name': 'isDateUnavailable',
257 |     'description': '<p>A function that returns whether or not a date is unavailable</p>\n',
258 |     'type': 'Matcher'
259 |   },
260 |   {
261 |     'name': 'isDateHighlightable',
262 |     'description': '<p>A function that returns whether or not a date is hightable</p>\n',
263 |     'type': 'Matcher'
264 |   }
265 | ]" />
266 | 


--------------------------------------------------------------------------------
/docs/content/meta/RovingFocusGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'currentTabStopId',
19 |     'description': '<p>The controlled value of the current stop item. Can be binded as <code>v-model</code>.</p>\n',
20 |     'type': 'string | null',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'defaultCurrentTabStopId',
25 |     'description': '<p>The value of the current stop item.</p>\n<p>Use when you do not need to control the state of the stop item.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'dir',
31 |     'description': '<p>The direction of navigation between items.</p>\n',
32 |     'type': '\'ltr\' | \'rtl\'',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'loop',
37 |     'description': '<p>Whether keyboard navigation should loop around</p>\n',
38 |     'type': 'boolean',
39 |     'required': false,
40 |     'default': 'false'
41 |   },
42 |   {
43 |     'name': 'orientation',
44 |     'description': '<p>The orientation of the group.\nMainly so arrow navigation is done accordingly (left &amp; right vs. up &amp; down)</p>\n',
45 |     'type': '\'vertical\' | \'horizontal\'',
46 |     'required': false
47 |   },
48 |   {
49 |     'name': 'preventScrollOnEntryFocus',
50 |     'description': '<p>When <code>true</code>, will prevent scrolling to the focus item when focused.</p>\n',
51 |     'type': 'boolean',
52 |     'required': false,
53 |     'default': 'false'
54 |   }
55 | ]" />
56 | 
57 | <EmitsTable :data="[
58 |   {
59 |     'name': 'entryFocus',
60 |     'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\n',
61 |     'type': '[event: Event]'
62 |   },
63 |   {
64 |     'name': 'update:currentTabStopId',
65 |     'description': '',
66 |     'type': '[value: string | null]'
67 |   }
68 | ]" />
69 | 
70 | <MethodsTable :data="[
71 |   {
72 |     'name': 'getItems',
73 |     'description': '',
74 |     'type': '(includeDisabledItem?: boolean) => { ref: HTMLElement; value?: any; }[]'
75 |   }
76 | ]" />
77 | 


--------------------------------------------------------------------------------
/docs/content/meta/RovingFocusItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'active',
 6 |     'description': '<p>When <code>true</code>, item will be initially focused.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'allowShiftKey',
12 |     'description': '<p>When <code>true</code>, shift + arrow key will allow focusing on next/previous item.</p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'as',
18 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
19 |     'type': 'AsTag | Component',
20 |     'required': false,
21 |     'default': '\'span\''
22 |   },
23 |   {
24 |     'name': 'asChild',
25 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'focusable',
31 |     'description': '<p>When <code>false</code>, item will not be focusable.</p>\n',
32 |     'type': 'boolean',
33 |     'required': false,
34 |     'default': 'true'
35 |   },
36 |   {
37 |     'name': 'tabStopId',
38 |     'description': '',
39 |     'type': 'string',
40 |     'required': false
41 |   }
42 | ]" />
43 | 


--------------------------------------------------------------------------------
/docs/content/meta/ScrollAreaCorner.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ScrollAreaRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'dir',
19 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
20 |     'type': '\'ltr\' | \'rtl\'',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'scrollHideDelay',
25 |     'description': '<p>If type is set to either <code>scroll</code> or <code>hover</code>, this prop determines the length of time, in milliseconds, &lt;br&gt; before the scrollbars are hidden after the user stops interacting with scrollbars.</p>\n',
26 |     'type': 'number',
27 |     'required': false,
28 |     'default': '600'
29 |   },
30 |   {
31 |     'name': 'type',
32 |     'description': '<p>Describes the nature of scrollbar visibility, similar to how the scrollbar preferences in MacOS control visibility of native scrollbars.</p>\n<p><code>auto</code> - means that scrollbars are visible when content is overflowing on the corresponding orientation. &lt;br&gt;\n<code>always</code> - means that scrollbars are always visible regardless of whether the content is overflowing.&lt;br&gt;\n<code>scroll</code> - means that scrollbars are visible when the user is scrolling along its corresponding orientation.&lt;br&gt;\n<code>hover</code> - when the user is scrolling along its corresponding orientation and when the user is hovering over the scroll area.</p>\n',
33 |     'type': '\'scroll\' | \'always\' | \'hover\' | \'auto\'',
34 |     'required': false,
35 |     'default': '\'hover\''
36 |   }
37 | ]" />
38 | 
39 | <MethodsTable :data="[
40 |   {
41 |     'name': 'scrollTop',
42 |     'description': '<p>Scroll viewport to top</p>\n',
43 |     'type': '() => void'
44 |   },
45 |   {
46 |     'name': 'scrollTopLeft',
47 |     'description': '<p>Scroll viewport to top-left</p>\n',
48 |     'type': '() => void'
49 |   }
50 | ]" />
51 | 


--------------------------------------------------------------------------------
/docs/content/meta/ScrollAreaScrollbar.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'orientation',
25 |     'description': '<p>The orientation of the scrollbar</p>\n',
26 |     'type': '\'vertical\' | \'horizontal\'',
27 |     'required': false,
28 |     'default': '\'vertical\''
29 |   }
30 | ]" />
31 | 


--------------------------------------------------------------------------------
/docs/content/meta/ScrollAreaThumb.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ScrollAreaViewport.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nonce',
19 |     'description': '<p>Will add <code>nonce</code> attribute to the style tag which can be used by Content Security Policy. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code>.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'rounded',
26 |     'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\n',
27 |     'type': 'boolean',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'width',
32 |     'description': '<p>The width of the arrow in pixels.</p>\n',
33 |     'type': 'number',
34 |     'required': false,
35 |     'default': '10'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'arrowPadding',
 18 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 19 |     'type': 'number',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'avoidCollisions',
 37 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'bodyLock',
 43 |     'description': '<p>The document.body will be lock, and scrolling will be disabled.</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionBoundary',
 49 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 50 |     'type': 'Element | (Element | null)[] | null',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'collisionPadding',
 55 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 56 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'disableUpdateOnLayoutShift',
 61 |     'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'forceMount',
 67 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'hideWhenDetached',
 73 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 74 |     'type': 'boolean',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'position',
 79 |     'description': '<p>The positioning mode to use</p>\n<p><code>item-aligned (default)</code> - behaves similarly to a native MacOS menu by positioning content relative to the active item. &lt;br&gt;\n<code>popper</code> - positions content in the same way as our other primitives, for example <code>Popover</code> or <code>DropdownMenu</code>.</p>\n',
 80 |     'type': '\'popper\' | \'item-aligned\'',
 81 |     'required': false
 82 |   },
 83 |   {
 84 |     'name': 'positionStrategy',
 85 |     'description': '<p>The type of CSS position property to use.</p>\n',
 86 |     'type': '\'fixed\' | \'absolute\'',
 87 |     'required': false
 88 |   },
 89 |   {
 90 |     'name': 'prioritizePosition',
 91 |     'description': '<p>Force content to be position within the viewport.</p>\n<p>Might overlap the reference element, which may not be desired.</p>\n',
 92 |     'type': 'boolean',
 93 |     'required': false
 94 |   },
 95 |   {
 96 |     'name': 'reference',
 97 |     'description': '<p>The custom element or virtual element that will be set as the reference\nto position the floating element.</p>\n<p>If provided, it will replace the default anchor element.</p>\n',
 98 |     'type': 'ReferenceElement',
 99 |     'required': false
100 |   },
101 |   {
102 |     'name': 'side',
103 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
104 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
105 |     'required': false
106 |   },
107 |   {
108 |     'name': 'sideOffset',
109 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
110 |     'type': 'number',
111 |     'required': false
112 |   },
113 |   {
114 |     'name': 'sticky',
115 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
116 |     'type': '\'partial\' | \'always\'',
117 |     'required': false
118 |   },
119 |   {
120 |     'name': 'updatePositionStrategy',
121 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
122 |     'type': '\'always\' | \'optimized\'',
123 |     'required': false
124 |   }
125 | ]" />
126 | 
127 | <EmitsTable :data="[
128 |   {
129 |     'name': 'closeAutoFocus',
130 |     'description': '<p>Event handler called when auto-focusing on close.\nCan be prevented.</p>\n',
131 |     'type': '[event: Event]'
132 |   },
133 |   {
134 |     'name': 'escapeKeyDown',
135 |     'description': '<p>Event handler called when the escape key is down.\nCan be prevented.</p>\n',
136 |     'type': '[event: KeyboardEvent]'
137 |   },
138 |   {
139 |     'name': 'pointerDownOutside',
140 |     'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\nCan be prevented.</p>\n',
141 |     'type': '[event: PointerDownOutsideEvent]'
142 |   }
143 | ]" />
144 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectIcon.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'textValue',
25 |     'description': '<p>Optional text used for typeahead purposes.</p>\n<p>By default the typeahead behavior will use the <code>.textContent</code> of the <code>SelectItemText</code> part.</p>\n<p>Use this when the content is complex, or you have non-textual content inside.</p>\n',
26 |     'type': 'string',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'value',
31 |     'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\n',
32 |     'type': 'AcceptableValue',
33 |     'required': true
34 |   }
35 | ]" />
36 | 
37 | <EmitsTable :data="[
38 |   {
39 |     'name': 'select',
40 |     'description': '<p>Event handler called when the selecting item. &lt;br&gt; It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
41 |     'type': '[event: SelectEvent<AcceptableValue>]'
42 |   }
43 | ]" />
44 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectItemIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectItemText.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectLabel.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'for',
19 |     'description': '',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'autocomplete',
 6 |     'description': '<p>Native html input <code>autocomplete</code> attribute.</p>\n',
 7 |     'type': 'string',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'by',
12 |     'description': '<p>Use this to compare objects by a particular field, or pass your own comparison function for complete control over how objects are compared.</p>\n',
13 |     'type': 'string | ((a: AcceptableValue, b: AcceptableValue) => boolean)',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'defaultOpen',
18 |     'description': '<p>The open state of the select when it is initially rendered. Use when you do not need to control its open state.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'defaultValue',
24 |     'description': '<p>The value of the select when initially rendered. Use when you do not need to control the state of the Select</p>\n',
25 |     'type': 'AcceptableValue | AcceptableValue[]',
26 |     'required': false
27 |   },
28 |   {
29 |     'name': 'dir',
30 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
31 |     'type': '\'ltr\' | \'rtl\'',
32 |     'required': false
33 |   },
34 |   {
35 |     'name': 'disabled',
36 |     'description': '<p>When <code>true</code>, prevents the user from interacting with Select</p>\n',
37 |     'type': 'boolean',
38 |     'required': false
39 |   },
40 |   {
41 |     'name': 'modelValue',
42 |     'description': '<p>The controlled value of the Select. Can be bind as <code>v-model</code>.</p>\n',
43 |     'type': 'AcceptableValue | AcceptableValue[]',
44 |     'required': false
45 |   },
46 |   {
47 |     'name': 'multiple',
48 |     'description': '<p>Whether multiple options can be selected or not.</p>\n',
49 |     'type': 'boolean',
50 |     'required': false
51 |   },
52 |   {
53 |     'name': 'name',
54 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
55 |     'type': 'string',
56 |     'required': false
57 |   },
58 |   {
59 |     'name': 'open',
60 |     'description': '<p>The controlled open state of the Select. Can be bind as <code>v-model:open</code>.</p>\n',
61 |     'type': 'boolean',
62 |     'required': false
63 |   },
64 |   {
65 |     'name': 'required',
66 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
67 |     'type': 'boolean',
68 |     'required': false
69 |   }
70 | ]" />
71 | 
72 | <EmitsTable :data="[
73 |   {
74 |     'name': 'update:modelValue',
75 |     'description': '<p>Event handler called when the value changes.</p>\n',
76 |     'type': '[value: AcceptableValue]'
77 |   },
78 |   {
79 |     'name': 'update:open',
80 |     'description': '<p>Event handler called when the open state of the context menu changes.</p>\n',
81 |     'type': '[value: boolean]'
82 |   }
83 | ]" />
84 | 
85 | <SlotsTable :data="[
86 |   {
87 |     'name': 'modelValue',
88 |     'description': '<p>Current input values</p>\n',
89 |     'type': 'AcceptableValue | AcceptableValue[] | undefined'
90 |   },
91 |   {
92 |     'name': 'open',
93 |     'description': '<p>Current open state</p>\n',
94 |     'type': 'boolean'
95 |   }
96 | ]" />
97 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectScrollDownButton.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectScrollUpButton.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectSeparator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'reference',
25 |     'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\n<p>If not provided will use the current component as anchor.</p>\n',
26 |     'type': 'ReferenceElement',
27 |     'required': false
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectValue.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'placeholder',
19 |     'description': '<p>The content that will be rendered inside the <code>SelectValue</code> when no <code>value</code> or <code>defaultValue</code> is set.</p>\n',
20 |     'type': 'string',
21 |     'required': false,
22 |     'default': '\'\''
23 |   }
24 | ]" />
25 | 
26 | <SlotsTable :data="[
27 |   {
28 |     'name': 'selectedLabel',
29 |     'description': '',
30 |     'type': 'string[]'
31 |   },
32 |   {
33 |     'name': 'modelValue',
34 |     'description': '',
35 |     'type': 'AcceptableValue | AcceptableValue[] | undefined'
36 |   }
37 | ]" />
38 | 


--------------------------------------------------------------------------------
/docs/content/meta/SelectViewport.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nonce',
19 |     'description': '<p>Will add <code>nonce</code> attribute to the style tag which can be used by Content Security Policy. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code>.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/Separator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'decorative',
19 |     'description': '<p>Whether or not the component is purely decorative. &lt;br&gt;When <code>true</code>, accessibility-related attributes\nare updated so that that the rendered element is removed from the accessibility tree.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'orientation',
25 |     'description': '<p>Orientation of the component.</p>\n<p>Either <code>vertical</code> or <code>horizontal</code>. Defaults to <code>horizontal</code>.</p>\n',
26 |     'type': '\'vertical\' | \'horizontal\'',
27 |     'required': false,
28 |     'default': '\'horizontal\''
29 |   }
30 | ]" />
31 | 


--------------------------------------------------------------------------------
/docs/content/meta/SliderRange.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SliderRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'span\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultValue',
 19 |     'description': '<p>The value of the slider when initially rendered. Use when you do not need to control the state of the slider.</p>\n',
 20 |     'type': 'number[]',
 21 |     'required': false,
 22 |     'default': '[0]'
 23 |   },
 24 |   {
 25 |     'name': 'dir',
 26 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 27 |     'type': '\'ltr\' | \'rtl\'',
 28 |     'required': false
 29 |   },
 30 |   {
 31 |     'name': 'disabled',
 32 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the slider.</p>\n',
 33 |     'type': 'boolean',
 34 |     'required': false,
 35 |     'default': 'false'
 36 |   },
 37 |   {
 38 |     'name': 'inverted',
 39 |     'description': '<p>Whether the slider is visually inverted.</p>\n',
 40 |     'type': 'boolean',
 41 |     'required': false,
 42 |     'default': 'false'
 43 |   },
 44 |   {
 45 |     'name': 'max',
 46 |     'description': '<p>The maximum value for the range.</p>\n',
 47 |     'type': 'number',
 48 |     'required': false,
 49 |     'default': '100'
 50 |   },
 51 |   {
 52 |     'name': 'min',
 53 |     'description': '<p>The minimum value for the range.</p>\n',
 54 |     'type': 'number',
 55 |     'required': false,
 56 |     'default': '0'
 57 |   },
 58 |   {
 59 |     'name': 'minStepsBetweenThumbs',
 60 |     'description': '<p>The minimum permitted steps between multiple thumbs.</p>\n',
 61 |     'type': 'number',
 62 |     'required': false,
 63 |     'default': '0'
 64 |   },
 65 |   {
 66 |     'name': 'modelValue',
 67 |     'description': '<p>The controlled value of the slider. Can be bind as <code>v-model</code>.</p>\n',
 68 |     'type': 'number[] | null',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'name',
 73 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 74 |     'type': 'string',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'orientation',
 79 |     'description': '<p>The orientation of the slider.</p>\n',
 80 |     'type': '\'vertical\' | \'horizontal\'',
 81 |     'required': false,
 82 |     'default': '\'horizontal\''
 83 |   },
 84 |   {
 85 |     'name': 'required',
 86 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
 87 |     'type': 'boolean',
 88 |     'required': false
 89 |   },
 90 |   {
 91 |     'name': 'step',
 92 |     'description': '<p>The stepping interval.</p>\n',
 93 |     'type': 'number',
 94 |     'required': false,
 95 |     'default': '1'
 96 |   },
 97 |   {
 98 |     'name': 'thumbAlignment',
 99 |     'description': '<p>The alignment of the slider thumb.</p>\n<ul>\n<li><code>contain</code>: thumbs will be contained within the bounds of the track.</li>\n<li><code>overflow</code>: thumbs will not be bound by the track. No extra offset will be added.</li>\n</ul>\n',
100 |     'type': '\'contain\' | \'overflow\'',
101 |     'required': false,
102 |     'default': '\'contain\''
103 |   }
104 | ]" />
105 | 
106 | <EmitsTable :data="[
107 |   {
108 |     'name': 'update:modelValue',
109 |     'description': '<p>Event handler called when the slider value changes</p>\n',
110 |     'type': '[payload: number[]]'
111 |   },
112 |   {
113 |     'name': 'valueCommit',
114 |     'description': '<p>Event handler called when the value changes at the end of an interaction.</p>\n<p>Useful when you only need to capture a final value e.g. to update a backend service.</p>\n',
115 |     'type': '[payload: number[]]'
116 |   }
117 | ]" />
118 | 
119 | <SlotsTable :data="[
120 |   {
121 |     'name': 'modelValue',
122 |     'description': '<p>Current slider values</p>\n',
123 |     'type': 'number[] | null'
124 |   }
125 | ]" />
126 | 


--------------------------------------------------------------------------------
/docs/content/meta/SliderThumb.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SliderTrack.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SplitterGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'autoSaveId',
19 |     'description': '<p>Unique id used to auto-save group arrangement via <code>localStorage</code>.</p>\n',
20 |     'type': 'string | null',
21 |     'required': false,
22 |     'default': 'null'
23 |   },
24 |   {
25 |     'name': 'direction',
26 |     'description': '<p>The group orientation of splitter.</p>\n',
27 |     'type': '\'vertical\' | \'horizontal\'',
28 |     'required': true
29 |   },
30 |   {
31 |     'name': 'id',
32 |     'description': '<p>Group id; falls back to <code>useId</code> when not provided.</p>\n',
33 |     'type': 'string | null',
34 |     'required': false
35 |   },
36 |   {
37 |     'name': 'keyboardResizeBy',
38 |     'description': '<p>Step size when arrow key was pressed.</p>\n',
39 |     'type': 'number | null',
40 |     'required': false,
41 |     'default': '10'
42 |   },
43 |   {
44 |     'name': 'storage',
45 |     'description': '<p>Custom storage API; defaults to localStorage</p>\n',
46 |     'type': 'PanelGroupStorage',
47 |     'required': false,
48 |     'default': 'defaultStorage'
49 |   }
50 | ]" />
51 | 
52 | <EmitsTable :data="[
53 |   {
54 |     'name': 'layout',
55 |     'description': '<p>Event handler called when group layout changes</p>\n',
56 |     'type': '[val: number[]]'
57 |   }
58 | ]" />
59 | 
60 | <SlotsTable :data="[
61 |   {
62 |     'name': 'layout',
63 |     'description': '<p>Current size of layout</p>\n',
64 |     'type': 'number[]'
65 |   }
66 | ]" />
67 | 


--------------------------------------------------------------------------------
/docs/content/meta/SplitterPanel.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'collapsedSize',
 19 |     'description': '<p>The size of panel when it is collapsed.</p>\n',
 20 |     'type': 'number',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'collapsible',
 25 |     'description': '<p>Should panel collapse when resized beyond its <code>minSize</code>. When <code>true</code>, it will be collapsed to <code>collapsedSize</code>.</p>\n',
 26 |     'type': 'boolean',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'defaultSize',
 31 |     'description': '<p>Initial size of panel (numeric value between 1-100)</p>\n',
 32 |     'type': 'number',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'id',
 37 |     'description': '<p>Panel id (unique within group); falls back to <code>useId</code> when not provided</p>\n',
 38 |     'type': 'string',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'maxSize',
 43 |     'description': '<p>The maximum allowable size of panel (numeric value between 1-100); defaults to <code>100</code></p>\n',
 44 |     'type': 'number',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'minSize',
 49 |     'description': '<p>The minimum allowable size of panel (numeric value between 1-100); defaults to <code>10</code></p>\n',
 50 |     'type': 'number',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'order',
 55 |     'description': '<p>The order of panel within group; required for groups with conditionally rendered panels</p>\n',
 56 |     'type': 'number',
 57 |     'required': false
 58 |   }
 59 | ]" />
 60 | 
 61 | <EmitsTable :data="[
 62 |   {
 63 |     'name': 'collapse',
 64 |     'description': '<p>Event handler called when panel is collapsed.</p>\n',
 65 |     'type': '[]'
 66 |   },
 67 |   {
 68 |     'name': 'expand',
 69 |     'description': '<p>Event handler called when panel is expanded.</p>\n',
 70 |     'type': '[]'
 71 |   },
 72 |   {
 73 |     'name': 'resize',
 74 |     'description': '<p>Event handler called when panel is resized; size parameter is a numeric value between 1-100.</p>\n',
 75 |     'type': '[size: number, prevSize: number]'
 76 |   }
 77 | ]" />
 78 | 
 79 | <SlotsTable :data="[
 80 |   {
 81 |     'name': 'isCollapsed',
 82 |     'description': '<p>Is the panel collapsed</p>\n',
 83 |     'type': 'boolean'
 84 |   },
 85 |   {
 86 |     'name': 'isExpanded',
 87 |     'description': '<p>Is the panel expanded</p>\n',
 88 |     'type': 'boolean'
 89 |   },
 90 |   {
 91 |     'name': 'collapse',
 92 |     'description': '<p>If panel is <code>collapsible</code>, collapse it fully.</p>\n',
 93 |     'type': '(): void'
 94 |   },
 95 |   {
 96 |     'name': 'expand',
 97 |     'description': '<p>If panel is currently collapsed, expand it to its most recent size.</p>\n',
 98 |     'type': '(): void'
 99 |   },
100 |   {
101 |     'name': 'resize',
102 |     'description': '<p>Resize panel to the specified percentage (1 - 100).</p>\n',
103 |     'type': '(size: number): void'
104 |   }
105 | ]" />
106 | 
107 | <MethodsTable :data="[
108 |   {
109 |     'name': 'collapse',
110 |     'description': '<p>If panel is <code>collapsible</code>, collapse it fully.</p>\n',
111 |     'type': '() => void'
112 |   },
113 |   {
114 |     'name': 'expand',
115 |     'description': '<p>If panel is currently collapsed, expand it to its most recent size.</p>\n',
116 |     'type': '() => void'
117 |   },
118 |   {
119 |     'name': 'getSize',
120 |     'description': '<p>Gets the current size of the panel as a percentage (1 - 100).</p>\n',
121 |     'type': '() => number'
122 |   },
123 |   {
124 |     'name': 'resize',
125 |     'description': '<p>Resize panel to the specified percentage (1 - 100).</p>\n',
126 |     'type': '(size: number) => void'
127 |   }
128 | ]" />
129 | 


--------------------------------------------------------------------------------
/docs/content/meta/SplitterResizeHandle.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>Disable drag handle</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'hitAreaMargins',
25 |     'description': '<p>Allow this much margin when determining resizable handle hit detection</p>\n',
26 |     'type': 'PointerHitAreaMargins',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'id',
31 |     'description': '<p>Resize handle id (unique within group); falls back to <code>useId</code> when not provided</p>\n',
32 |     'type': 'string',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'tabindex',
37 |     'description': '<p>Tabindex for the handle</p>\n',
38 |     'type': 'number',
39 |     'required': false,
40 |     'default': '0'
41 |   }
42 | ]" />
43 | 
44 | <EmitsTable :data="[
45 |   {
46 |     'name': 'dragging',
47 |     'description': '<p>Event handler called when dragging the handler.</p>\n',
48 |     'type': '[isDragging: boolean]'
49 |   }
50 | ]" />
51 | 


--------------------------------------------------------------------------------
/docs/content/meta/StepperDescription.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'p\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/StepperIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 
19 | <SlotsTable :data="[
20 |   {
21 |     'name': 'step',
22 |     'description': '<p>Current step</p>\n',
23 |     'type': 'number'
24 |   }
25 | ]" />
26 | 


--------------------------------------------------------------------------------
/docs/content/meta/StepperItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'completed',
19 |     'description': '<p>Shows whether the step is completed.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'false'
23 |   },
24 |   {
25 |     'name': 'disabled',
26 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the step.</p>\n',
27 |     'type': 'boolean',
28 |     'required': false,
29 |     'default': 'false'
30 |   },
31 |   {
32 |     'name': 'step',
33 |     'description': '<p>A unique value that associates the stepper item with an index</p>\n',
34 |     'type': 'number',
35 |     'required': true
36 |   }
37 | ]" />
38 | 
39 | <SlotsTable :data="[
40 |   {
41 |     'name': 'state',
42 |     'description': '<p>The current state of the stepper item</p>\n',
43 |     'type': '\'active\' | \'completed\' | \'inactive\''
44 |   }
45 | ]" />
46 | 


--------------------------------------------------------------------------------
/docs/content/meta/StepperRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultValue',
 19 |     'description': '<p>The value of the step that should be active when initially rendered. Use when you do not need to control the state of the steps.</p>\n',
 20 |     'type': 'number',
 21 |     'required': false,
 22 |     'default': '1'
 23 |   },
 24 |   {
 25 |     'name': 'dir',
 26 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 27 |     'type': '\'ltr\' | \'rtl\'',
 28 |     'required': false
 29 |   },
 30 |   {
 31 |     'name': 'linear',
 32 |     'description': '<p>Whether or not the steps must be completed in order.</p>\n',
 33 |     'type': 'boolean',
 34 |     'required': false,
 35 |     'default': 'true'
 36 |   },
 37 |   {
 38 |     'name': 'modelValue',
 39 |     'description': '<p>The controlled value of the step to activate. Can be bound as <code>v-model</code>.</p>\n',
 40 |     'type': 'number',
 41 |     'required': false
 42 |   },
 43 |   {
 44 |     'name': 'orientation',
 45 |     'description': '<p>The orientation the steps are laid out.\nMainly so arrow navigation is done accordingly (left &amp; right vs. up &amp; down).</p>\n',
 46 |     'type': '\'vertical\' | \'horizontal\'',
 47 |     'required': false,
 48 |     'default': '\'horizontal\''
 49 |   }
 50 | ]" />
 51 | 
 52 | <EmitsTable :data="[
 53 |   {
 54 |     'name': 'update:modelValue',
 55 |     'description': '<p>Event handler called when the value changes</p>\n',
 56 |     'type': '[payload: number]'
 57 |   }
 58 | ]" />
 59 | 
 60 | <SlotsTable :data="[
 61 |   {
 62 |     'name': 'modelValue',
 63 |     'description': '<p>Current step</p>\n',
 64 |     'type': 'number | undefined'
 65 |   },
 66 |   {
 67 |     'name': 'totalSteps',
 68 |     'description': '<p>Total number of steps</p>\n',
 69 |     'type': 'number'
 70 |   },
 71 |   {
 72 |     'name': 'isNextDisabled',
 73 |     'description': '<p>Whether or not the next step is disabled</p>\n',
 74 |     'type': 'boolean'
 75 |   },
 76 |   {
 77 |     'name': 'isPrevDisabled',
 78 |     'description': '<p>Whether or not the previous step is disabled</p>\n',
 79 |     'type': 'boolean'
 80 |   },
 81 |   {
 82 |     'name': 'isFirstStep',
 83 |     'description': '<p>Whether or not the first step is active</p>\n',
 84 |     'type': 'boolean'
 85 |   },
 86 |   {
 87 |     'name': 'isLastStep',
 88 |     'description': '<p>Whether or not the last step is active</p>\n',
 89 |     'type': 'boolean'
 90 |   },
 91 |   {
 92 |     'name': 'goToStep',
 93 |     'description': '<p>Go to a specific step</p>\n',
 94 |     'type': '(step: number): void'
 95 |   },
 96 |   {
 97 |     'name': 'nextStep',
 98 |     'description': '<p>Go to the next step</p>\n',
 99 |     'type': '(): void'
100 |   },
101 |   {
102 |     'name': 'prevStep',
103 |     'description': '<p>Go to the previous step</p>\n',
104 |     'type': '(): void'
105 |   },
106 |   {
107 |     'name': 'hasNext',
108 |     'description': '<p>Whether or not there is a next step</p>\n',
109 |     'type': '(): boolean'
110 |   },
111 |   {
112 |     'name': 'hasPrev',
113 |     'description': '<p>Whether or not there is a previous step</p>\n',
114 |     'type': '(): boolean'
115 |   }
116 | ]" />
117 | 
118 | <MethodsTable :data="[
119 |   {
120 |     'name': 'goToStep',
121 |     'description': '',
122 |     'type': '(step: number) => void'
123 |   },
124 |   {
125 |     'name': 'nextStep',
126 |     'description': '',
127 |     'type': '() => void'
128 |   },
129 |   {
130 |     'name': 'prevStep',
131 |     'description': '',
132 |     'type': '() => void'
133 |   },
134 |   {
135 |     'name': 'hasNext',
136 |     'description': '',
137 |     'type': '() => boolean'
138 |   },
139 |   {
140 |     'name': 'hasPrev',
141 |     'description': '',
142 |     'type': '() => boolean'
143 |   }
144 | ]" />
145 | 


--------------------------------------------------------------------------------
/docs/content/meta/StepperSeparator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'decorative',
19 |     'description': '<p>Whether or not the component is purely decorative. &lt;br&gt;When <code>true</code>, accessibility-related attributes\nare updated so that that the rendered element is removed from the accessibility tree.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'orientation',
25 |     'description': '<p>Orientation of the component.</p>\n<p>Either <code>vertical</code> or <code>horizontal</code>. Defaults to <code>horizontal</code>.</p>\n',
26 |     'type': '\'vertical\' | \'horizontal\'',
27 |     'required': false
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/StepperTitle.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'h4\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/StepperTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/SwitchRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The state of the switch when it is initially rendered. Use when you do not need to control its state.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'disabled',
25 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the switch.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'id',
31 |     'description': '',
32 |     'type': 'string',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'modelValue',
37 |     'description': '<p>The controlled state of the switch. Can be bind as <code>v-model</code>.</p>\n',
38 |     'type': 'boolean | null',
39 |     'required': false
40 |   },
41 |   {
42 |     'name': 'name',
43 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
44 |     'type': 'string',
45 |     'required': false
46 |   },
47 |   {
48 |     'name': 'required',
49 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
50 |     'type': 'boolean',
51 |     'required': false
52 |   },
53 |   {
54 |     'name': 'value',
55 |     'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\n',
56 |     'type': 'string',
57 |     'required': false,
58 |     'default': '\'on\''
59 |   }
60 | ]" />
61 | 
62 | <EmitsTable :data="[
63 |   {
64 |     'name': 'update:modelValue',
65 |     'description': '<p>Event handler called when the value of the switch changes.</p>\n',
66 |     'type': '[payload: boolean]'
67 |   }
68 | ]" />
69 | 
70 | <SlotsTable :data="[
71 |   {
72 |     'name': 'modelValue',
73 |     'description': '<p>Current value</p>\n',
74 |     'type': 'boolean'
75 |   }
76 | ]" />
77 | 


--------------------------------------------------------------------------------
/docs/content/meta/SwitchThumb.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/TabsContent.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'forceMount',
19 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'value',
25 |     'description': '<p>A unique value that associates the content with a trigger.</p>\n',
26 |     'type': 'string | number',
27 |     'required': true
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/TabsIndicator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/TabsList.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'loop',
19 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last tab to first, and vice versa.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'true'
23 |   }
24 | ]" />
25 | 


--------------------------------------------------------------------------------
/docs/content/meta/TabsRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'activationMode',
 6 |     'description': '<p>Whether a tab is activated automatically (on focus) or manually (on click).</p>\n',
 7 |     'type': '\'automatic\' | \'manual\'',
 8 |     'required': false,
 9 |     'default': '\'automatic\''
10 |   },
11 |   {
12 |     'name': 'as',
13 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
14 |     'type': 'AsTag | Component',
15 |     'required': false,
16 |     'default': '\'div\''
17 |   },
18 |   {
19 |     'name': 'asChild',
20 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
21 |     'type': 'boolean',
22 |     'required': false
23 |   },
24 |   {
25 |     'name': 'defaultValue',
26 |     'description': '<p>The value of the tab that should be active when initially rendered. Use when you do not need to control the state of the tabs</p>\n',
27 |     'type': 'string | number',
28 |     'required': false
29 |   },
30 |   {
31 |     'name': 'dir',
32 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
33 |     'type': '\'ltr\' | \'rtl\'',
34 |     'required': false
35 |   },
36 |   {
37 |     'name': 'modelValue',
38 |     'description': '<p>The controlled value of the tab to activate. Can be bind as <code>v-model</code>.</p>\n',
39 |     'type': 'string | number',
40 |     'required': false
41 |   },
42 |   {
43 |     'name': 'orientation',
44 |     'description': '<p>The orientation the tabs are laid out.\nMainly so arrow navigation is done accordingly (left &amp; right vs. up &amp; down)</p>\n',
45 |     'type': '\'vertical\' | \'horizontal\'',
46 |     'required': false,
47 |     'default': '\'horizontal\''
48 |   },
49 |   {
50 |     'name': 'unmountOnHide',
51 |     'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\n',
52 |     'type': 'boolean',
53 |     'required': false,
54 |     'default': 'true'
55 |   }
56 | ]" />
57 | 
58 | <EmitsTable :data="[
59 |   {
60 |     'name': 'update:modelValue',
61 |     'description': '<p>Event handler called when the value changes</p>\n',
62 |     'type': '[payload: StringOrNumber]'
63 |   }
64 | ]" />
65 | 
66 | <SlotsTable :data="[
67 |   {
68 |     'name': 'modelValue',
69 |     'description': '<p>Current input values</p>\n',
70 |     'type': 'string | number'
71 |   }
72 | ]" />
73 | 


--------------------------------------------------------------------------------
/docs/content/meta/TabsTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the tab.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false,
22 |     'default': 'false'
23 |   },
24 |   {
25 |     'name': 'value',
26 |     'description': '<p>A unique value that associates the trigger with a content.</p>\n',
27 |     'type': 'string | number',
28 |     'required': true
29 |   }
30 | ]" />
31 | 


--------------------------------------------------------------------------------
/docs/content/meta/TagsInputClear.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/TagsInputInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'input\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'autoFocus',
19 |     'description': '<p>Focus on element when mounted.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'maxLength',
25 |     'description': '<p>Maximum number of character allowed.</p>\n',
26 |     'type': 'number',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'placeholder',
31 |     'description': '<p>The placeholder character to use for empty tags input.</p>\n',
32 |     'type': 'string',
33 |     'required': false
34 |   }
35 | ]" />
36 | 


--------------------------------------------------------------------------------
/docs/content/meta/TagsInputItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the tags input.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'value',
25 |     'description': '<p>Value associated with the tags</p>\n',
26 |     'type': 'string | Record<string, any>',
27 |     'required': true
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/TagsInputItemDelete.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/TagsInputItemText.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/TagsInputRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'addOnBlur',
  6 |     'description': '<p>When <code>true</code> allow adding tags blur input</p>\n',
  7 |     'type': 'boolean',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'addOnPaste',
 12 |     'description': '<p>When <code>true</code>, allow adding tags on paste. Work in conjunction with delimiter prop.</p>\n',
 13 |     'type': 'boolean',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'addOnTab',
 18 |     'description': '<p>When <code>true</code> allow adding tags on tab keydown</p>\n',
 19 |     'type': 'boolean',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'as',
 24 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 25 |     'type': 'AsTag | Component',
 26 |     'required': false,
 27 |     'default': '\'div\''
 28 |   },
 29 |   {
 30 |     'name': 'asChild',
 31 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 32 |     'type': 'boolean',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'convertValue',
 37 |     'description': '<p>Convert the input value to the desired type. Mandatory when using objects as values and using <code>TagsInputInput</code></p>\n',
 38 |     'type': '((value: string) => AcceptableInputValue)',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'defaultValue',
 43 |     'description': '<p>The value of the tags that should be added. Use when you do not need to control the state of the tags input</p>\n',
 44 |     'type': 'AcceptableInputValue[]',
 45 |     'required': false,
 46 |     'default': '[]'
 47 |   },
 48 |   {
 49 |     'name': 'delimiter',
 50 |     'description': '<p>The character or regular expression to trigger the addition of a new tag. Also used to split tags for <code>@paste</code> event</p>\n',
 51 |     'type': 'string | RegExp',
 52 |     'required': false,
 53 |     'default': '\',\''
 54 |   },
 55 |   {
 56 |     'name': 'dir',
 57 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 58 |     'type': '\'ltr\' | \'rtl\'',
 59 |     'required': false
 60 |   },
 61 |   {
 62 |     'name': 'disabled',
 63 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the tags input.</p>\n',
 64 |     'type': 'boolean',
 65 |     'required': false
 66 |   },
 67 |   {
 68 |     'name': 'displayValue',
 69 |     'description': '<p>Display the value of the tag. Useful when you want to apply modifications to the value like adding a suffix or when using object as values</p>\n',
 70 |     'type': '((value: AcceptableInputValue) => string)',
 71 |     'required': false,
 72 |     'default': 'value.toString()'
 73 |   },
 74 |   {
 75 |     'name': 'duplicate',
 76 |     'description': '<p>When <code>true</code>, allow duplicated tags.</p>\n',
 77 |     'type': 'boolean',
 78 |     'required': false
 79 |   },
 80 |   {
 81 |     'name': 'id',
 82 |     'description': '',
 83 |     'type': 'string',
 84 |     'required': false
 85 |   },
 86 |   {
 87 |     'name': 'max',
 88 |     'description': '<p>Maximum number of tags.</p>\n',
 89 |     'type': 'number',
 90 |     'required': false,
 91 |     'default': '0'
 92 |   },
 93 |   {
 94 |     'name': 'modelValue',
 95 |     'description': '<p>The controlled value of the tags input. Can be bind as <code>v-model</code>.</p>\n',
 96 |     'type': 'AcceptableInputValue[] | null',
 97 |     'required': false
 98 |   },
 99 |   {
100 |     'name': 'name',
101 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
102 |     'type': 'string',
103 |     'required': false
104 |   },
105 |   {
106 |     'name': 'required',
107 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
108 |     'type': 'boolean',
109 |     'required': false
110 |   }
111 | ]" />
112 | 
113 | <EmitsTable :data="[
114 |   {
115 |     'name': 'addTag',
116 |     'description': '<p>Event handler called when tag is added</p>\n',
117 |     'type': '[payload: AcceptableInputValue]'
118 |   },
119 |   {
120 |     'name': 'invalid',
121 |     'description': '<p>Event handler called when the value is invalid</p>\n',
122 |     'type': '[payload: AcceptableInputValue]'
123 |   },
124 |   {
125 |     'name': 'removeTag',
126 |     'description': '<p>Event handler called when tag is removed</p>\n',
127 |     'type': '[payload: AcceptableInputValue]'
128 |   },
129 |   {
130 |     'name': 'update:modelValue',
131 |     'description': '<p>Event handler called when the value changes</p>\n',
132 |     'type': '[payload: AcceptableInputValue[]]'
133 |   }
134 | ]" />
135 | 
136 | <SlotsTable :data="[
137 |   {
138 |     'name': 'modelValue',
139 |     'description': '<p>Current input values</p>\n',
140 |     'type': 'string | Record<string, any>'
141 |   }
142 | ]" />
143 | 


--------------------------------------------------------------------------------
/docs/content/meta/TimeFieldInput.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'part',
19 |     'description': '<p>The part of the date to render</p>\n',
20 |     'type': '\'day\' | \'month\' | \'year\' | \'hour\' | \'minute\' | \'second\' | \'dayPeriod\' | \'literal\' | \'timeZoneName\'',
21 |     'required': true
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/TimeFieldRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'div\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultPlaceholder',
 19 |     'description': '<p>The default placeholder date</p>\n',
 20 |     'type': 'TimeValue',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'defaultValue',
 25 |     'description': '<p>The default value for the calendar</p>\n',
 26 |     'type': 'TimeValue',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'dir',
 31 |     'description': '<p>The reading direction of the time field when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 32 |     'type': '\'ltr\' | \'rtl\'',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'disabled',
 37 |     'description': '<p>Whether or not the time field is disabled</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false,
 40 |     'default': 'false'
 41 |   },
 42 |   {
 43 |     'name': 'granularity',
 44 |     'description': '<p>The granularity to use for formatting times. Defaults to minute if a Time is provided, otherwise defaults to minute. The field will render segments for each part of the date up to and including the specified granularity</p>\n',
 45 |     'type': '\'hour\' | \'minute\' | \'second\'',
 46 |     'required': false
 47 |   },
 48 |   {
 49 |     'name': 'hideTimeZone',
 50 |     'description': '<p>Whether or not to hide the time zone segment of the field</p>\n',
 51 |     'type': 'boolean',
 52 |     'required': false
 53 |   },
 54 |   {
 55 |     'name': 'hourCycle',
 56 |     'description': '<p>The hour cycle used for formatting times. Defaults to the local preference</p>\n',
 57 |     'type': '12 | 24',
 58 |     'required': false
 59 |   },
 60 |   {
 61 |     'name': 'id',
 62 |     'description': '<p>Id of the element</p>\n',
 63 |     'type': 'string',
 64 |     'required': false
 65 |   },
 66 |   {
 67 |     'name': 'locale',
 68 |     'description': '<p>The locale to use for formatting dates</p>\n',
 69 |     'type': 'string',
 70 |     'required': false
 71 |   },
 72 |   {
 73 |     'name': 'maxValue',
 74 |     'description': '<p>The maximum date that can be selected</p>\n',
 75 |     'type': 'TimeValue',
 76 |     'required': false
 77 |   },
 78 |   {
 79 |     'name': 'minValue',
 80 |     'description': '<p>The minimum date that can be selected</p>\n',
 81 |     'type': 'TimeValue',
 82 |     'required': false
 83 |   },
 84 |   {
 85 |     'name': 'modelValue',
 86 |     'description': '<p>The controlled checked state of the field. Can be bound as <code>v-model</code>.</p>\n',
 87 |     'type': 'TimeValue | null',
 88 |     'required': false
 89 |   },
 90 |   {
 91 |     'name': 'name',
 92 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
 93 |     'type': 'string',
 94 |     'required': false
 95 |   },
 96 |   {
 97 |     'name': 'placeholder',
 98 |     'description': '<p>The placeholder date, which is used to determine what time to display when no time is selected. This updates as the user navigates the field</p>\n',
 99 |     'type': 'TimeValue',
100 |     'required': false
101 |   },
102 |   {
103 |     'name': 'readonly',
104 |     'description': '<p>Whether or not the time field is readonly</p>\n',
105 |     'type': 'boolean',
106 |     'required': false,
107 |     'default': 'false'
108 |   },
109 |   {
110 |     'name': 'required',
111 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
112 |     'type': 'boolean',
113 |     'required': false
114 |   },
115 |   {
116 |     'name': 'step',
117 |     'description': '<p>The stepping interval for the time fields. Defaults to <code>1</code>.</p>\n',
118 |     'type': 'DateStep',
119 |     'required': false
120 |   }
121 | ]" />
122 | 
123 | <EmitsTable :data="[
124 |   {
125 |     'name': 'update:modelValue',
126 |     'description': '<p>Event handler called whenever the model value changes</p>\n',
127 |     'type': '[date: TimeValue]'
128 |   },
129 |   {
130 |     'name': 'update:placeholder',
131 |     'description': '<p>Event handler called whenever the placeholder value changes</p>\n',
132 |     'type': '[date: TimeValue]'
133 |   }
134 | ]" />
135 | 
136 | <SlotsTable :data="[
137 |   {
138 |     'name': 'modelValue',
139 |     'description': '<p>The current time of the field</p>\n',
140 |     'type': 'TimeValue | undefined'
141 |   },
142 |   {
143 |     'name': 'segments',
144 |     'description': '<p>The time field segment contents</p>\n',
145 |     'type': '{ part: SegmentPart; value: string; }[]'
146 |   },
147 |   {
148 |     'name': 'isInvalid',
149 |     'description': '<p>Value if the input is invalid</p>\n',
150 |     'type': 'boolean'
151 |   }
152 | ]" />
153 | 
154 | <MethodsTable :data="[
155 |   {
156 |     'name': 'setFocusedElement',
157 |     'description': '<p>Helper to set the focused element inside the DateField</p>\n',
158 |     'type': '(el: HTMLElement) => void'
159 |   }
160 | ]" />
161 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastAction.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'altText',
 6 |     'description': '<p>A short description for an alternate way to carry out the action. For screen reader users\nwho will not be able to navigate to the button easily/quickly.</p>\n',
 7 |     'type': 'string',
 8 |     'required': true
 9 |   },
10 |   {
11 |     'name': 'as',
12 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
13 |     'type': 'AsTag | Component',
14 |     'required': false,
15 |     'default': '\'div\''
16 |   },
17 |   {
18 |     'name': 'asChild',
19 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastClose.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastDescription.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastProvider.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'duration',
 6 |     'description': '<p>Time in milliseconds that each toast should remain visible for.</p>\n',
 7 |     'type': 'number',
 8 |     'required': false,
 9 |     'default': '5000'
10 |   },
11 |   {
12 |     'name': 'label',
13 |     'description': '<p>An author-localized label for each toast. Used to help screen reader users\nassociate the interruption with a toast.</p>\n',
14 |     'type': 'string',
15 |     'required': false,
16 |     'default': '\'Notification\''
17 |   },
18 |   {
19 |     'name': 'swipeDirection',
20 |     'description': '<p>Direction of pointer swipe that should close the toast.</p>\n',
21 |     'type': '\'right\' | \'left\' | \'up\' | \'down\'',
22 |     'required': false,
23 |     'default': '\'right\''
24 |   },
25 |   {
26 |     'name': 'swipeThreshold',
27 |     'description': '<p>Distance in pixels that the swipe must pass before a close is triggered.</p>\n',
28 |     'type': 'number',
29 |     'required': false,
30 |     'default': '50'
31 |   }
32 | ]" />
33 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'li\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'defaultOpen',
 19 |     'description': '<p>The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.</p>\n',
 20 |     'type': 'boolean',
 21 |     'required': false,
 22 |     'default': 'true'
 23 |   },
 24 |   {
 25 |     'name': 'duration',
 26 |     'description': '<p>Time in milliseconds that toast should remain visible for. Overrides value\ngiven to <code>ToastProvider</code>.</p>\n',
 27 |     'type': 'number',
 28 |     'required': false
 29 |   },
 30 |   {
 31 |     'name': 'forceMount',
 32 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 33 |     'type': 'boolean',
 34 |     'required': false
 35 |   },
 36 |   {
 37 |     'name': 'open',
 38 |     'description': '<p>The controlled open state of the dialog. Can be bind as <code>v-model:open</code>.</p>\n',
 39 |     'type': 'boolean',
 40 |     'required': false
 41 |   },
 42 |   {
 43 |     'name': 'type',
 44 |     'description': '<p>Control the sensitivity of the toast for accessibility purposes.</p>\n<p>For toasts that are the result of a user action, choose <code>foreground</code>. Toasts generated from background tasks should use <code>background</code>.</p>\n',
 45 |     'type': '\'foreground\' | \'background\'',
 46 |     'required': false,
 47 |     'default': '\'foreground\''
 48 |   }
 49 | ]" />
 50 | 
 51 | <EmitsTable :data="[
 52 |   {
 53 |     'name': 'escapeKeyDown',
 54 |     'description': '<p>Event handler called when the escape key is down. It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
 55 |     'type': '[event: KeyboardEvent]'
 56 |   },
 57 |   {
 58 |     'name': 'pause',
 59 |     'description': '<p>Event handler called when the dismiss timer is paused. This occurs when the pointer is moved over the viewport, the viewport is focused or when the window is blurred.</p>\n',
 60 |     'type': '[]'
 61 |   },
 62 |   {
 63 |     'name': 'resume',
 64 |     'description': '<p>Event handler called when the dismiss timer is resumed. This occurs when the pointer is moved away from the viewport, the viewport is blurred or when the window is focused.</p>\n',
 65 |     'type': '[]'
 66 |   },
 67 |   {
 68 |     'name': 'swipeCancel',
 69 |     'description': '<p>Event handler called when swipe interaction is cancelled. It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
 70 |     'type': '[event: SwipeEvent]'
 71 |   },
 72 |   {
 73 |     'name': 'swipeEnd',
 74 |     'description': '<p>Event handler called at the end of a swipe interaction. It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
 75 |     'type': '[event: SwipeEvent]'
 76 |   },
 77 |   {
 78 |     'name': 'swipeMove',
 79 |     'description': '<p>Event handler called during a swipe interaction. It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
 80 |     'type': '[event: SwipeEvent]'
 81 |   },
 82 |   {
 83 |     'name': 'swipeStart',
 84 |     'description': '<p>Event handler called when starting a swipe interaction. It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
 85 |     'type': '[event: SwipeEvent]'
 86 |   },
 87 |   {
 88 |     'name': 'update:open',
 89 |     'description': '<p>Event handler called when the open state changes</p>\n',
 90 |     'type': '[value: boolean]'
 91 |   }
 92 | ]" />
 93 | 
 94 | <SlotsTable :data="[
 95 |   {
 96 |     'name': 'open',
 97 |     'description': '<p>Current open state</p>\n',
 98 |     'type': 'boolean'
 99 |   },
100 |   {
101 |     'name': 'remaining',
102 |     'description': '<p>Remaining time (in ms)</p>\n',
103 |     'type': 'number'
104 |   },
105 |   {
106 |     'name': 'duration',
107 |     'description': '<p>Total time the toast will remain visible for (in ms)</p>\n',
108 |     'type': 'number'
109 |   }
110 | ]" />
111 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastTitle.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToastViewport.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'ol\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'hotkey',
19 |     'description': '<p>The keys to use as the keyboard shortcut that will move focus to the toast viewport.</p>\n',
20 |     'type': 'string[]',
21 |     'required': false,
22 |     'default': '[\'F8\']'
23 |   },
24 |   {
25 |     'name': 'label',
26 |     'description': '<p>An author-localized label for the toast viewport to provide context for screen reader users\nwhen navigating page landmarks. The available <code>{hotkey}</code> placeholder will be replaced for you.\nAlternatively, you can pass in a custom function to generate the label.</p>\n',
27 |     'type': 'string | ((hotkey: string) => string)',
28 |     'required': false,
29 |     'default': '\'Notifications ({hotkey})\''
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/Toggle.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The pressed state of the toggle when it is initially rendered. Use when you do not need to control its open state.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'disabled',
25 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false,
28 |     'default': 'false'
29 |   },
30 |   {
31 |     'name': 'modelValue',
32 |     'description': '<p>The controlled pressed state of the toggle. Can be bind as <code>v-model</code>.</p>\n',
33 |     'type': 'boolean | null',
34 |     'required': false
35 |   },
36 |   {
37 |     'name': 'name',
38 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
39 |     'type': 'string',
40 |     'required': false
41 |   },
42 |   {
43 |     'name': 'required',
44 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
45 |     'type': 'boolean',
46 |     'required': false
47 |   }
48 | ]" />
49 | 
50 | <EmitsTable :data="[
51 |   {
52 |     'name': 'update:modelValue',
53 |     'description': '<p>Event handler called when the value of the toggle changes.</p>\n',
54 |     'type': '[value: boolean]'
55 |   }
56 | ]" />
57 | 
58 | <SlotsTable :data="[
59 |   {
60 |     'name': 'modelValue',
61 |     'description': '<p>Current value</p>\n',
62 |     'type': 'boolean'
63 |   },
64 |   {
65 |     'name': 'state',
66 |     'description': '<p>Current state</p>\n',
67 |     'type': '\'on\' | \'off\''
68 |   },
69 |   {
70 |     'name': 'pressed',
71 |     'description': '<p>Current pressed state</p>\n',
72 |     'type': 'boolean'
73 |   },
74 |   {
75 |     'name': 'disabled',
76 |     'description': '<p>Current disabled state</p>\n',
77 |     'type': 'boolean'
78 |   }
79 | ]" />
80 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToggleGroupItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'value',
25 |     'description': '<p>A string value for the toggle group item. All items within a toggle group should use a unique value.</p>\n',
26 |     'type': 'AcceptableValue',
27 |     'required': true
28 |   }
29 | ]" />
30 | 
31 | <SlotsTable :data="[
32 |   {
33 |     'name': 'modelValue',
34 |     'description': '<p>Current value</p>\n',
35 |     'type': 'boolean'
36 |   },
37 |   {
38 |     'name': 'state',
39 |     'description': '<p>Current state</p>\n',
40 |     'type': '\'on\' | \'off\''
41 |   },
42 |   {
43 |     'name': 'pressed',
44 |     'description': '<p>Current pressed state</p>\n',
45 |     'type': 'boolean'
46 |   },
47 |   {
48 |     'name': 'disabled',
49 |     'description': '<p>Current disabled state</p>\n',
50 |     'type': 'boolean'
51 |   }
52 | ]" />
53 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToggleGroupRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The default active value of the item(s).</p>\n<p>Use when you do not need to control the state of the item(s).</p>\n',
20 |     'type': 'AcceptableValue | AcceptableValue[]',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'dir',
25 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
26 |     'type': '\'ltr\' | \'rtl\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'disabled',
31 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle group and all its items.</p>\n',
32 |     'type': 'boolean',
33 |     'required': false,
34 |     'default': 'false'
35 |   },
36 |   {
37 |     'name': 'loop',
38 |     'description': '<p>When <code>loop</code> and <code>rovingFocus</code> is <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
39 |     'type': 'boolean',
40 |     'required': false,
41 |     'default': 'true'
42 |   },
43 |   {
44 |     'name': 'modelValue',
45 |     'description': '<p>The controlled value of the active item(s).</p>\n<p>Use this when you need to control the state of the items. Can be binded with <code>v-model</code></p>\n',
46 |     'type': 'AcceptableValue | AcceptableValue[]',
47 |     'required': false
48 |   },
49 |   {
50 |     'name': 'name',
51 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
52 |     'type': 'string',
53 |     'required': false
54 |   },
55 |   {
56 |     'name': 'orientation',
57 |     'description': '<p>The orientation of the component, which determines how focus moves: <code>horizontal</code> for left/right arrows and <code>vertical</code> for up/down arrows.</p>\n',
58 |     'type': '\'vertical\' | \'horizontal\'',
59 |     'required': false
60 |   },
61 |   {
62 |     'name': 'required',
63 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
64 |     'type': 'boolean',
65 |     'required': false
66 |   },
67 |   {
68 |     'name': 'rovingFocus',
69 |     'description': '<p>When <code>false</code>, navigating through the items using arrow keys will be disabled.</p>\n',
70 |     'type': 'boolean',
71 |     'required': false,
72 |     'default': 'true'
73 |   },
74 |   {
75 |     'name': 'type',
76 |     'description': '<p>Determines whether a &quot;single&quot; or &quot;multiple&quot; items can be selected at a time.</p>\n<p>This prop will overwrite the inferred type from <code>modelValue</code> and <code>defaultValue</code>.</p>\n',
77 |     'type': '\'single\' | \'multiple\'',
78 |     'required': false
79 |   }
80 | ]" />
81 | 
82 | <EmitsTable :data="[
83 |   {
84 |     'name': 'update:modelValue',
85 |     'description': '<p>Event handler called when the value of the toggle changes.</p>\n',
86 |     'type': '[payload: AcceptableValue | AcceptableValue[]]'
87 |   }
88 | ]" />
89 | 
90 | <SlotsTable :data="[
91 |   {
92 |     'name': 'modelValue',
93 |     'description': '<p>Current toggle values</p>\n',
94 |     'type': 'AcceptableValue | AcceptableValue[] | undefined'
95 |   }
96 | ]" />
97 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToolbarButton.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '',
20 |     'type': 'boolean',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToolbarLink.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'a\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToolbarRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'dir',
19 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
20 |     'type': '\'ltr\' | \'rtl\'',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'loop',
25 |     'description': '<p>When <code>true</code>, keyboard navigation will loop from last tab to first, and vice versa.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'orientation',
31 |     'description': '<p>The orientation of the toolbar</p>\n',
32 |     'type': '\'vertical\' | \'horizontal\'',
33 |     'required': false,
34 |     'default': '\'horizontal\''
35 |   }
36 | ]" />
37 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToolbarSeparator.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   }
17 | ]" />
18 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToolbarToggleGroup.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'defaultValue',
19 |     'description': '<p>The default active value of the item(s).</p>\n<p>Use when you do not need to control the state of the item(s).</p>\n',
20 |     'type': 'AcceptableValue | AcceptableValue[]',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'dir',
25 |     'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
26 |     'type': '\'ltr\' | \'rtl\'',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'disabled',
31 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle group and all its items.</p>\n',
32 |     'type': 'boolean',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'loop',
37 |     'description': '<p>When <code>loop</code> and <code>rovingFocus</code> is <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\n',
38 |     'type': 'boolean',
39 |     'required': false
40 |   },
41 |   {
42 |     'name': 'modelValue',
43 |     'description': '<p>The controlled value of the active item(s).</p>\n<p>Use this when you need to control the state of the items. Can be binded with <code>v-model</code></p>\n',
44 |     'type': 'AcceptableValue | AcceptableValue[]',
45 |     'required': false
46 |   },
47 |   {
48 |     'name': 'name',
49 |     'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\n',
50 |     'type': 'string',
51 |     'required': false
52 |   },
53 |   {
54 |     'name': 'orientation',
55 |     'description': '<p>The orientation of the component, which determines how focus moves: <code>horizontal</code> for left/right arrows and <code>vertical</code> for up/down arrows.</p>\n',
56 |     'type': '\'vertical\' | \'horizontal\'',
57 |     'required': false
58 |   },
59 |   {
60 |     'name': 'required',
61 |     'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\n',
62 |     'type': 'boolean',
63 |     'required': false
64 |   },
65 |   {
66 |     'name': 'rovingFocus',
67 |     'description': '<p>When <code>false</code>, navigating through the items using arrow keys will be disabled.</p>\n',
68 |     'type': 'boolean',
69 |     'required': false
70 |   },
71 |   {
72 |     'name': 'type',
73 |     'description': '<p>Determines whether a &quot;single&quot; or &quot;multiple&quot; items can be selected at a time.</p>\n<p>This prop will overwrite the inferred type from <code>modelValue</code> and <code>defaultValue</code>.</p>\n',
74 |     'type': '\'single\' | \'multiple\'',
75 |     'required': false
76 |   }
77 | ]" />
78 | 
79 | <EmitsTable :data="[
80 |   {
81 |     'name': 'update:modelValue',
82 |     'description': '<p>Event handler called when the value of the toggle changes.</p>\n',
83 |     'type': '[payload: AcceptableValue | AcceptableValue[]]'
84 |   }
85 | ]" />
86 | 


--------------------------------------------------------------------------------
/docs/content/meta/ToolbarToggleItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'value',
25 |     'description': '<p>A string value for the toggle group item. All items within a toggle group should use a unique value.</p>\n',
26 |     'type': 'AcceptableValue',
27 |     'required': true
28 |   }
29 | ]" />
30 | 


--------------------------------------------------------------------------------
/docs/content/meta/TooltipArrow.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'svg\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'height',
19 |     'description': '<p>The height of the arrow in pixels.</p>\n',
20 |     'type': 'number',
21 |     'required': false,
22 |     'default': '5'
23 |   },
24 |   {
25 |     'name': 'width',
26 |     'description': '<p>The width of the arrow in pixels.</p>\n',
27 |     'type': 'number',
28 |     'required': false,
29 |     'default': '10'
30 |   }
31 | ]" />
32 | 


--------------------------------------------------------------------------------
/docs/content/meta/TooltipContent.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'align',
  6 |     'description': '<p>The preferred alignment against the trigger.\nMay change when collisions occur.</p>\n',
  7 |     'type': '\'start\' | \'center\' | \'end\'',
  8 |     'required': false
  9 |   },
 10 |   {
 11 |     'name': 'alignOffset',
 12 |     'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\n',
 13 |     'type': 'number',
 14 |     'required': false
 15 |   },
 16 |   {
 17 |     'name': 'ariaLabel',
 18 |     'description': '<p>By default, screenreaders will announce the content inside\nthe component. If this is not descriptive enough, or you have\ncontent that cannot be announced, use aria-label as a more\ndescriptive label.</p>\n',
 19 |     'type': 'string',
 20 |     'required': false
 21 |   },
 22 |   {
 23 |     'name': 'arrowPadding',
 24 |     'description': '<p>The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.</p>\n',
 25 |     'type': 'number',
 26 |     'required': false
 27 |   },
 28 |   {
 29 |     'name': 'as',
 30 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 31 |     'type': 'AsTag | Component',
 32 |     'required': false,
 33 |     'default': '\'div\''
 34 |   },
 35 |   {
 36 |     'name': 'asChild',
 37 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 38 |     'type': 'boolean',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'avoidCollisions',
 43 |     'description': '<p>When <code>true</code>, overrides the side and align preferences\nto prevent collisions with boundary edges.</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'collisionBoundary',
 49 |     'description': '<p>The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.</p>\n',
 50 |     'type': 'Element | (Element | null)[] | null',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'collisionPadding',
 55 |     'description': '<p>The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\n',
 56 |     'type': 'number | Partial<Record<\'top\' | \'right\' | \'bottom\' | \'left\', number>>',
 57 |     'required': false
 58 |   },
 59 |   {
 60 |     'name': 'forceMount',
 61 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
 62 |     'type': 'boolean',
 63 |     'required': false
 64 |   },
 65 |   {
 66 |     'name': 'hideWhenDetached',
 67 |     'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\n',
 68 |     'type': 'boolean',
 69 |     'required': false
 70 |   },
 71 |   {
 72 |     'name': 'positionStrategy',
 73 |     'description': '<p>The type of CSS position property to use.</p>\n',
 74 |     'type': '\'fixed\' | \'absolute\'',
 75 |     'required': false
 76 |   },
 77 |   {
 78 |     'name': 'side',
 79 |     'description': '<p>The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.</p>\n',
 80 |     'type': '\'top\' | \'right\' | \'bottom\' | \'left\'',
 81 |     'required': false,
 82 |     'default': '\'top\''
 83 |   },
 84 |   {
 85 |     'name': 'sideOffset',
 86 |     'description': '<p>The distance in pixels from the trigger.</p>\n',
 87 |     'type': 'number',
 88 |     'required': false
 89 |   },
 90 |   {
 91 |     'name': 'sticky',
 92 |     'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\nregardless.</p>\n',
 93 |     'type': '\'partial\' | \'always\'',
 94 |     'required': false
 95 |   },
 96 |   {
 97 |     'name': 'updatePositionStrategy',
 98 |     'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\n',
 99 |     'type': '\'always\' | \'optimized\'',
100 |     'required': false
101 |   }
102 | ]" />
103 | 
104 | <EmitsTable :data="[
105 |   {
106 |     'name': 'escapeKeyDown',
107 |     'description': '<p>Event handler called when focus moves to the destructive action after opening. It can be prevented by calling <code>event.preventDefault</code></p>\n',
108 |     'type': '[event: KeyboardEvent]'
109 |   },
110 |   {
111 |     'name': 'pointerDownOutside',
112 |     'description': '<p>Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
113 |     'type': '[event: Event]'
114 |   }
115 | ]" />
116 | 


--------------------------------------------------------------------------------
/docs/content/meta/TooltipPortal.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defer',
 6 |     'description': '<p>Defer the resolving of a Teleport target until other parts of the\napplication have mounted (requires Vue 3.5.0+)</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\' target=\'_blank\'>reference</a></p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'disabled',
12 |     'description': '<p>Disable teleport and render the component inline</p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\' target=\'_blank\'>reference</a></p>\n',
13 |     'type': 'boolean',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'forceMount',
18 |     'description': '<p>Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.</p>\n',
19 |     'type': 'boolean',
20 |     'required': false
21 |   },
22 |   {
23 |     'name': 'to',
24 |     'description': '<p>Vue native teleport component prop <code>:to</code></p>\n<p><a href=\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\' target=\'_blank\'>reference</a></p>\n',
25 |     'type': 'string | HTMLElement',
26 |     'required': false
27 |   }
28 | ]" />
29 | 


--------------------------------------------------------------------------------
/docs/content/meta/TooltipProvider.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'delayDuration',
 6 |     'description': '<p>The duration from when the pointer enters the trigger until the tooltip gets opened.</p>\n',
 7 |     'type': 'number',
 8 |     'required': false,
 9 |     'default': '700'
10 |   },
11 |   {
12 |     'name': 'disableClosingTrigger',
13 |     'description': '<p>When <code>true</code>, clicking on trigger will not close the content.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disabled',
19 |     'description': '<p>When <code>true</code>, disable tooltip</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'disableHoverableContent',
25 |     'description': '<p>When <code>true</code>, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.</p>\n',
26 |     'type': 'boolean',
27 |     'required': false,
28 |     'default': 'false'
29 |   },
30 |   {
31 |     'name': 'ignoreNonKeyboardFocus',
32 |     'description': '<p>Prevent the tooltip from opening if the focus did not come from\nthe keyboard by matching against the <code>:focus-visible</code> selector.\nThis is useful if you want to avoid opening it when switching\nbrowser tabs or closing a dialog.</p>\n',
33 |     'type': 'boolean',
34 |     'required': false,
35 |     'default': 'false'
36 |   },
37 |   {
38 |     'name': 'skipDelayDuration',
39 |     'description': '<p>How much time a user has to enter another trigger without incurring a delay again.</p>\n',
40 |     'type': 'number',
41 |     'required': false,
42 |     'default': '300'
43 |   }
44 | ]" />
45 | 


--------------------------------------------------------------------------------
/docs/content/meta/TooltipRoot.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'defaultOpen',
 6 |     'description': '<p>The open state of the tooltip when it is initially rendered.\nUse when you do not need to control its open state.</p>\n',
 7 |     'type': 'boolean',
 8 |     'required': false,
 9 |     'default': 'false'
10 |   },
11 |   {
12 |     'name': 'delayDuration',
13 |     'description': '<p>Override the duration given to the <code>Provider</code> to customise\nthe open delay for a specific tooltip.</p>\n',
14 |     'type': 'number',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'disableClosingTrigger',
19 |     'description': '<p>When <code>true</code>, clicking on trigger will not close the content.</p>\n',
20 |     'type': 'boolean',
21 |     'required': false
22 |   },
23 |   {
24 |     'name': 'disabled',
25 |     'description': '<p>When <code>true</code>, disable tooltip</p>\n',
26 |     'type': 'boolean',
27 |     'required': false
28 |   },
29 |   {
30 |     'name': 'disableHoverableContent',
31 |     'description': '<p>Prevents Tooltip.Content from remaining open when hovering.\nDisabling this has accessibility consequences. Inherits\nfrom Tooltip.Provider.</p>\n',
32 |     'type': 'boolean',
33 |     'required': false
34 |   },
35 |   {
36 |     'name': 'ignoreNonKeyboardFocus',
37 |     'description': '<p>Prevent the tooltip from opening if the focus did not come from\nthe keyboard by matching against the <code>:focus-visible</code> selector.\nThis is useful if you want to avoid opening it when switching\nbrowser tabs or closing a dialog.</p>\n',
38 |     'type': 'boolean',
39 |     'required': false
40 |   },
41 |   {
42 |     'name': 'open',
43 |     'description': '<p>The controlled open state of the tooltip.</p>\n',
44 |     'type': 'boolean',
45 |     'required': false
46 |   }
47 | ]" />
48 | 
49 | <EmitsTable :data="[
50 |   {
51 |     'name': 'update:open',
52 |     'description': '<p>Event handler called when the open state of the tooltip changes.</p>\n',
53 |     'type': '[value: boolean]'
54 |   }
55 | ]" />
56 | 
57 | <SlotsTable :data="[
58 |   {
59 |     'name': 'open',
60 |     'description': '<p>Current open state</p>\n',
61 |     'type': 'boolean'
62 |   }
63 | ]" />
64 | 


--------------------------------------------------------------------------------
/docs/content/meta/TooltipTrigger.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'button\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'reference',
19 |     'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\n<p>If not provided will use the current component as anchor.</p>\n',
20 |     'type': 'ReferenceElement',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/TreeItem.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'li\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'level',
19 |     'description': '<p>Level of depth</p>\n',
20 |     'type': 'number',
21 |     'required': true
22 |   },
23 |   {
24 |     'name': 'value',
25 |     'description': '<p>Value given to this item</p>\n',
26 |     'type': 'Record<string, any>',
27 |     'required': true
28 |   }
29 | ]" />
30 | 
31 | <EmitsTable :data="[
32 |   {
33 |     'name': 'select',
34 |     'description': '<p>Event handler called when the selecting item. &lt;br&gt; It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
35 |     'type': '[event: SelectEvent<Record<string, any>>]'
36 |   },
37 |   {
38 |     'name': 'toggle',
39 |     'description': '<p>Event handler called when the selecting item. &lt;br&gt; It can be prevented by calling <code>event.preventDefault</code>.</p>\n',
40 |     'type': '[event: ToggleEvent<Record<string, any>>]'
41 |   }
42 | ]" />
43 | 
44 | <SlotsTable :data="[
45 |   {
46 |     'name': 'isExpanded',
47 |     'description': '',
48 |     'type': 'boolean'
49 |   },
50 |   {
51 |     'name': 'isSelected',
52 |     'description': '',
53 |     'type': 'boolean'
54 |   },
55 |   {
56 |     'name': 'isIndeterminate',
57 |     'description': '',
58 |     'type': 'boolean | undefined'
59 |   },
60 |   {
61 |     'name': 'handleToggle',
62 |     'description': '',
63 |     'type': '(): void'
64 |   },
65 |   {
66 |     'name': 'handleSelect',
67 |     'description': '',
68 |     'type': '(): void'
69 |   }
70 | ]" />
71 | 


--------------------------------------------------------------------------------
/docs/content/meta/TreeRoot.md:
--------------------------------------------------------------------------------
  1 | <!-- This file was automatic generated. Do not edit it manually -->
  2 | 
  3 | <PropsTable :data="[
  4 |   {
  5 |     'name': 'as',
  6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
  7 |     'type': 'AsTag | Component',
  8 |     'required': false,
  9 |     'default': '\'ul\''
 10 |   },
 11 |   {
 12 |     'name': 'asChild',
 13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
 14 |     'type': 'boolean',
 15 |     'required': false
 16 |   },
 17 |   {
 18 |     'name': 'bubbleSelect',
 19 |     'description': '<p>When <code>true</code>, selecting children will update the parent state.</p>\n',
 20 |     'type': 'boolean',
 21 |     'required': false
 22 |   },
 23 |   {
 24 |     'name': 'defaultExpanded',
 25 |     'description': '<p>The value of the expanded tree when initially rendered. Use when you do not need to control the state of the expanded tree</p>\n',
 26 |     'type': 'string[]',
 27 |     'required': false
 28 |   },
 29 |   {
 30 |     'name': 'defaultValue',
 31 |     'description': '<p>The value of the tree when initially rendered. Use when you do not need to control the state of the tree</p>\n',
 32 |     'type': 'Record<string, any> | Record<string, any>[]',
 33 |     'required': false
 34 |   },
 35 |   {
 36 |     'name': 'dir',
 37 |     'description': '<p>The reading direction of the listbox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\n',
 38 |     'type': '\'ltr\' | \'rtl\'',
 39 |     'required': false
 40 |   },
 41 |   {
 42 |     'name': 'disabled',
 43 |     'description': '<p>When <code>true</code>, prevents the user from interacting with tree</p>\n',
 44 |     'type': 'boolean',
 45 |     'required': false
 46 |   },
 47 |   {
 48 |     'name': 'expanded',
 49 |     'description': '<p>The controlled value of the expanded item. Can be binded with with <code>v-model</code>.</p>\n',
 50 |     'type': 'string[]',
 51 |     'required': false
 52 |   },
 53 |   {
 54 |     'name': 'getChildren',
 55 |     'description': '<p>This function is passed the index of each item and should return a list of children for that item</p>\n',
 56 |     'type': '((val: Record<string, any>) => Record<string, any>[])',
 57 |     'required': false,
 58 |     'default': 'val.children'
 59 |   },
 60 |   {
 61 |     'name': 'getKey',
 62 |     'description': '<p>This function is passed the index of each item and should return a unique key for that item</p>\n',
 63 |     'type': '(val: Record<string, any>): string',
 64 |     'required': true
 65 |   },
 66 |   {
 67 |     'name': 'items',
 68 |     'description': '<p>List of items</p>\n',
 69 |     'type': 'Record<string, any>[]',
 70 |     'required': false
 71 |   },
 72 |   {
 73 |     'name': 'modelValue',
 74 |     'description': '<p>The controlled value of the tree. Can be binded with with <code>v-model</code>.</p>\n',
 75 |     'type': 'Record<string, any> | Record<string, any>[]',
 76 |     'required': false
 77 |   },
 78 |   {
 79 |     'name': 'multiple',
 80 |     'description': '<p>Whether multiple options can be selected or not.</p>\n',
 81 |     'type': 'boolean',
 82 |     'required': false
 83 |   },
 84 |   {
 85 |     'name': 'propagateSelect',
 86 |     'description': '<p>When <code>true</code>, selecting parent will select the descendants.</p>\n',
 87 |     'type': 'boolean',
 88 |     'required': false
 89 |   },
 90 |   {
 91 |     'name': 'selectionBehavior',
 92 |     'description': '<p>How multiple selection should behave in the collection.</p>\n',
 93 |     'type': '\'toggle\' | \'replace\'',
 94 |     'required': false,
 95 |     'default': '\'toggle\''
 96 |   }
 97 | ]" />
 98 | 
 99 | <EmitsTable :data="[
100 |   {
101 |     'name': 'update:expanded',
102 |     'description': '',
103 |     'type': '[val: string[]]'
104 |   },
105 |   {
106 |     'name': 'update:modelValue',
107 |     'description': '<p>Event handler called when the value of the toggle changes.</p>\n',
108 |     'type': '[val: Record<string, any> | Record<string, any>[]]'
109 |   }
110 | ]" />
111 | 
112 | <SlotsTable :data="[
113 |   {
114 |     'name': 'flattenItems',
115 |     'description': '',
116 |     'type': 'FlattenedItem<Record<string, any>>[]'
117 |   },
118 |   {
119 |     'name': 'modelValue',
120 |     'description': '',
121 |     'type': 'Record<string, any> | Record<string, any>[]'
122 |   },
123 |   {
124 |     'name': 'expanded',
125 |     'description': '',
126 |     'type': 'string[]'
127 |   }
128 | ]" />
129 | 


--------------------------------------------------------------------------------
/docs/content/meta/TreeVirtualizer.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'estimateSize',
 6 |     'description': '<p>Estimated size (in px) of each item</p>\n',
 7 |     'type': 'number',
 8 |     'required': false
 9 |   },
10 |   {
11 |     'name': 'overscan',
12 |     'description': '<p>Number of items rendered outside the visible area</p>\n',
13 |     'type': 'number',
14 |     'required': false
15 |   },
16 |   {
17 |     'name': 'textContent',
18 |     'description': '<p>Text content for each item to achieve type-ahead feature</p>\n',
19 |     'type': '((item: Record<string, any>) => string)',
20 |     'required': false
21 |   }
22 | ]" />
23 | 
24 | <SlotsTable :data="[
25 |   {
26 |     'name': 'item',
27 |     'description': '',
28 |     'type': 'FlattenedItem<Record<string, any>>'
29 |   },
30 |   {
31 |     'name': 'virtualizer',
32 |     'description': '',
33 |     'type': 'Virtualizer<Element | Window, Element>'
34 |   },
35 |   {
36 |     'name': 'virtualItem',
37 |     'description': '',
38 |     'type': 'VirtualItem'
39 |   }
40 | ]" />
41 | 


--------------------------------------------------------------------------------
/docs/content/meta/Viewport.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'div\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'nonce',
19 |     'description': '<p>Will add <code>nonce</code> attribute to the style tag which can be used by Content Security Policy. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code>.</p>\n',
20 |     'type': 'string',
21 |     'required': false
22 |   }
23 | ]" />
24 | 


--------------------------------------------------------------------------------
/docs/content/meta/VisuallyHidden.md:
--------------------------------------------------------------------------------
 1 | <!-- This file was automatic generated. Do not edit it manually -->
 2 | 
 3 | <PropsTable :data="[
 4 |   {
 5 |     'name': 'as',
 6 |     'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',
 7 |     'type': 'AsTag | Component',
 8 |     'required': false,
 9 |     'default': '\'span\''
10 |   },
11 |   {
12 |     'name': 'asChild',
13 |     'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\'https://www.reka-ui.com/docs/guides/composition\'>Composition</a> guide for more details.</p>\n',
14 |     'type': 'boolean',
15 |     'required': false
16 |   },
17 |   {
18 |     'name': 'feature',
19 |     'description': '',
20 |     'type': '\'focusable\' | \'fully-hidden\'',
21 |     'required': false,
22 |     'default': '\'focusable\''
23 |   }
24 | ]" />
25 | 


--------------------------------------------------------------------------------
/docs/content/showcase.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | layout: showcase
 3 | 
 4 | description: Showcase your packages or projects made with Reka UI
 5 | 
 6 | packages:
 7 |   - title: Shadcn Vue
 8 |     description: An unofficial, community-led Vue port of shadcn/ui.
 9 |     url: https://www.shadcn-vue.com/
10 |     image: https://www.shadcn-vue.com/og.png
11 | 
12 |   - title: Nuxt UI
13 |     description: A UI Library for Modern Web Apps, powered by Vue & Tailwind CSS.
14 |     url: https://ui3.nuxt.dev/
15 |     image: https://ui3.nuxt.dev/og-image.png
16 | 
17 |   - title: UI Thing
18 |     description: Reusable Nuxt 3 components.
19 |     url: https://ui-thing.behonbaker.com/getting-started/introduction
20 |     image: https://ui-thing.behonbaker.com/cover.png
21 | 
22 |   - title: Origin UI Vue
23 |     description: Beautiful UI components built with Tailwind CSS and Radix Vue
24 |     url: https://originui-vue.pages.dev/
25 |     image: /showcase/origin.png
26 | 
27 |   - title: Float UI
28 |     description: Float UI offers all the vital building blocks you need to transform your idea into a great-looking startup.
29 |     url: https://floatui.com/
30 |     image: https://ph-files.imgix.net/56069229-222e-4364-88c6-8c5d4aa0c3e5.png?auto=compress&codec=mozjpeg&cs=strip&auto=format&fit=max&dpr=1
31 | 
32 |   - title: Una UI
33 |     description: The Atomic UI Framework for Nuxt, Powered by Unocss engine.
34 |     url: https://unaui.com/
35 |     image: https://unaui.com/hero.png
36 | 
37 | projects:
38 |   - title: UnInbox
39 |     description: Modern email for teams and professionals.
40 |     url: https://uninbox.com/
41 |     image: https://uninbox.com/opengraph-image.jpg
42 | 
43 |   - title: Twir
44 |     description: Powerful and useful Twitch bot that helps manage chat on big channels.
45 |     url: https://twir.app/
46 |     image: /showcase/twir.png
47 | 
48 |   - title: Chalk.ist
49 |     description: Create beautiful images of your source code.
50 |     url: https://chalk.ist/
51 |     image: https://chalk.ist/og-image.jpg
52 | 
53 |   - title: vue0
54 |     description: Generate Component with simple text prompts. Vue version open source alternative for v0.
55 |     url: https://www.vue0.dev/
56 |     image: https://www.vue0.dev/og.png
57 | 
58 |   - title: chibisafe
59 |     description: Blazing fast file uploader and awesome bunker written in node! 🚀
60 |     url: https://chibisafe.moe/
61 |     image: https://chibisafe.moe/meta.jpg
62 | 
63 |   - title: Crypto Map
64 |     description: Explore the world and find places to spend your crypto.
65 |     url: https://map.nimiq.com/
66 |     image: https://mycbdmurjytbdahjljoh.supabase.co/storage/v1/object/public/og-image/og-image.jpg
67 | 
68 |   - title: Sink
69 |     description: A Simple / Speedy / Secure Link Shortener with Analytics, 100% run on Cloudflare.
70 |     url: https://sink.cool/
71 |     image: https://sink.cool/banner.png
72 | 
73 |   - title: Cider Collective
74 |     description: A community-ran and maintained software company focused on creating the best experience for end users.
75 |     url: https://cider.sh
76 |     image: https://cider.sh/og.png
77 | 
78 |   - title: Movie Tracker
79 |     description: Your guide to movies and TV shows. Find movies and shows, create lists, share your thoughts.
80 |     url: https://movie-tracker.app/en
81 |     image: https://raw.githubusercontent.com/dapzer/movie-tracker/refs/heads/master/apps/frontend/src/public/ogImageEn.webp
82 | 
83 | starters:
84 |   - title: shadcn-docs
85 |     description: A Nuxt content docs theme built with `shadcn-vue`
86 |     url: https://shadcn-docs.nuxt.dev/
87 |     image: https://github.com/ZTL-UwU/shadcn-docs-nuxt/assets/49156174/b317288d-092d-4656-af5e-54034351daca
88 | 
89 | ---
90 | 


--------------------------------------------------------------------------------