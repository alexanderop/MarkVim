---
description: 
globs: *.vue
alwaysApply: false
---
# When to apply

Attach this rule whenever:

* The file is inside a Nuxt project that has `reka-ui/nuxt` in `nuxt.config.ts`, **or**
* The open file already references `reka-ui` (including `/namespaced`) or uses any Reka component tag.

# Nuxt specifics

`reka-ui/nuxt` activates **automatic component import** via Nuxt's Components feature.
**Never** write manual `import { … } from 'reka-ui'` statements—Cursor should omit them.

# Component reference (v2.3.0)

All components are unstyled primitives following the **Root + Parts** pattern and support `asChild`. Components marked *Alpha* are still experimental and may change.

## Form

* Checkbox
* Combobox
* Editable
* Listbox
* NumberField
* Label
* PinInput
* RadioGroup
* Select
* Slider
* Switch
* TagsInput
* Toggle
* ToggleGroup

## Dates *(alpha)*

* Calendar
* DateField
* DatePicker
* DateRangeField
* DateRangePicker
* RangeCalendar
* TimeField

## General

* Accordion
* AlertDialog
* AspectRatio
* Avatar
* Collapsible
* ContextMenu
* Dialog
* DropdownMenu
* HoverCard
* Menubar
* NavigationMenu
* Pagination
* Popover
* Progress
* ScrollArea
* Separator
* Splitter
* Stepper
* Tabs
* Toast
* Toolbar
* Tooltip
* Tree

---

## Composition standards

1. Use the **Root + Parts** pattern (`DialogRoot`, `DialogTrigger`, `DialogContent`, …).
2. For custom DOM elements, wrap with `asChild` and supply your own markup:

   ```vue
   <DialogTrigger asChild>
     <button class="btn-primary">Open dialog</button>
   </DialogTrigger>
   ```
3. Components ship **unstyled**; apply Tailwind / CSS classes yourself.

---



## Snippet library

### Select (Single choice)

```vue
<SelectRoot v-model="fruit">
  <SelectTrigger class="btn w-48">{{ selectedLabel }}</SelectTrigger>
  <SelectPortal>
    <SelectContent class="bg-white rounded shadow p-2">
      <SelectGroup>
        <SelectLabel class="text-xs text-gray-500 px-2">Fruits</SelectLabel>
        <SelectItem
          v-for="o in options"
          :key="o.value"
          :value="o.value"
          class="px-2 py-1 hover:bg-gray-100 cursor-pointer"
        >
          {{ o.label }}
        </SelectItem>
      </SelectGroup>
    </SelectContent>
  </SelectPortal>
</SelectRoot>
```

### Listbox (Multi-select + virtualized)

```vue
<ListboxRoot multiple v-model="picked">
  <template #default="{ items }">
    <VirtualList
      :items="items"
      :item-size="32"
      class="max-h-64 overflow-y-auto"
    >
      <template #default="{ item }">
        <ListboxOption :value="item.value" class="p-2">
          {{ item.label }}
        </ListboxOption>
      </template>
    </VirtualList>
  </template>
</ListboxRoot>
```

### Namespaced Dialog

```vue
<script setup lang="ts">
import { Dialog } from "reka-ui/namespaced"
</script>

<template>
  <Dialog.Root>
    <Dialog.Trigger asChild>
      <button class="btn">Launch</button>
    </Dialog.Trigger>

    <Dialog.Portal>
      <Dialog.Overlay class="fixed inset-0 bg-black/50" />
      <Dialog.Content class="bg-white p-6 rounded-lg w-96">
        <!-- content -->
      </Dialog.Content>
    </Dialog.Portal>
  </Dialog.Root>
</template>
```

---

## Accessibility & performance reminders

* Trust Reka UI for focus-management and ARIA roles; only override when absolutely necessary.
* Use `estimateSize` & `overscan` props for smooth virtual scrolling on large data sets.
* Stick to Vue 3 `ref` + `v-model` for controlled components; uncontrolled primitives work fine when you don’t need reactivity.

## Styling
You need to use simple 

## Reference
If you need more information you have the full documenation [reka.txt](mdc:.cursor/docs/reka.txt)