---
description: 
globs: 
alwaysApply: true
---
# MarkVim Project - Technology Stack & Capabilities

ONLY USE COMMENTS WHEN REALLY NEEED I HATE COMMENTS
Never use any please
never use else use early returns or ternary

## Project OverviewO
This is a **Nuxt 3** application called MarkVim, built with modern web technologies and focused on markdown editing capabilities.

## Available Technologies & Dependencies

### Core Framework
- **Nuxt 3.17.5+** - Full-stack Vue.js framework with SSR/SSG capabilities
- **Vue 3.5.16+** - Progressive JavaScript framework for building user interfaces
- **Vue Router 4.5.1+** - Official router for Vue.js applications
- **TypeScript** - Configured with strict type checking via tsconfig.json

### Build Tools & Package Management
- **pnpm 9.9.0+** - Fast, disk space efficient package manager
- **ESLint 9.0.0+** with **@nuxt/eslint 1.4.1** - Code linting and formatting
- **Vite** - Fast build tool (included with Nuxt 3)

### Nuxt Modules & Extensions
- **@nuxt/icon 1.13.0** - Icon component system for Nuxt
- **@nuxt/image 1.10.0** - Optimized image component for Nuxt
- **nuxt-codemirror 0.0.16** - CodeMirror integration for code editing
- **reka-ui 2.3.0** with Nuxt module - UI component library

### Content & Markdown Processing
- **markdown-it 14.1.0+** - Markdown parser and renderer
- CodeMirror integration for enhanced code editing experience

## Available Documentation & Help Resources

### Nuxt Documentation Access
You have access to comprehensive Nuxt documentation including:
- Core Nuxt 3 features and APIs
- Official Nuxt modules (@nuxt/content, @nuxt/ui, @nuxt/image, @nuxt/icon)
- Nuxt UI component documentation (Button, Input, Select, CommandPalette, etc.)
- NuxtHub features (database, blob, KV storage)
- Server-side rendering, static generation, and deployment options

### Module-Specific Documentation
- **Reka UI**: Modern Vue component library with Nuxt integration
- **CodeMirror**: Advanced code editor with syntax highlighting and extensions
- **Markdown-it**: Flexible markdown processing with plugin system

## Development Environment
- **Shell**: zsh
- **OS**: macOS (darwin 23.6.0)
- **Node.js**: ES modules enabled (type: "module" in package.json)
- **Dev Server**: `pnpm dev` - Runs Nuxt development server
- **Build**: `pnpm build` - Creates production build
- **Generate**: `pnpm generate` - Static site generation

## Project Structure Notes
- `/server/` - Server-side API routes and middleware
- `/public/` - Static assets served directly
- `/app.vue` - Main application component
- Standard Nuxt 3 auto-imports for components, composables, and utilities

## Coding Guidelines
- **NEVER use else statements** - Always use early returns or ternary operators instead
- **Avoid comments** - Only add comments when absolutely necessary
- Use TypeScript for all new code
- Follow Vue 3 Composition API patterns
- Leverage Nuxt 3 auto-imports (no need to import ref, computed, etc.)
- Use server-side rendering capabilities when appropriate
- Implement proper SEO meta tags with Nuxt's built-in head management


When working on this project, you can reference Nuxt documentation for any framework-specific questions, and utilize the available UI components from Reka UI for consistent design patterns.
