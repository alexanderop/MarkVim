@import "tailwindcss";
@import "@nuxt/ui";

@theme {
  /* =============================================
     ✨ FONT CONFIGURATION
     =============================================*/
  --font-sans: 'Geist', system-ui, sans-serif;
  --font-mono: 'Fira Code', 'Monaco', 'Courier New', monospace;

  /* =============================================
     ✨ COLOR CONFIGURATION
     =============================================*/
  /* Map custom colors to Tailwind */
  --color-background: oklch(12% 0.002 0);
  --color-foreground: oklch(96% 0 0);
  --color-accent: oklch(60% 0.18 240);
  --color-muted: oklch(20% 0.002 0);
  --color-border: oklch(25% 0.003 20);

  /* =============================================
     ✨ PRIMARY COLOR OVERRIDE
     Override Tailwind's default primary (green) with our dynamic accent color
     Uses OKLCH from syntax to generate shades dynamically based on --accent
     This ensures buttons respond to theme changes
     =============================================*/
  --color-primary-50: oklch(from var(--accent) 95% calc(c * 0.3) h);
  --color-primary-100: oklch(from var(--accent) 90% calc(c * 0.45) h);
  --color-primary-200: oklch(from var(--accent) 80% calc(c * 0.55) h);
  --color-primary-300: oklch(from var(--accent) 70% calc(c * 0.75) h);
  --color-primary-400: oklch(from var(--accent) 65% calc(c * 0.9) h);
  --color-primary-500: var(--accent);  /* Base accent color */
  --color-primary-600: oklch(from var(--accent) calc(l - 0.10) c h);
  --color-primary-700: oklch(from var(--accent) calc(l - 0.20) calc(c * 0.9) h);
  --color-primary-800: oklch(from var(--accent) calc(l - 0.30) calc(c * 0.65) h);
  --color-primary-900: oklch(from var(--accent) calc(l - 0.40) calc(c * 0.45) h);
  --color-primary-950: oklch(from var(--accent) calc(l - 0.45) calc(c * 0.25) h);
}

/* =============================================
   ✨ LEGACY CSS VARIABLES (for backward compatibility)
   =============================================*/
:root {
  /* Core 5 tokens - everything you need */
  --background: var(--color-background);
  --foreground: var(--color-foreground);
  --accent: var(--color-accent);
  --muted: var(--color-muted);
  --border: var(--color-border);

  /* =============================================
     ✨ NUXT UI SEMANTIC COLOR OVERRIDE
     Override Nuxt UI's semantic colors to use our dynamic theme colors
     This makes all Nuxt UI components respond to theme changes
     =============================================*/
  --ui-primary: var(--accent) !important;
  --ui-error: var(--alert-caution) !important;
  --ui-success: var(--alert-tip) !important;
  --ui-info: var(--alert-note) !important;
  --ui-warning: var(--alert-warning) !important;

  /* =============================================
     ✨ FONT SYSTEM TOKENS
     =============================================*/

  /* Base font size - adjustable via settings */
  --font-size-base: 14px;

  /* Font families */
  --font-family-sans: 'Geist', sans-serif;
  --font-family-mono: 'Fira Code', monospace;

  /* Font size scale based on base size */
  --font-size-xs: calc(var(--font-size-base) * 0.75);
  --font-size-sm: calc(var(--font-size-base) * 0.875);
  --font-size-md: var(--font-size-base);
  --font-size-lg: calc(var(--font-size-base) * 1.125);
  --font-size-xl: calc(var(--font-size-base) * 1.25);
  --font-size-2xl: calc(var(--font-size-base) * 1.5);

  /* Line height scale */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.75;
}

/* =============================================
   ✨ GLOBAL STYLES (migrated from UnoCSS preflights)
   =============================================*/
body {
  font-family: var(--font-family-sans);
  font-size: var(--font-size-base);
  background-color: var(--background);
  color: var(--foreground);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code, pre, kbd, samp {
  font-family: var(--font-family-mono);
  font-feature-settings: 'liga' 1, 'calt' 1;
  font-variant-ligatures: contextual;
}

/* Shiki code blocks - let night-owl theme handle colors */
.shiki,
.shiki code,
.shiki pre {
  font-family: var(--font-family-mono) !important;
  font-size: var(--font-size-base) !important;
  font-feature-settings: 'liga' 1, 'calt' 1;
  font-variant-ligatures: contextual;
  tab-size: 2;
}

/* CodeMirror editor */
.cm-editor,
.cm-editor .cm-content,
.cm-editor .cm-line {
  font-family: var(--font-family-mono) !important;
  font-size: var(--font-size-base) !important;
  font-feature-settings: 'liga' 1, 'calt' 1;
  font-variant-ligatures: contextual;
}

/* ──────────────────────────
   Shiki Line Numbers
   ──────────────────────────*/
.shiki {
  counter-reset: shiki-line-number;
  position: relative;
  overflow-x: auto;
}

.shiki .line {
  counter-increment: shiki-line-number;
  display: block;
  position: relative;
  padding-left: 3.5em;
}

.shiki .line::before {
  content: counter(shiki-line-number);
  position: absolute;
  left: 0;
  width: 2.5em;
  text-align: right;
  padding-right: 1em;
  color: var(--foreground);
  opacity: 0.5;
  user-select: none;
  font-size: 0.875em;
  line-height: inherit;
}

.shiki .line:last-child:empty::before {
  content: none;
  counter-increment: none;
}

/* =============================================
   ✨ TYPOGRAPHY - PROSE STYLES (migrated from UnoCSS)
   =============================================*/
.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
  color: var(--accent);
}

.prose .shiki {
  border-radius: 0.5rem;
  overflow-x: auto;
}

.prose .mermaid {
  display: flex;
  justify-content: center;
  margin: 1rem 0;
}

.prose .markdown-alert {
  border-left-width: 4px;
  border-left-style: solid;
  padding-left: 1rem;
  margin: 1rem 0;
  background-color: color-mix(in oklch, var(--background) 90%, transparent);
  border-radius: 0.375rem;
  padding: 1rem;
}

.prose .markdown-alert-note {
  border-left-color: var(--alert-note);
  background-color: color-mix(in oklch, var(--alert-note) 5%, var(--background));
}

.prose .markdown-alert-note .markdown-alert-title {
  color: var(--foreground);
}

.prose .markdown-alert-note .markdown-alert-title svg {
  fill: var(--foreground);
}

.prose .markdown-alert-tip {
  border-left-color: var(--alert-tip);
  background-color: color-mix(in oklch, var(--alert-tip) 5%, var(--background));
}

.prose .markdown-alert-tip .markdown-alert-title {
  color: var(--foreground);
}

.prose .markdown-alert-tip .markdown-alert-title svg {
  fill: var(--foreground);
}

.prose .markdown-alert-important {
  border-left-color: var(--alert-important);
  background-color: color-mix(in oklch, var(--alert-important) 5%, var(--background));
}

.prose .markdown-alert-important .markdown-alert-title {
  color: var(--foreground);
}

.prose .markdown-alert-important .markdown-alert-title svg {
  fill: var(--foreground);
}

.prose .markdown-alert-warning {
  border-left-color: var(--alert-warning);
  background-color: color-mix(in oklch, var(--alert-warning) 5%, var(--background));
}

.prose .markdown-alert-warning .markdown-alert-title {
  color: var(--foreground);
}

.prose .markdown-alert-warning .markdown-alert-title svg {
  fill: var(--foreground);
}

.prose .markdown-alert-caution {
  border-left-color: var(--alert-caution);
  background-color: color-mix(in oklch, var(--alert-caution) 5%, var(--background));
}

.prose .markdown-alert-caution .markdown-alert-title {
  color: var(--foreground);
}

.prose .markdown-alert-caution .markdown-alert-title svg {
  fill: var(--foreground);
}

/* ══════════════════════════════════════════════════════════════════════════════════════════════
   🎨 DESIGNER DOCUMENTATION: MarkVim Simplified Color System
   ══════════════════════════════════════════════════════════════════════════════════════════════

   Ultra-minimal color system with just 5 essential tokens using OKLCH color space.
   Perfect for clean, modern interfaces that prioritize simplicity and accessibility.

   ──────────────────────────────────────────────────────────────────────────────────────────────
   🌈 WHY OKLCH? (vs Traditional HSL/RGB)
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   OKLCH provides:
   ✅ Perceptual uniformity (equal lightness steps look equal to human eyes)
   ✅ Wider color gamut (more vibrant colors on modern displays)
   ✅ Predictable lightness calculations (perfect for hover states)
   ✅ Better accessibility (precise contrast control)
   
   Format: oklch(Lightness% Chroma Hue)
   - Lightness: 0-100% (0 = black, 100 = white)
   - Chroma: 0-0.4+ (0 = grayscale, higher = more saturated)
   - Hue: 0-360° (color wheel position)

   ──────────────────────────────────────────────────────────────────────────────────────────────
   🎯 THE 5 ESSENTIAL TOKENS
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   --background: oklch(99% 0 0)      ← Page/card backgrounds
   --foreground: oklch(18% 0.002 0)  ← Primary text color
   --accent: oklch(45% 0.15 240)     ← Links, buttons, brand elements
   --muted: oklch(92% 0 0)           ← Secondary backgrounds, subtle areas
   --border: oklch(94% 0.003 20)     ← Dividers, input borders, separators

   ⚡ POWER OF THIS APPROACH:
   • Minimal cognitive load - only 5 decisions to make
   • Consistent visual hierarchy automatically
   • Easy to maintain and update
   • Accessible by design with proper contrast ratios

   ──────────────────────────────────────────────────────────────────────────────────────────────
   🎨 USAGE PATTERNS
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   BACKGROUNDS:
   --background    → Main page, cards, modals, primary surfaces
   --muted         → Sidebars, code blocks, subtle containers
   
   TEXT:
   --foreground    → Headings, body text, primary content
   --accent        → Links, interactive text, brand elements
   
   INTERACTIVE:
   --accent        → Buttons, links, focus states, selected states
   --border        → Input fields, dividers, card borders
   
   COMBINATIONS THAT WORK:
   • --foreground on --background (primary text)
   • --accent on --background (links, buttons)
   • --foreground on --muted (text on subtle backgrounds)
   • --accent on --muted (highlighted elements)
   
   GITHUB ALERTS (using OKLCH hue shifting):
   • Note: var(--accent) - Blue base color
   • Tip: oklch(from var(--accent) l c 140) - Green (hue 140°)
   • Important: oklch(from var(--accent) l c 280) - Purple (hue 280°)
   • Warning: oklch(from var(--accent) l c 80) - Orange (hue 80°)
   • Caution: oklch(from var(--accent) l c 20) - Red (hue 20°)

   ──────────────────────────────────────────────────────────────────────────────────────────────
   🌙 DARK MODE STRATEGY
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   Dark mode FLIPS the core relationship:
   Light: --background (99% light) + --foreground (18% dark)
   Dark:  --background (12% dark) + --foreground (96% light)
   
   Key adjustments for dark mode:
   • --accent gets brighter (45% → 60%) for better visibility
   • --muted and --border get subtle adjustments for proper hierarchy
   • All relationships maintain their visual weight and contrast

   ──────────────────────────────────────────────────────────────────────────────────────────────
   ♿ ACCESSIBILITY BUILT-IN
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   CONTRAST RATIOS:
   • --foreground on --background: >15:1 (WCAG AAA)
   • --accent on --background: >4.5:1 (WCAG AA)
   • All combinations tested for accessibility compliance
   
   COLORBLIND FRIENDLY:
   • High contrast reduces color dependency
   • Blue accent is distinguishable across all types of color vision
   • Lightness differences provide clear hierarchy

   ──────────────────────────────────────────────────────────────────────────────────────────────
   🛠️  USAGE GUIDELINES
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   DO ✅:
   • Use these 5 tokens for all interface colors
   • Create hover states with OKLCH calculations: oklch(from var(--accent) calc(l + 0.05) c h)
   • Test in both light and dark modes
   • Leverage the high contrast for readability
   
   DON'T ❌:
   • Add more color tokens without careful consideration
   • Hard-code hex values or RGB colors
   • Create custom colors outside this system
   • Ignore the dark mode variants

   ──────────────────────────────────────────────────────────────────────────────────────────────
   🔧 CUSTOMIZATION
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   TO REBRAND:
   1. Change --accent to your brand color in OKLCH format
   2. Adjust --border hue to complement your accent (optional)
   3. Test contrast ratios with your new accent
   4. Verify both light and dark modes work well
   
   BRAND COLOR CONVERSION:
   Use oklch.com to convert your brand hex to OKLCH format
   Examples:
   • Blue: #006cac → oklch(45% 0.15 240)
   • Green: #00a86b → oklch(60% 0.15 160)
   • Purple: #6f42c1 → oklch(45% 0.15 280)

   ──────────────────────────────────────────────────────────────────────────────────────────────
   📊 BENEFITS OF SIMPLICITY
   ──────────────────────────────────────────────────────────────────────────────────────────────
   
   PERFORMANCE:
   • Minimal CSS - only 10 color declarations total
   • Fast runtime theme switching
   • Reduced bundle size
   
   MAINTAINABILITY:
   • Impossible to create inconsistent color combinations
   • Easy to understand for any team member
   • Future-proof and scalable
   
   DESIGN CONSISTENCY:
   • Automatic visual hierarchy
   • Cohesive brand expression
   • Professional, clean aesthetic

   ══════════════════════════════════════════════════════════════════════════════════════════════ */



